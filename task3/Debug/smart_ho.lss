
smart_ho.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c94  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000797  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068b  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000322  00000000  00000000  000025d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 81 01 	call	0x302	; 0x302 <main>
  64:	0c 94 05 02 	jmp	0x40a	; 0x40a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc_init>:


void adc_select_trigger(adc_trigger_t trigger)
{
	SFIOR &= ~(0b111<<ADTS0);
	SFIOR |= trigger<<ADTS0;
  6c:	1a ba       	out	0x1a, r1	; 26
  6e:	86 b1       	in	r24, 0x06	; 6
  70:	80 68       	ori	r24, 0x80	; 128
  72:	86 b9       	out	0x06, r24	; 6
  74:	86 b1       	in	r24, 0x06	; 6
  76:	86 60       	ori	r24, 0x06	; 6
  78:	86 b9       	out	0x06, r24	; 6
  7a:	87 b1       	in	r24, 0x07	; 7
  7c:	80 6c       	ori	r24, 0xC0	; 192
  7e:	87 b9       	out	0x07, r24	; 7
  80:	08 95       	ret

00000082 <adc_select_channel>:
  82:	97 b1       	in	r25, 0x07	; 7
  84:	90 7e       	andi	r25, 0xE0	; 224
  86:	97 b9       	out	0x07, r25	; 7
  88:	97 b1       	in	r25, 0x07	; 7
  8a:	89 2b       	or	r24, r25
  8c:	87 b9       	out	0x07, r24	; 7
  8e:	08 95       	ret

00000090 <adc_start_conv>:
}


void adc_start_conv()
{
	ADCSRA |= 0b1<<ADSC;
  90:	86 b1       	in	r24, 0x06	; 6
  92:	80 64       	ori	r24, 0x40	; 64
  94:	86 b9       	out	0x06, r24	; 6
  96:	08 95       	ret

00000098 <adc_is_dataready>:
}
uint8_t adc_is_dataready()
{
	uint8_t result = 0x01&(ADCSRA>>ADIF);  //read flag
  98:	86 b1       	in	r24, 0x06	; 6
	ADCSRA |= 0b1 <<ADIF;  //clear flag
  9a:	96 b1       	in	r25, 0x06	; 6
  9c:	90 61       	ori	r25, 0x10	; 16
  9e:	96 b9       	out	0x06, r25	; 6
	return result;
}
  a0:	82 95       	swap	r24
  a2:	81 70       	andi	r24, 0x01	; 1
  a4:	08 95       	ret

000000a6 <adc_get_data>:
uint16_t adc_get_data()
{
	uint16_t adc_val;
	adc_val = ADCL;
  a6:	24 b1       	in	r18, 0x04	; 4
	adc_val |= ADCH << 8;
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	98 2f       	mov	r25, r24
  ae:	88 27       	eor	r24, r24
	return adc_val;
  b0:	82 2b       	or	r24, r18
  b2:	08 95       	ret

000000b4 <dio_set_direction>:
#include<stdint.h>


void dio_set_direction(port_x port ,dio_pin pin ,dio_direction direction){

	switch(port){
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	11 f1       	breq	.+68     	; 0xfc <dio_set_direction+0x48>
  b8:	30 f0       	brcs	.+12     	; 0xc6 <dio_set_direction+0x12>
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	d1 f1       	breq	.+116    	; 0x132 <dio_set_direction+0x7e>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	09 f4       	brne	.+2      	; 0xc4 <dio_set_direction+0x10>
  c2:	52 c0       	rjmp	.+164    	; 0x168 <dio_set_direction+0xb4>
  c4:	08 95       	ret
		case PORT_A: if(direction == OUTPUT)
  c6:	41 30       	cpi	r20, 0x01	; 1
  c8:	59 f4       	brne	.+22     	; 0xe0 <dio_set_direction+0x2c>
		DDRA |= (0b1 << pin);
  ca:	2a b3       	in	r18, 0x1a	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <dio_set_direction+0x22>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <dio_set_direction+0x1e>
  da:	82 2b       	or	r24, r18
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	08 95       	ret
		else if(direction == INPUT)
  e0:	41 11       	cpse	r20, r1
  e2:	5c c0       	rjmp	.+184    	; 0x19c <dio_set_direction+0xe8>
		DDRA &= ~(0b1<<pin);
  e4:	2a b3       	in	r18, 0x1a	; 26
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <dio_set_direction+0x3c>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <dio_set_direction+0x38>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	08 95       	ret
		break;
		case PORT_B: if(direction == OUTPUT)
  fc:	41 30       	cpi	r20, 0x01	; 1
  fe:	59 f4       	brne	.+22     	; 0x116 <dio_set_direction+0x62>
		DDRB |= (0b1 << pin);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <dio_set_direction+0x58>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <dio_set_direction+0x54>
 110:	82 2b       	or	r24, r18
 112:	87 bb       	out	0x17, r24	; 23
 114:	08 95       	ret
		else if(direction == INPUT)
 116:	41 11       	cpse	r20, r1
 118:	41 c0       	rjmp	.+130    	; 0x19c <dio_set_direction+0xe8>
		DDRB &= ~(0b1<<pin);
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <dio_set_direction+0x72>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <dio_set_direction+0x6e>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
		break;
		case PORT_C: if(direction == OUTPUT)
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	59 f4       	brne	.+22     	; 0x14c <dio_set_direction+0x98>
		DDRC |= (0b1 << pin);
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <dio_set_direction+0x8e>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <dio_set_direction+0x8a>
 146:	82 2b       	or	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
		else if(direction == INPUT)
 14c:	41 11       	cpse	r20, r1
 14e:	26 c0       	rjmp	.+76     	; 0x19c <dio_set_direction+0xe8>
		DDRC &= ~(0b1<<pin);
 150:	24 b3       	in	r18, 0x14	; 20
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <dio_set_direction+0xa8>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <dio_set_direction+0xa4>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	84 bb       	out	0x14, r24	; 20
 166:	08 95       	ret
		break;
		case PORT_D: if(direction == OUTPUT)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	59 f4       	brne	.+22     	; 0x182 <dio_set_direction+0xce>
		DDRD |= (0b1 << pin);
 16c:	21 b3       	in	r18, 0x11	; 17
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <dio_set_direction+0xc4>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <dio_set_direction+0xc0>
 17c:	82 2b       	or	r24, r18
 17e:	81 bb       	out	0x11, r24	; 17
 180:	08 95       	ret
		else if(direction == INPUT)
 182:	41 11       	cpse	r20, r1
 184:	0b c0       	rjmp	.+22     	; 0x19c <dio_set_direction+0xe8>
		DDRD &= ~(0b1<<pin);
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <dio_set_direction+0xde>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <dio_set_direction+0xda>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	81 bb       	out	0x11, r24	; 17
 19c:	08 95       	ret

0000019e <dio_set_value>:
		break;
	}
}

void dio_set_value(port_x port ,dio_pin pin,dio_value value){
	switch(port){
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	11 f1       	breq	.+68     	; 0x1e6 <dio_set_value+0x48>
 1a2:	30 f0       	brcs	.+12     	; 0x1b0 <dio_set_value+0x12>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	d1 f1       	breq	.+116    	; 0x21c <dio_set_value+0x7e>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	09 f4       	brne	.+2      	; 0x1ae <dio_set_value+0x10>
 1ac:	52 c0       	rjmp	.+164    	; 0x252 <dio_set_value+0xb4>
 1ae:	08 95       	ret
		case PORT_A: if(value == HIGH)
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <dio_set_value+0x2c>
		PORTA |= (0b1 << pin);
 1b4:	2b b3       	in	r18, 0x1b	; 27
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <dio_set_value+0x22>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <dio_set_value+0x1e>
 1c4:	82 2b       	or	r24, r18
 1c6:	8b bb       	out	0x1b, r24	; 27
 1c8:	08 95       	ret
		else if(value == LOW)
 1ca:	41 11       	cpse	r20, r1
 1cc:	5c c0       	rjmp	.+184    	; 0x286 <dio_set_value+0xe8>
		PORTA &= ~(0b1<<pin);
 1ce:	2b b3       	in	r18, 0x1b	; 27
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <dio_set_value+0x3c>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <dio_set_value+0x38>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	08 95       	ret
		break;
		case PORT_B: if(value == HIGH)
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <dio_set_value+0x62>
		PORTB |= (0b1 << pin);
 1ea:	28 b3       	in	r18, 0x18	; 24
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <dio_set_value+0x58>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <dio_set_value+0x54>
 1fa:	82 2b       	or	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
		else if(value == LOW)
 200:	41 11       	cpse	r20, r1
 202:	41 c0       	rjmp	.+130    	; 0x286 <dio_set_value+0xe8>
		PORTB &= ~(0b1<<pin);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <dio_set_value+0x72>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <dio_set_value+0x6e>
 214:	80 95       	com	r24
 216:	82 23       	and	r24, r18
 218:	88 bb       	out	0x18, r24	; 24
 21a:	08 95       	ret
		break;
		case PORT_C: if(value == HIGH)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	59 f4       	brne	.+22     	; 0x236 <dio_set_value+0x98>
		PORTC |= (0b1 << pin);
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <dio_set_value+0x8e>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <dio_set_value+0x8a>
 230:	82 2b       	or	r24, r18
 232:	85 bb       	out	0x15, r24	; 21
 234:	08 95       	ret
		else if(value == LOW)
 236:	41 11       	cpse	r20, r1
 238:	26 c0       	rjmp	.+76     	; 0x286 <dio_set_value+0xe8>
		PORTC &= ~(0b1<<pin);
 23a:	25 b3       	in	r18, 0x15	; 21
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <dio_set_value+0xa8>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <dio_set_value+0xa4>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	85 bb       	out	0x15, r24	; 21
 250:	08 95       	ret
		break;
		case PORT_D: if(value == HIGH)
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	59 f4       	brne	.+22     	; 0x26c <dio_set_value+0xce>
		PORTD |= (0b1 << pin);
 256:	22 b3       	in	r18, 0x12	; 18
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <dio_set_value+0xc4>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <dio_set_value+0xc0>
 266:	82 2b       	or	r24, r18
 268:	82 bb       	out	0x12, r24	; 18
 26a:	08 95       	ret
		else if(value == LOW)
 26c:	41 11       	cpse	r20, r1
 26e:	0b c0       	rjmp	.+22     	; 0x286 <dio_set_value+0xe8>
		PORTD &= ~(0b1<<pin);
 270:	22 b3       	in	r18, 0x12	; 18
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <dio_set_value+0xde>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <dio_set_value+0xda>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	82 bb       	out	0x12, r24	; 18
 286:	08 95       	ret

00000288 <dio_get_value>:

dio_value dio_get_value(port_x port,dio_pin pin){

	dio_value pinvalue;

	switch(port){
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	89 f0       	breq	.+34     	; 0x2ae <dio_get_value+0x26>
 28c:	28 f0       	brcs	.+10     	; 0x298 <dio_get_value+0x10>
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	c9 f0       	breq	.+50     	; 0x2c4 <dio_get_value+0x3c>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	11 f1       	breq	.+68     	; 0x2da <dio_get_value+0x52>
 296:	33 c0       	rjmp	.+102    	; 0x2fe <dio_get_value+0x76>

		case PORT_A: if(PINA & (0b1<<pin))
 298:	89 b3       	in	r24, 0x19	; 25
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <dio_get_value+0x1a>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <dio_get_value+0x16>
 2a6:	80 ff       	sbrs	r24, 0
 2a8:	23 c0       	rjmp	.+70     	; 0x2f0 <dio_get_value+0x68>
		pinvalue = HIGH;
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	28 c0       	rjmp	.+80     	; 0x2fe <dio_get_value+0x76>
		else
		pinvalue = LOW;
		break;
		case PORT_B: if(PINB & (0b1<<pin))
 2ae:	86 b3       	in	r24, 0x16	; 22
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <dio_get_value+0x30>
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <dio_get_value+0x2c>
 2bc:	80 ff       	sbrs	r24, 0
 2be:	1a c0       	rjmp	.+52     	; 0x2f4 <dio_get_value+0x6c>
		pinvalue = HIGH;
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	1d c0       	rjmp	.+58     	; 0x2fe <dio_get_value+0x76>
		else
		pinvalue = LOW;
		break;
		case PORT_C: if(PINC & (0b1<<pin))
 2c4:	83 b3       	in	r24, 0x13	; 19
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <dio_get_value+0x46>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <dio_get_value+0x42>
 2d2:	80 ff       	sbrs	r24, 0
 2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <dio_get_value+0x70>
		pinvalue = HIGH;
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <dio_get_value+0x76>
		else
		pinvalue = LOW;
		break;
		case PORT_D: if(PIND & (0b1<<pin))
 2da:	80 b3       	in	r24, 0x10	; 16
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <dio_get_value+0x5c>
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <dio_get_value+0x58>
 2e8:	80 ff       	sbrs	r24, 0
 2ea:	08 c0       	rjmp	.+16     	; 0x2fc <dio_get_value+0x74>
		pinvalue = HIGH;
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <dio_get_value+0x76>
	switch(port){

		case PORT_A: if(PINA & (0b1<<pin))
		pinvalue = HIGH;
		else
		pinvalue = LOW;
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <dio_get_value+0x76>
		break;
		case PORT_B: if(PINB & (0b1<<pin))
		pinvalue = HIGH;
		else
		pinvalue = LOW;
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <dio_get_value+0x76>
		break;
		case PORT_C: if(PINC & (0b1<<pin))
		pinvalue = HIGH;
		else
		pinvalue = LOW;
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <dio_get_value+0x76>
		break;
		case PORT_D: if(PIND & (0b1<<pin))
		pinvalue = HIGH;
		else
		pinvalue = LOW;
 2fc:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		break;
	}
	return pinvalue;
}
 2fe:	89 2f       	mov	r24, r25
 300:	08 95       	ret

00000302 <main>:

int main(void)

{
	
	dio_set_direction(PORT_A ,PIN_0 ,INPUT);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	dio_set_direction(PORT_C ,PIN_6 ,OUTPUT);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	66 e0       	ldi	r22, 0x06	; 6
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	dio_set_direction(PORT_C ,PIN_7 ,OUTPUT);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	67 e0       	ldi	r22, 0x07	; 7
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	dio_set_direction(PORT_B ,PIN_3 ,OUTPUT);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	dio_set_direction(PORT_B ,PIN_0 ,INPUT);
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	dio_set_direction(PORT_B ,PIN_1 ,INPUT);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	dio_set_direction(PORT_B ,PIN_5 ,OUTPUT);
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	65 e0       	ldi	r22, 0x05	; 5
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	dio_set_direction(PORT_B ,PIN_6 ,OUTPUT);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	66 e0       	ldi	r22, 0x06	; 6
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 5a 00 	call	0xb4	; 0xb4 <dio_set_direction>
	
	//DDRC=0xff; // outputand motor motion
	DDRB|=(1<<3); //Set OC0 as output to use PWM signal
 352:	87 b3       	in	r24, 0x17	; 23
 354:	88 60       	ori	r24, 0x08	; 8
 356:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
	
	  adc_init();
 358:	0e 94 36 00 	call	0x6c	; 0x6c <adc_init>
	  adc_select_channel(0);
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 41 00 	call	0x82	; 0x82 <adc_select_channel>
	  
	
	  /*end of initialization*/
	    //PWM initialization
	    PWM_Timer0_start(0);//Set OC0 as output to use PWM signal
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 00 02 	call	0x400	; 0x400 <PWM_Timer0_start>
	  
	 PORTC &= ~(1<<6);
 36a:	85 b3       	in	r24, 0x15	; 21
 36c:	8f 7b       	andi	r24, 0xBF	; 191
 36e:	85 bb       	out	0x15, r24	; 21
	 PORTC|=(1<<7);
 370:	85 b3       	in	r24, 0x15	; 21
 372:	80 68       	ori	r24, 0x80	; 128
 374:	85 bb       	out	0x15, r24	; 21
	 
	  uint8_t temp_read;
	  
    while (1) 
    {
		 adc_start_conv(); // STrat the conversion
 376:	0e 94 48 00 	call	0x90	; 0x90 <adc_start_conv>
		 while (adc_is_dataready() == 0); // wait untill read flag
 37a:	0e 94 4c 00 	call	0x98	; 0x98 <adc_is_dataready>
 37e:	88 23       	and	r24, r24
 380:	e1 f3       	breq	.-8      	; 0x37a <main+0x78>
		 temp_read=adc_get_data();
 382:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_get_data>
		 //temp_read=ADCH; // read the tempreture value
		
		 
		  /*Control Fan*/
		  if(temp_read<5)
 386:	85 30       	cpi	r24, 0x05	; 5
 388:	18 f4       	brcc	.+6      	; 0x390 <main+0x8e>
		  {
			  OCR0=255;//0% duty cycle
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	8c bf       	out	0x3c, r24	; 60
 38e:	15 c0       	rjmp	.+42     	; 0x3ba <main+0xb8>
		  }
		  else if(temp_read<10)
 390:	8a 30       	cpi	r24, 0x0A	; 10
 392:	18 f4       	brcc	.+6      	; 0x39a <main+0x98>
		  {
			  OCR0=229;//10% duty cycle
 394:	85 ee       	ldi	r24, 0xE5	; 229
 396:	8c bf       	out	0x3c, r24	; 60
 398:	10 c0       	rjmp	.+32     	; 0x3ba <main+0xb8>
		  }
		  else if(temp_read<15)
 39a:	8f 30       	cpi	r24, 0x0F	; 15
 39c:	18 f4       	brcc	.+6      	; 0x3a4 <main+0xa2>
		  {
			  OCR0=178; //30% duty cycle
 39e:	82 eb       	ldi	r24, 0xB2	; 178
 3a0:	8c bf       	out	0x3c, r24	; 60
 3a2:	0b c0       	rjmp	.+22     	; 0x3ba <main+0xb8>
		  }
		  else if(temp_read<20)
 3a4:	84 31       	cpi	r24, 0x14	; 20
 3a6:	18 f4       	brcc	.+6      	; 0x3ae <main+0xac>
		  {
			  OCR0=102; //60% duty cycle
 3a8:	86 e6       	ldi	r24, 0x66	; 102
 3aa:	8c bf       	out	0x3c, r24	; 60
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <main+0xb8>
		  }
		  else if(temp_read<25)
 3ae:	89 31       	cpi	r24, 0x19	; 25
 3b0:	18 f4       	brcc	.+6      	; 0x3b8 <main+0xb6>
		  {
			  OCR0=25; //90%duty cycle
 3b2:	89 e1       	ldi	r24, 0x19	; 25
 3b4:	8c bf       	out	0x3c, r24	; 60
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <main+0xb8>
		  }
		  else
		  {
			  OCR0=0; //100% duty cycle
 3b8:	1c be       	out	0x3c, r1	; 60
		  }
		  
		   
		     if(dio_get_value(PORT_B,PIN_0)){
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 44 01 	call	0x288	; 0x288 <dio_get_value>
 3c2:	88 23       	and	r24, r24
 3c4:	31 f0       	breq	.+12     	; 0x3d2 <main+0xd0>
			  dio_set_value(PORT_B, PIN_5, HIGH);
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	65 e0       	ldi	r22, 0x05	; 5
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 cf 00 	call	0x19e	; 0x19e <dio_set_value>
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <main+0xda>
		  }
		  else{
		  dio_set_value(PORT_B, PIN_5, LOW);}
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	65 e0       	ldi	r22, 0x05	; 5
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 cf 00 	call	0x19e	; 0x19e <dio_set_value>

		  if(dio_get_value(PORT_B,PIN_1)){
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 44 01 	call	0x288	; 0x288 <dio_get_value>
 3e4:	88 23       	and	r24, r24
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <main+0xf2>
			  dio_set_value(PORT_B, PIN_6, HIGH);
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	66 e0       	ldi	r22, 0x06	; 6
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 cf 00 	call	0x19e	; 0x19e <dio_set_value>
 3f2:	c1 cf       	rjmp	.-126    	; 0x376 <main+0x74>
		  }
		  else{
		  dio_set_value(PORT_B, PIN_6, LOW);}
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	66 e0       	ldi	r22, 0x06	; 6
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 cf 00 	call	0x19e	; 0x19e <dio_set_value>
 3fe:	bb cf       	rjmp	.-138    	; 0x376 <main+0x74>

00000400 <PWM_Timer0_start>:


void PWM_Timer0_start(uint8_t set_duty_cycle)
{

	TCCR0 = (1<<WGM00) | (0<<WGM01) | (1<<COM01) | (1<<COM00) | (1<<CS00) | (0<<CS01) | (1<< CS02) ; //phase correct pwm , inverted pwm ,prescaler 1024
 400:	95 e7       	ldi	r25, 0x75	; 117
 402:	93 bf       	out	0x33, r25	; 51
	TIMSK=0x00;  //Disable Timer compare matcth interrupt;
 404:	19 be       	out	0x39, r1	; 57
	OCR0  = set_duty_cycle; // Set Compare Value ,Duty cycle now =0;
 406:	8c bf       	out	0x3c, r24	; 60
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
