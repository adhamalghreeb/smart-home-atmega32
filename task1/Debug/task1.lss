
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002d5e  00002df2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800170  00800170  00002f02  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  00002f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ca  00000000  00000000  00004fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006786  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00006946  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  00006b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  000091df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000be37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c841  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <main>
      8a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e6       	ldi	r22, 0x68	; 104
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e0 59       	subi	r30, 0x90	; 144
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <timer0_init>:
#define Clear_Bit(REG,BIT) (REG &= (~(1<<BIT)))
#define Set_Bit(REG,BIT) (REG |= (1<<BIT))

static void(*call_back)(void);

void timer0_init(){
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
		// FAST PWM
        Set_Bit(TCCR0,WGM00);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 64       	ori	r24, 0x40	; 64
     e6c:	8c 93       	st	X, r24
        Set_Bit(TCCR0,WGM01);
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	88 60       	ori	r24, 0x08	; 8
     e7a:	8c 93       	st	X, r24
        //preload
        TCNT0 = 0;
     e7c:	e2 e5       	ldi	r30, 0x52	; 82
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	10 82       	st	Z, r1
        //clock source prescalar 64 edit it
        Set_Bit(TCCR0,CS00);
     e82:	a3 e5       	ldi	r26, 0x53	; 83
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e3 e5       	ldi	r30, 0x53	; 83
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	8c 93       	st	X, r24
        Set_Bit(TCCR0,CS01);
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	82 60       	ori	r24, 0x02	; 2
     e9c:	8c 93       	st	X, r24
        Clear_Bit(TCCR0,CS02);
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8b 7f       	andi	r24, 0xFB	; 251
     eaa:	8c 93       	st	X, r24

        // nin inverting
        // Set_Bit(TCCR0,COM00);
        Set_Bit(TCCR0,COM01);
     eac:	a3 e5       	ldi	r26, 0x53	; 83
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e3 e5       	ldi	r30, 0x53	; 83
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 62       	ori	r24, 0x20	; 32
     eb8:	8c 93       	st	X, r24
        //enable 
        Set_Bit(TIMSK, OCIE0); // OUTPUT COMPARE INTERRUPT
     eba:	a9 e5       	ldi	r26, 0x59	; 89
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e9 e5       	ldi	r30, 0x59	; 89
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	82 60       	ori	r24, 0x02	; 2
     ec6:	8c 93       	st	X, r24

        OCR0 = 125; // FOR 1 MS SEC comp value
     ec8:	ec e5       	ldi	r30, 0x5C	; 92
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8d e7       	ldi	r24, 0x7D	; 125
     ece:	80 83       	st	Z, r24
        // DO NOTHING on compare
        Clear_Bit(TCCR0,COM00);
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7e       	andi	r24, 0xEF	; 239
     edc:	8c 93       	st	X, r24
        Clear_Bit(TCCR0,COM01);
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	8c 93       	st	X, r24

}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <timer0_deinit>:

void timer0_deinit(){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
    // NO CLK SOURCE
    Clear_Bit(TCCR0,CS00);
     efa:	a3 e5       	ldi	r26, 0x53	; 83
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e5       	ldi	r30, 0x53	; 83
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	8c 93       	st	X, r24
    Clear_Bit(TCCR0,CS01);
     f08:	a3 e5       	ldi	r26, 0x53	; 83
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e3 e5       	ldi	r30, 0x53	; 83
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8d 7f       	andi	r24, 0xFD	; 253
     f14:	8c 93       	st	X, r24
    Clear_Bit(TCCR0,CS02);
     f16:	a3 e5       	ldi	r26, 0x53	; 83
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e3 e5       	ldi	r30, 0x53	; 83
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8b 7f       	andi	r24, 0xFB	; 251
     f22:	8c 93       	st	X, r24
    // CLEAR INT
    Clear_Bit(TIMSK,TOIE0);
     f24:	a9 e5       	ldi	r26, 0x59	; 89
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e9 e5       	ldi	r30, 0x59	; 89
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	8c 93       	st	X, r24
}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <timer0_set_callback>:

void timer0_set_callback(void(*fun_prt)(void)){
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <timer0_set_callback+0x6>
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
    call_back = fun_prt;
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	90 93 71 01 	sts	0x0171, r25
     f4e:	80 93 70 01 	sts	0x0170, r24
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <timer1_init>:

void timer1_init(){ // for servo
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
        TCCR1A = (1<<WGM11)|(1<<COM1A1);
     f64:	ef e4       	ldi	r30, 0x4F	; 79
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	82 e8       	ldi	r24, 0x82	; 130
     f6a:	80 83       	st	Z, r24
	    TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
     f6c:	ee e4       	ldi	r30, 0x4E	; 78
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8b e1       	ldi	r24, 0x1B	; 27
     f72:	80 83       	st	Z, r24

        Set_Bit(TCCR1A,COM1A1);
     f74:	af e4       	ldi	r26, 0x4F	; 79
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ef e4       	ldi	r30, 0x4F	; 79
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	8c 93       	st	X, r24
        Set_Bit(TCCR1A,WGM11);
     f82:	af e4       	ldi	r26, 0x4F	; 79
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ef e4       	ldi	r30, 0x4F	; 79
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	82 60       	ori	r24, 0x02	; 2
     f8e:	8c 93       	st	X, r24

        Set_Bit(TCCR1B,WGM12);
     f90:	ae e4       	ldi	r26, 0x4E	; 78
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ee e4       	ldi	r30, 0x4E	; 78
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 60       	ori	r24, 0x08	; 8
     f9c:	8c 93       	st	X, r24
        Set_Bit(TCCR1B,WGM13);
     f9e:	ae e4       	ldi	r26, 0x4E	; 78
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ee e4       	ldi	r30, 0x4E	; 78
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 61       	ori	r24, 0x10	; 16
     faa:	8c 93       	st	X, r24

        // ICU HIGH
        // Set_Bit(TCCR1B,ICES1);
        
        TCNT1 = 0;		/* Set timer1 count zero */
     fac:	ec e4       	ldi	r30, 0x4C	; 76
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	11 82       	std	Z+1, r1	; 0x01
     fb2:	10 82       	st	Z, r1
        ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
     fb4:	e6 e4       	ldi	r30, 0x46	; 70
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	83 ec       	ldi	r24, 0xC3	; 195
     fba:	99 e0       	ldi	r25, 0x09	; 9
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24

        //clock source prescalar 64
        Set_Bit(TCCR1B,CS10);
     fc0:	ae e4       	ldi	r26, 0x4E	; 78
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	ee e4       	ldi	r30, 0x4E	; 78
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	8c 93       	st	X, r24
        Set_Bit(TCCR1B,CS11);
     fce:	ae e4       	ldi	r26, 0x4E	; 78
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ee e4       	ldi	r30, 0x4E	; 78
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	8c 93       	st	X, r24
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <timer1_deinit>:

void timer1_deinit(){
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
    // NO CLK SOURCE
    Clear_Bit(TCCR1B,CS00);
     fea:	ae e4       	ldi	r26, 0x4E	; 78
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ee e4       	ldi	r30, 0x4E	; 78
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	8c 93       	st	X, r24
    Clear_Bit(TCCR1B,CS01);
     ff8:	ae e4       	ldi	r26, 0x4E	; 78
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ee e4       	ldi	r30, 0x4E	; 78
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8d 7f       	andi	r24, 0xFD	; 253
    1004:	8c 93       	st	X, r24
    Clear_Bit(TCCR1B,CS02);
    1006:	ae e4       	ldi	r26, 0x4E	; 78
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ee e4       	ldi	r30, 0x4E	; 78
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8b 7f       	andi	r24, 0xFB	; 251
    1012:	8c 93       	st	X, r24
    // CLEAR INT
    Clear_Bit(TIMSK,TOIE0);
    1014:	a9 e5       	ldi	r26, 0x59	; 89
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e9 e5       	ldi	r30, 0x59	; 89
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8e 7f       	andi	r24, 0xFE	; 254
    1020:	8c 93       	st	X, r24
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <timer2_init>:

void timer2_init(){
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
        // FAST PWM
        Set_Bit(TCCR2,WGM20);
    1030:	a5 e4       	ldi	r26, 0x45	; 69
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e4       	ldi	r30, 0x45	; 69
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 64       	ori	r24, 0x40	; 64
    103c:	8c 93       	st	X, r24
        Set_Bit(TCCR2,WGM21);
    103e:	a5 e4       	ldi	r26, 0x45	; 69
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e4       	ldi	r30, 0x45	; 69
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 60       	ori	r24, 0x08	; 8
    104a:	8c 93       	st	X, r24
        
        

        //Clear on compare
        Set_Bit(TCCR2,COM21);
    104c:	a5 e4       	ldi	r26, 0x45	; 69
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e4       	ldi	r30, 0x45	; 69
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 62       	ori	r24, 0x20	; 32
    1058:	8c 93       	st	X, r24

        //clock source prescalar no
        Set_Bit(TCCR2,CS20);
    105a:	a5 e4       	ldi	r26, 0x45	; 69
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e4       	ldi	r30, 0x45	; 69
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	8c 93       	st	X, r24
        Clear_Bit(TCCR2,CS21);
    1068:	a5 e4       	ldi	r26, 0x45	; 69
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e4       	ldi	r30, 0x45	; 69
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8d 7f       	andi	r24, 0xFD	; 253
    1074:	8c 93       	st	X, r24
        Clear_Bit(TCCR2,CS22);
    1076:	a5 e4       	ldi	r26, 0x45	; 69
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e4       	ldi	r30, 0x45	; 69
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8b 7f       	andi	r24, 0xFB	; 251
    1082:	8c 93       	st	X, r24

}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <lm_init>:
#include"lm35.h"
#include"../adc/adc.h"
#include"../dio/dio.h"
#include"../Common_Macros.h"

void lm_init(){
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	dio_set_direction(DIOD,DIO_PIN7,DIO_DIRECTION_OUTPUT);
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	67 e0       	ldi	r22, 0x07	; 7
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	0e 94 14 10 	call	0x2028	; 0x2028 <dio_set_direction>
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <lm_calc>:

void lm_calc(){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	cc 54       	subi	r28, 0x4C	; 76
    10ac:	d0 40       	sbci	r29, 0x00	; 0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    
    float celsius;
    uint8_t Temperature[10];

    celsius = (ADC_Read(0)*4.88);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 d5 12 	call	0x25aa	; 0x25aa <ADC_Read>
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	aa 27       	eor	r26, r26
    10c4:	97 fd       	sbrc	r25, 7
    10c6:	a0 95       	com	r26
    10c8:	ba 2f       	mov	r27, r26
    10ca:	bc 01       	movw	r22, r24
    10cc:	cd 01       	movw	r24, r26
    10ce:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	26 ef       	ldi	r18, 0xF6	; 246
    10dc:	38 e2       	ldi	r19, 0x28	; 40
    10de:	4c e9       	ldi	r20, 0x9C	; 156
    10e0:	50 e4       	ldi	r21, 0x40	; 64
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	89 af       	std	Y+57, r24	; 0x39
    10ec:	9a af       	std	Y+58, r25	; 0x3a
    10ee:	ab af       	std	Y+59, r26	; 0x3b
    10f0:	bc af       	std	Y+60, r27	; 0x3c
	celsius = (celsius/10.00);
    10f2:	69 ad       	ldd	r22, Y+57	; 0x39
    10f4:	7a ad       	ldd	r23, Y+58	; 0x3a
    10f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    10f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	89 af       	std	Y+57, r24	; 0x39
    110c:	9a af       	std	Y+58, r25	; 0x3a
    110e:	ab af       	std	Y+59, r26	; 0x3b
    1110:	bc af       	std	Y+60, r27	; 0x3c

    sprintf(Temperature,"%d%cC  ", (int)celsius, degree_sysmbol);/* convert integer value to ASCII string */
    1112:	69 ad       	ldd	r22, Y+57	; 0x39
    1114:	7a ad       	ldd	r23, Y+58	; 0x3a
    1116:	8b ad       	ldd	r24, Y+59	; 0x3b
    1118:	9c ad       	ldd	r25, Y+60	; 0x3c
    111a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9c 01       	movw	r18, r24
    1124:	8d b7       	in	r24, 0x3d	; 61
    1126:	9e b7       	in	r25, 0x3e	; 62
    1128:	08 97       	sbiw	r24, 0x08	; 8
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	9e bf       	out	0x3e, r25	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	8d bf       	out	0x3d, r24	; 61
    1134:	ed b7       	in	r30, 0x3d	; 61
    1136:	fe b7       	in	r31, 0x3e	; 62
    1138:	31 96       	adiw	r30, 0x01	; 1
    113a:	ce 01       	movw	r24, r28
    113c:	cd 96       	adiw	r24, 0x3d	; 61
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
    1142:	80 e6       	ldi	r24, 0x60	; 96
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	93 83       	std	Z+3, r25	; 0x03
    1148:	82 83       	std	Z+2, r24	; 0x02
    114a:	35 83       	std	Z+5, r19	; 0x05
    114c:	24 83       	std	Z+4, r18	; 0x04
    114e:	8f ed       	ldi	r24, 0xDF	; 223
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	97 83       	std	Z+7, r25	; 0x07
    1154:	86 83       	std	Z+6, r24	; 0x06
    1156:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <sprintf>
    115a:	8d b7       	in	r24, 0x3d	; 61
    115c:	9e b7       	in	r25, 0x3e	; 62
    115e:	08 96       	adiw	r24, 0x08	; 8
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	9e bf       	out	0x3e, r25	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	8d bf       	out	0x3d, r24	; 61

    // LCD_SendString(Temperature);/* send string data for printing */
	memset(Temperature,0,10); 
    116a:	ce 01       	movw	r24, r28
    116c:	cd 96       	adiw	r24, 0x3d	; 61
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	4a e0       	ldi	r20, 0x0A	; 10
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	0e 94 c0 13 	call	0x2780	; 0x2780 <memset>

	celsius = (int)celsius;
    117a:	69 ad       	ldd	r22, Y+57	; 0x39
    117c:	7a ad       	ldd	r23, Y+58	; 0x3a
    117e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1180:	9c ad       	ldd	r25, Y+60	; 0x3c
    1182:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	aa 27       	eor	r26, r26
    118c:	97 fd       	sbrc	r25, 7
    118e:	a0 95       	com	r26
    1190:	ba 2f       	mov	r27, r26
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	89 af       	std	Y+57, r24	; 0x39
    11a0:	9a af       	std	Y+58, r25	; 0x3a
    11a2:	ab af       	std	Y+59, r26	; 0x3b
    11a4:	bc af       	std	Y+60, r27	; 0x3c

	timer2_init();
    11a6:	0e 94 14 08 	call	0x1028	; 0x1028 <timer2_init>
	if(celsius > 0 && celsius <= 30){
    11aa:	2d 96       	adiw	r28, 0x0d	; 13
    11ac:	1f ae       	std	Y+63, r1	; 0x3f
    11ae:	2d 97       	sbiw	r28, 0x0d	; 13
    11b0:	69 ad       	ldd	r22, Y+57	; 0x39
    11b2:	7a ad       	ldd	r23, Y+58	; 0x3a
    11b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    11b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11c4:	18 16       	cp	r1, r24
    11c6:	24 f4       	brge	.+8      	; 0x11d0 <lm_calc+0x12e>
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	2d 96       	adiw	r28, 0x0d	; 13
    11cc:	9f af       	std	Y+63, r25	; 0x3f
    11ce:	2d 97       	sbiw	r28, 0x0d	; 13
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	2d 96       	adiw	r28, 0x0d	; 13
    11d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11d6:	2d 97       	sbiw	r28, 0x0d	; 13
    11d8:	89 27       	eor	r24, r25
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <lm_calc+0x13e>
    11de:	91 c0       	rjmp	.+290    	; 0x1302 <lm_calc+0x260>
    11e0:	2c 96       	adiw	r28, 0x0c	; 12
    11e2:	1f ae       	std	Y+63, r1	; 0x3f
    11e4:	2c 97       	sbiw	r28, 0x0c	; 12
    11e6:	69 ad       	ldd	r22, Y+57	; 0x39
    11e8:	7a ad       	ldd	r23, Y+58	; 0x3a
    11ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    11ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 ef       	ldi	r20, 0xF0	; 240
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    11fa:	18 16       	cp	r1, r24
    11fc:	24 f0       	brlt	.+8      	; 0x1206 <lm_calc+0x164>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	2c 96       	adiw	r28, 0x0c	; 12
    1202:	8f af       	std	Y+63, r24	; 0x3f
    1204:	2c 97       	sbiw	r28, 0x0c	; 12
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	2c 96       	adiw	r28, 0x0c	; 12
    120a:	9f ad       	ldd	r25, Y+63	; 0x3f
    120c:	2c 97       	sbiw	r28, 0x0c	; 12
    120e:	89 27       	eor	r24, r25
    1210:	88 23       	and	r24, r24
    1212:	09 f0       	breq	.+2      	; 0x1216 <lm_calc+0x174>
    1214:	76 c0       	rjmp	.+236    	; 0x1302 <lm_calc+0x260>
		OCR2 = 0;
    1216:	e3 e4       	ldi	r30, 0x43	; 67
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	10 82       	st	Z, r1
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	aa e7       	ldi	r26, 0x7A	; 122
    1222:	b4 e4       	ldi	r27, 0x44	; 68
    1224:	8d ab       	std	Y+53, r24	; 0x35
    1226:	9e ab       	std	Y+54, r25	; 0x36
    1228:	af ab       	std	Y+55, r26	; 0x37
    122a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122c:	6d a9       	ldd	r22, Y+53	; 0x35
    122e:	7e a9       	ldd	r23, Y+54	; 0x36
    1230:	8f a9       	ldd	r24, Y+55	; 0x37
    1232:	98 ad       	ldd	r25, Y+56	; 0x38
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a ef       	ldi	r20, 0xFA	; 250
    123a:	54 e4       	ldi	r21, 0x44	; 68
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	89 ab       	std	Y+49, r24	; 0x31
    1246:	9a ab       	std	Y+50, r25	; 0x32
    1248:	ab ab       	std	Y+51, r26	; 0x33
    124a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    124c:	69 a9       	ldd	r22, Y+49	; 0x31
    124e:	7a a9       	ldd	r23, Y+50	; 0x32
    1250:	8b a9       	ldd	r24, Y+51	; 0x33
    1252:	9c a9       	ldd	r25, Y+52	; 0x34
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <lm_calc+0x1cc>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	98 ab       	std	Y+48, r25	; 0x30
    126a:	8f a7       	std	Y+47, r24	; 0x2f
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <lm_calc+0x24a>
	else if (__tmp > 65535)
    126e:	69 a9       	ldd	r22, Y+49	; 0x31
    1270:	7a a9       	ldd	r23, Y+50	; 0x32
    1272:	8b a9       	ldd	r24, Y+51	; 0x33
    1274:	9c a9       	ldd	r25, Y+52	; 0x34
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <lm_calc+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6d a9       	ldd	r22, Y+53	; 0x35
    1288:	7e a9       	ldd	r23, Y+54	; 0x36
    128a:	8f a9       	ldd	r24, Y+55	; 0x37
    128c:	98 ad       	ldd	r25, Y+56	; 0x38
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	98 ab       	std	Y+48, r25	; 0x30
    12ac:	8f a7       	std	Y+47, r24	; 0x2f
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <lm_calc+0x22c>
    12b0:	88 ec       	ldi	r24, 0xC8	; 200
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9e a7       	std	Y+46, r25	; 0x2e
    12b6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <lm_calc+0x21a>
    12c0:	9e a7       	std	Y+46, r25	; 0x2e
    12c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12c6:	98 a9       	ldd	r25, Y+48	; 0x30
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	98 ab       	std	Y+48, r25	; 0x30
    12cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    12d0:	98 a9       	ldd	r25, Y+48	; 0x30
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <lm_calc+0x20e>
    12d6:	ff c1       	rjmp	.+1022   	; 0x16d6 <lm_calc+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	69 a9       	ldd	r22, Y+49	; 0x31
    12da:	7a a9       	ldd	r23, Y+50	; 0x32
    12dc:	8b a9       	ldd	r24, Y+51	; 0x33
    12de:	9c a9       	ldd	r25, Y+52	; 0x34
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	98 ab       	std	Y+48, r25	; 0x30
    12ea:	8f a7       	std	Y+47, r24	; 0x2f
    12ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ee:	98 a9       	ldd	r25, Y+48	; 0x30
    12f0:	9c a7       	std	Y+44, r25	; 0x2c
    12f2:	8b a7       	std	Y+43, r24	; 0x2b
    12f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    12f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <lm_calc+0x256>
    12fc:	9c a7       	std	Y+44, r25	; 0x2c
    12fe:	8b a7       	std	Y+43, r24	; 0x2b
    1300:	ea c1       	rjmp	.+980    	; 0x16d6 <lm_calc+0x634>
		// LCD_SendCharacter('a');
		_delay_ms(1000);
	}
	else if(celsius > 30 && celsius <= 60){
    1302:	2b 96       	adiw	r28, 0x0b	; 11
    1304:	1f ae       	std	Y+63, r1	; 0x3f
    1306:	2b 97       	sbiw	r28, 0x0b	; 11
    1308:	69 ad       	ldd	r22, Y+57	; 0x39
    130a:	7a ad       	ldd	r23, Y+58	; 0x3a
    130c:	8b ad       	ldd	r24, Y+59	; 0x3b
    130e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 ef       	ldi	r20, 0xF0	; 240
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	24 f4       	brge	.+8      	; 0x1328 <lm_calc+0x286>
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	2b 96       	adiw	r28, 0x0b	; 11
    1324:	8f af       	std	Y+63, r24	; 0x3f
    1326:	2b 97       	sbiw	r28, 0x0b	; 11
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	2b 96       	adiw	r28, 0x0b	; 11
    132c:	9f ad       	ldd	r25, Y+63	; 0x3f
    132e:	2b 97       	sbiw	r28, 0x0b	; 11
    1330:	89 27       	eor	r24, r25
    1332:	88 23       	and	r24, r24
    1334:	09 f0       	breq	.+2      	; 0x1338 <lm_calc+0x296>
    1336:	92 c0       	rjmp	.+292    	; 0x145c <lm_calc+0x3ba>
    1338:	2a 96       	adiw	r28, 0x0a	; 10
    133a:	1f ae       	std	Y+63, r1	; 0x3f
    133c:	2a 97       	sbiw	r28, 0x0a	; 10
    133e:	69 ad       	ldd	r22, Y+57	; 0x39
    1340:	7a ad       	ldd	r23, Y+58	; 0x3a
    1342:	8b ad       	ldd	r24, Y+59	; 0x3b
    1344:	9c ad       	ldd	r25, Y+60	; 0x3c
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e7       	ldi	r20, 0x70	; 112
    134c:	52 e4       	ldi	r21, 0x42	; 66
    134e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1352:	18 16       	cp	r1, r24
    1354:	24 f0       	brlt	.+8      	; 0x135e <lm_calc+0x2bc>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	2a 96       	adiw	r28, 0x0a	; 10
    135a:	8f af       	std	Y+63, r24	; 0x3f
    135c:	2a 97       	sbiw	r28, 0x0a	; 10
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	2a 96       	adiw	r28, 0x0a	; 10
    1362:	9f ad       	ldd	r25, Y+63	; 0x3f
    1364:	2a 97       	sbiw	r28, 0x0a	; 10
    1366:	89 27       	eor	r24, r25
    1368:	88 23       	and	r24, r24
    136a:	09 f0       	breq	.+2      	; 0x136e <lm_calc+0x2cc>
    136c:	77 c0       	rjmp	.+238    	; 0x145c <lm_calc+0x3ba>
		OCR2 = 77;
    136e:	e3 e4       	ldi	r30, 0x43	; 67
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8d e4       	ldi	r24, 0x4D	; 77
    1374:	80 83       	st	Z, r24
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	aa e7       	ldi	r26, 0x7A	; 122
    137c:	b4 e4       	ldi	r27, 0x44	; 68
    137e:	8f a3       	std	Y+39, r24	; 0x27
    1380:	98 a7       	std	Y+40, r25	; 0x28
    1382:	a9 a7       	std	Y+41, r26	; 0x29
    1384:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6f a1       	ldd	r22, Y+39	; 0x27
    1388:	78 a5       	ldd	r23, Y+40	; 0x28
    138a:	89 a5       	ldd	r24, Y+41	; 0x29
    138c:	9a a5       	ldd	r25, Y+42	; 0x2a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8b a3       	std	Y+35, r24	; 0x23
    13a0:	9c a3       	std	Y+36, r25	; 0x24
    13a2:	ad a3       	std	Y+37, r26	; 0x25
    13a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13a6:	6b a1       	ldd	r22, Y+35	; 0x23
    13a8:	7c a1       	ldd	r23, Y+36	; 0x24
    13aa:	8d a1       	ldd	r24, Y+37	; 0x25
    13ac:	9e a1       	ldd	r25, Y+38	; 0x26
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <lm_calc+0x326>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9a a3       	std	Y+34, r25	; 0x22
    13c4:	89 a3       	std	Y+33, r24	; 0x21
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <lm_calc+0x3a4>
	else if (__tmp > 65535)
    13c8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ca:	7c a1       	ldd	r23, Y+36	; 0x24
    13cc:	8d a1       	ldd	r24, Y+37	; 0x25
    13ce:	9e a1       	ldd	r25, Y+38	; 0x26
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <lm_calc+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6f a1       	ldd	r22, Y+39	; 0x27
    13e2:	78 a5       	ldd	r23, Y+40	; 0x28
    13e4:	89 a5       	ldd	r24, Y+41	; 0x29
    13e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9a a3       	std	Y+34, r25	; 0x22
    1406:	89 a3       	std	Y+33, r24	; 0x21
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <lm_calc+0x386>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	98 a3       	std	Y+32, r25	; 0x20
    1410:	8f 8f       	std	Y+31, r24	; 0x1f
    1412:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1414:	98 a1       	ldd	r25, Y+32	; 0x20
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <lm_calc+0x374>
    141a:	98 a3       	std	Y+32, r25	; 0x20
    141c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	89 a1       	ldd	r24, Y+33	; 0x21
    1420:	9a a1       	ldd	r25, Y+34	; 0x22
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9a a3       	std	Y+34, r25	; 0x22
    1426:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	89 a1       	ldd	r24, Y+33	; 0x21
    142a:	9a a1       	ldd	r25, Y+34	; 0x22
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <lm_calc+0x368>
    1430:	52 c1       	rjmp	.+676    	; 0x16d6 <lm_calc+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6b a1       	ldd	r22, Y+35	; 0x23
    1434:	7c a1       	ldd	r23, Y+36	; 0x24
    1436:	8d a1       	ldd	r24, Y+37	; 0x25
    1438:	9e a1       	ldd	r25, Y+38	; 0x26
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9a a3       	std	Y+34, r25	; 0x22
    1444:	89 a3       	std	Y+33, r24	; 0x21
    1446:	89 a1       	ldd	r24, Y+33	; 0x21
    1448:	9a a1       	ldd	r25, Y+34	; 0x22
    144a:	9e 8f       	std	Y+30, r25	; 0x1e
    144c:	8d 8f       	std	Y+29, r24	; 0x1d
    144e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1450:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <lm_calc+0x3b0>
    1456:	9e 8f       	std	Y+30, r25	; 0x1e
    1458:	8d 8f       	std	Y+29, r24	; 0x1d
    145a:	3d c1       	rjmp	.+634    	; 0x16d6 <lm_calc+0x634>
		// LCD_SendCharacter('b');
		_delay_ms(1000);
	}
	else if(celsius > 60 && celsius <= 80){
    145c:	29 96       	adiw	r28, 0x09	; 9
    145e:	1f ae       	std	Y+63, r1	; 0x3f
    1460:	29 97       	sbiw	r28, 0x09	; 9
    1462:	69 ad       	ldd	r22, Y+57	; 0x39
    1464:	7a ad       	ldd	r23, Y+58	; 0x3a
    1466:	8b ad       	ldd	r24, Y+59	; 0x3b
    1468:	9c ad       	ldd	r25, Y+60	; 0x3c
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e7       	ldi	r20, 0x70	; 112
    1470:	52 e4       	ldi	r21, 0x42	; 66
    1472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	24 f4       	brge	.+8      	; 0x1482 <lm_calc+0x3e0>
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	29 96       	adiw	r28, 0x09	; 9
    147e:	8f af       	std	Y+63, r24	; 0x3f
    1480:	29 97       	sbiw	r28, 0x09	; 9
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	29 96       	adiw	r28, 0x09	; 9
    1486:	9f ad       	ldd	r25, Y+63	; 0x3f
    1488:	29 97       	sbiw	r28, 0x09	; 9
    148a:	89 27       	eor	r24, r25
    148c:	88 23       	and	r24, r24
    148e:	09 f0       	breq	.+2      	; 0x1492 <lm_calc+0x3f0>
    1490:	92 c0       	rjmp	.+292    	; 0x15b6 <lm_calc+0x514>
    1492:	28 96       	adiw	r28, 0x08	; 8
    1494:	1f ae       	std	Y+63, r1	; 0x3f
    1496:	28 97       	sbiw	r28, 0x08	; 8
    1498:	69 ad       	ldd	r22, Y+57	; 0x39
    149a:	7a ad       	ldd	r23, Y+58	; 0x3a
    149c:	8b ad       	ldd	r24, Y+59	; 0x3b
    149e:	9c ad       	ldd	r25, Y+60	; 0x3c
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 ea       	ldi	r20, 0xA0	; 160
    14a6:	52 e4       	ldi	r21, 0x42	; 66
    14a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	24 f0       	brlt	.+8      	; 0x14b8 <lm_calc+0x416>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	28 96       	adiw	r28, 0x08	; 8
    14b4:	8f af       	std	Y+63, r24	; 0x3f
    14b6:	28 97       	sbiw	r28, 0x08	; 8
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	28 96       	adiw	r28, 0x08	; 8
    14bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    14be:	28 97       	sbiw	r28, 0x08	; 8
    14c0:	89 27       	eor	r24, r25
    14c2:	88 23       	and	r24, r24
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <lm_calc+0x426>
    14c6:	77 c0       	rjmp	.+238    	; 0x15b6 <lm_calc+0x514>
		OCR2 = 100;
    14c8:	e3 e4       	ldi	r30, 0x43	; 67
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	84 e6       	ldi	r24, 0x64	; 100
    14ce:	80 83       	st	Z, r24
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	aa e7       	ldi	r26, 0x7A	; 122
    14d6:	b4 e4       	ldi	r27, 0x44	; 68
    14d8:	89 8f       	std	Y+25, r24	; 0x19
    14da:	9a 8f       	std	Y+26, r25	; 0x1a
    14dc:	ab 8f       	std	Y+27, r26	; 0x1b
    14de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	69 8d       	ldd	r22, Y+25	; 0x19
    14e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4a ef       	ldi	r20, 0xFA	; 250
    14ee:	54 e4       	ldi	r21, 0x44	; 68
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8d 8b       	std	Y+21, r24	; 0x15
    14fa:	9e 8b       	std	Y+22, r25	; 0x16
    14fc:	af 8b       	std	Y+23, r26	; 0x17
    14fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1500:	6d 89       	ldd	r22, Y+21	; 0x15
    1502:	7e 89       	ldd	r23, Y+22	; 0x16
    1504:	8f 89       	ldd	r24, Y+23	; 0x17
    1506:	98 8d       	ldd	r25, Y+24	; 0x18
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <lm_calc+0x480>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9c 8b       	std	Y+20, r25	; 0x14
    151e:	8b 8b       	std	Y+19, r24	; 0x13
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <lm_calc+0x4fe>
	else if (__tmp > 65535)
    1522:	6d 89       	ldd	r22, Y+21	; 0x15
    1524:	7e 89       	ldd	r23, Y+22	; 0x16
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	4c f5       	brge	.+82     	; 0x158c <lm_calc+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153a:	69 8d       	ldd	r22, Y+25	; 0x19
    153c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9c 8b       	std	Y+20, r25	; 0x14
    1560:	8b 8b       	std	Y+19, r24	; 0x13
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <lm_calc+0x4e0>
    1564:	88 ec       	ldi	r24, 0xC8	; 200
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9a 8b       	std	Y+18, r25	; 0x12
    156a:	89 8b       	std	Y+17, r24	; 0x11
    156c:	89 89       	ldd	r24, Y+17	; 0x11
    156e:	9a 89       	ldd	r25, Y+18	; 0x12
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <lm_calc+0x4ce>
    1574:	9a 8b       	std	Y+18, r25	; 0x12
    1576:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8b 89       	ldd	r24, Y+19	; 0x13
    157a:	9c 89       	ldd	r25, Y+20	; 0x14
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9c 8b       	std	Y+20, r25	; 0x14
    1580:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8b 89       	ldd	r24, Y+19	; 0x13
    1584:	9c 89       	ldd	r25, Y+20	; 0x14
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <lm_calc+0x4c2>
    158a:	a5 c0       	rjmp	.+330    	; 0x16d6 <lm_calc+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	6d 89       	ldd	r22, Y+21	; 0x15
    158e:	7e 89       	ldd	r23, Y+22	; 0x16
    1590:	8f 89       	ldd	r24, Y+23	; 0x17
    1592:	98 8d       	ldd	r25, Y+24	; 0x18
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9c 8b       	std	Y+20, r25	; 0x14
    159e:	8b 8b       	std	Y+19, r24	; 0x13
    15a0:	8b 89       	ldd	r24, Y+19	; 0x13
    15a2:	9c 89       	ldd	r25, Y+20	; 0x14
    15a4:	98 8b       	std	Y+16, r25	; 0x10
    15a6:	8f 87       	std	Y+15, r24	; 0x0f
    15a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15aa:	98 89       	ldd	r25, Y+16	; 0x10
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <lm_calc+0x50a>
    15b0:	98 8b       	std	Y+16, r25	; 0x10
    15b2:	8f 87       	std	Y+15, r24	; 0x0f
    15b4:	90 c0       	rjmp	.+288    	; 0x16d6 <lm_calc+0x634>
		// LCD_SendCharacter('c');
		_delay_ms(1000);
	}
	else if(celsius > 80 && celsius <= 100){
    15b6:	69 ad       	ldd	r22, Y+57	; 0x39
    15b8:	7a ad       	ldd	r23, Y+58	; 0x3a
    15ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    15bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 ea       	ldi	r20, 0xA0	; 160
    15c4:	52 e4       	ldi	r21, 0x42	; 66
    15c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	0c f0       	brlt	.+2      	; 0x15d0 <lm_calc+0x52e>
    15ce:	83 c0       	rjmp	.+262    	; 0x16d6 <lm_calc+0x634>
    15d0:	69 ad       	ldd	r22, Y+57	; 0x39
    15d2:	7a ad       	ldd	r23, Y+58	; 0x3a
    15d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    15d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	48 ec       	ldi	r20, 0xC8	; 200
    15de:	52 e4       	ldi	r21, 0x42	; 66
    15e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	0c f4       	brge	.+2      	; 0x15ea <lm_calc+0x548>
    15e8:	76 c0       	rjmp	.+236    	; 0x16d6 <lm_calc+0x634>
		OCR2 = 255;
    15ea:	e3 e4       	ldi	r30, 0x43	; 67
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	80 83       	st	Z, r24
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	aa e7       	ldi	r26, 0x7A	; 122
    15f8:	b4 e4       	ldi	r27, 0x44	; 68
    15fa:	8b 87       	std	Y+11, r24	; 0x0b
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	ad 87       	std	Y+13, r26	; 0x0d
    1600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	6b 85       	ldd	r22, Y+11	; 0x0b
    1604:	7c 85       	ldd	r23, Y+12	; 0x0c
    1606:	8d 85       	ldd	r24, Y+13	; 0x0d
    1608:	9e 85       	ldd	r25, Y+14	; 0x0e
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a ef       	ldi	r20, 0xFA	; 250
    1610:	54 e4       	ldi	r21, 0x44	; 68
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8f 83       	std	Y+7, r24	; 0x07
    161c:	98 87       	std	Y+8, r25	; 0x08
    161e:	a9 87       	std	Y+9, r26	; 0x09
    1620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	2c f4       	brge	.+10     	; 0x1644 <lm_calc+0x5a2>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <lm_calc+0x620>
	else if (__tmp > 65535)
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <lm_calc+0x60c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	6b 85       	ldd	r22, Y+11	; 0x0b
    165e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <lm_calc+0x602>
    1686:	88 ec       	ldi	r24, 0xC8	; 200
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c 83       	std	Y+4, r25	; 0x04
    168c:	8b 83       	std	Y+3, r24	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <lm_calc+0x5f0>
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <lm_calc+0x5e4>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <lm_calc+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <lm_calc+0x62c>
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
		// LCD_SendCharacter('d');
		_delay_ms(1000);
	}
	// LCD_ClearScreen();
}
    16d6:	c4 5b       	subi	r28, 0xB4	; 180
    16d8:	df 4f       	sbci	r29, 0xFF	; 255
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <LCD_Init>:
#include"lcd.h"
#include"..\dio\dio.h"


void LCD_Init()
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	LCD_Data_Dir = 0xFF;
    16f2:	e7 e3       	ldi	r30, 0x37	; 55
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	80 83       	st	Z, r24
	LCD_Ctrl_Dir |= (1<<E) | (1<<W) | (1<<RS);
    16fa:	a1 e3       	ldi	r26, 0x31	; 49
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e1 e3       	ldi	r30, 0x31	; 49
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	87 60       	ori	r24, 0x07	; 7
    1706:	8c 93       	st	X, r24
	LCD_SendCommand(Eight_Bit_Mode);
    1708:	88 e3       	ldi	r24, 0x38	; 56
    170a:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_SendCommand>
	LCD_SendCommand(CURSOR_OFF);
    170e:	8c e0       	ldi	r24, 0x0C	; 12
    1710:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_SendCommand>
	LCD_SendCommand(CLEAR_COMMAND);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_SendCommand>
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t data)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	e9 97       	sbiw	r28, 0x39	; 57
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	89 af       	std	Y+57, r24	; 0x39
	Clear_Bit(LCD_Ctrl_Out,RS);
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8e 7f       	andi	r24, 0xFE	; 254
    1742:	8c 93       	st	X, r24
	Clear_Bit(LCD_Ctrl_Out,W);
    1744:	a2 e3       	ldi	r26, 0x32	; 50
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e2 e3       	ldi	r30, 0x32	; 50
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8b 7f       	andi	r24, 0xFB	; 251
    1750:	8c 93       	st	X, r24
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e8       	ldi	r26, 0x80	; 128
    1758:	bf e3       	ldi	r27, 0x3F	; 63
    175a:	8d ab       	std	Y+53, r24	; 0x35
    175c:	9e ab       	std	Y+54, r25	; 0x36
    175e:	af ab       	std	Y+55, r26	; 0x37
    1760:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	6d a9       	ldd	r22, Y+53	; 0x35
    1764:	7e a9       	ldd	r23, Y+54	; 0x36
    1766:	8f a9       	ldd	r24, Y+55	; 0x37
    1768:	98 ad       	ldd	r25, Y+56	; 0x38
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a ef       	ldi	r20, 0xFA	; 250
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	89 ab       	std	Y+49, r24	; 0x31
    177c:	9a ab       	std	Y+50, r25	; 0x32
    177e:	ab ab       	std	Y+51, r26	; 0x33
    1780:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1782:	69 a9       	ldd	r22, Y+49	; 0x31
    1784:	7a a9       	ldd	r23, Y+50	; 0x32
    1786:	8b a9       	ldd	r24, Y+51	; 0x33
    1788:	9c a9       	ldd	r25, Y+52	; 0x34
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <LCD_SendCommand+0x84>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	98 ab       	std	Y+48, r25	; 0x30
    17a0:	8f a7       	std	Y+47, r24	; 0x2f
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <LCD_SendCommand+0x102>
	else if (__tmp > 65535)
    17a4:	69 a9       	ldd	r22, Y+49	; 0x31
    17a6:	7a a9       	ldd	r23, Y+50	; 0x32
    17a8:	8b a9       	ldd	r24, Y+51	; 0x33
    17aa:	9c a9       	ldd	r25, Y+52	; 0x34
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <LCD_SendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	6d a9       	ldd	r22, Y+53	; 0x35
    17be:	7e a9       	ldd	r23, Y+54	; 0x36
    17c0:	8f a9       	ldd	r24, Y+55	; 0x37
    17c2:	98 ad       	ldd	r25, Y+56	; 0x38
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <LCD_SendCommand+0xe4>
    17e6:	88 ec       	ldi	r24, 0xC8	; 200
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9e a7       	std	Y+46, r25	; 0x2e
    17ec:	8d a7       	std	Y+45, r24	; 0x2d
    17ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    17f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <LCD_SendCommand+0xd2>
    17f6:	9e a7       	std	Y+46, r25	; 0x2e
    17f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fc:	98 a9       	ldd	r25, Y+48	; 0x30
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8f a5       	ldd	r24, Y+47	; 0x2f
    1806:	98 a9       	ldd	r25, Y+48	; 0x30
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <LCD_SendCommand+0xc6>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <LCD_SendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	69 a9       	ldd	r22, Y+49	; 0x31
    1810:	7a a9       	ldd	r23, Y+50	; 0x32
    1812:	8b a9       	ldd	r24, Y+51	; 0x33
    1814:	9c a9       	ldd	r25, Y+52	; 0x34
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	98 ab       	std	Y+48, r25	; 0x30
    1820:	8f a7       	std	Y+47, r24	; 0x2f
    1822:	8f a5       	ldd	r24, Y+47	; 0x2f
    1824:	98 a9       	ldd	r25, Y+48	; 0x30
    1826:	9c a7       	std	Y+44, r25	; 0x2c
    1828:	8b a7       	std	Y+43, r24	; 0x2b
    182a:	8b a5       	ldd	r24, Y+43	; 0x2b
    182c:	9c a5       	ldd	r25, Y+44	; 0x2c
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_SendCommand+0x10e>
    1832:	9c a7       	std	Y+44, r25	; 0x2c
    1834:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Set_Bit(LCD_Ctrl_Out,E);
    1836:	a2 e3       	ldi	r26, 0x32	; 50
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e2 e3       	ldi	r30, 0x32	; 50
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	82 60       	ori	r24, 0x02	; 2
    1842:	8c 93       	st	X, r24
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	8f a3       	std	Y+39, r24	; 0x27
    184e:	98 a7       	std	Y+40, r25	; 0x28
    1850:	a9 a7       	std	Y+41, r26	; 0x29
    1852:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6f a1       	ldd	r22, Y+39	; 0x27
    1856:	78 a5       	ldd	r23, Y+40	; 0x28
    1858:	89 a5       	ldd	r24, Y+41	; 0x29
    185a:	9a a5       	ldd	r25, Y+42	; 0x2a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8b a3       	std	Y+35, r24	; 0x23
    186e:	9c a3       	std	Y+36, r25	; 0x24
    1870:	ad a3       	std	Y+37, r26	; 0x25
    1872:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1874:	6b a1       	ldd	r22, Y+35	; 0x23
    1876:	7c a1       	ldd	r23, Y+36	; 0x24
    1878:	8d a1       	ldd	r24, Y+37	; 0x25
    187a:	9e a1       	ldd	r25, Y+38	; 0x26
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_SendCommand+0x176>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9a a3       	std	Y+34, r25	; 0x22
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_SendCommand+0x1f4>
	else if (__tmp > 65535)
    1896:	6b a1       	ldd	r22, Y+35	; 0x23
    1898:	7c a1       	ldd	r23, Y+36	; 0x24
    189a:	8d a1       	ldd	r24, Y+37	; 0x25
    189c:	9e a1       	ldd	r25, Y+38	; 0x26
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_SendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6f a1       	ldd	r22, Y+39	; 0x27
    18b0:	78 a5       	ldd	r23, Y+40	; 0x28
    18b2:	89 a5       	ldd	r24, Y+41	; 0x29
    18b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9a a3       	std	Y+34, r25	; 0x22
    18d4:	89 a3       	std	Y+33, r24	; 0x21
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_SendCommand+0x1d6>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	98 a3       	std	Y+32, r25	; 0x20
    18de:	8f 8f       	std	Y+31, r24	; 0x1f
    18e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e2:	98 a1       	ldd	r25, Y+32	; 0x20
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_SendCommand+0x1c4>
    18e8:	98 a3       	std	Y+32, r25	; 0x20
    18ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	89 a1       	ldd	r24, Y+33	; 0x21
    18ee:	9a a1       	ldd	r25, Y+34	; 0x22
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9a a3       	std	Y+34, r25	; 0x22
    18f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	89 a1       	ldd	r24, Y+33	; 0x21
    18f8:	9a a1       	ldd	r25, Y+34	; 0x22
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_SendCommand+0x1b8>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <LCD_SendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6b a1       	ldd	r22, Y+35	; 0x23
    1902:	7c a1       	ldd	r23, Y+36	; 0x24
    1904:	8d a1       	ldd	r24, Y+37	; 0x25
    1906:	9e a1       	ldd	r25, Y+38	; 0x26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	89 a1       	ldd	r24, Y+33	; 0x21
    1916:	9a a1       	ldd	r25, Y+34	; 0x22
    1918:	9e 8f       	std	Y+30, r25	; 0x1e
    191a:	8d 8f       	std	Y+29, r24	; 0x1d
    191c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_SendCommand+0x200>
    1924:	9e 8f       	std	Y+30, r25	; 0x1e
    1926:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Data_Out = data;
    1928:	e8 e3       	ldi	r30, 0x38	; 56
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	89 ad       	ldd	r24, Y+57	; 0x39
    192e:	80 83       	st	Z, r24
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e8       	ldi	r26, 0x80	; 128
    1936:	bf e3       	ldi	r27, 0x3F	; 63
    1938:	89 8f       	std	Y+25, r24	; 0x19
    193a:	9a 8f       	std	Y+26, r25	; 0x1a
    193c:	ab 8f       	std	Y+27, r26	; 0x1b
    193e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	69 8d       	ldd	r22, Y+25	; 0x19
    1942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a ef       	ldi	r20, 0xFA	; 250
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8d 8b       	std	Y+21, r24	; 0x15
    195a:	9e 8b       	std	Y+22, r25	; 0x16
    195c:	af 8b       	std	Y+23, r26	; 0x17
    195e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <LCD_SendCommand+0x262>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <LCD_SendCommand+0x2e0>
	else if (__tmp > 65535)
    1982:	6d 89       	ldd	r22, Y+21	; 0x15
    1984:	7e 89       	ldd	r23, Y+22	; 0x16
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <LCD_SendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	69 8d       	ldd	r22, Y+25	; 0x19
    199c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9c 8b       	std	Y+20, r25	; 0x14
    19c0:	8b 8b       	std	Y+19, r24	; 0x13
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <LCD_SendCommand+0x2c2>
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9a 8b       	std	Y+18, r25	; 0x12
    19ca:	89 8b       	std	Y+17, r24	; 0x11
    19cc:	89 89       	ldd	r24, Y+17	; 0x11
    19ce:	9a 89       	ldd	r25, Y+18	; 0x12
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_SendCommand+0x2b0>
    19d4:	9a 8b       	std	Y+18, r25	; 0x12
    19d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8b 89       	ldd	r24, Y+19	; 0x13
    19e4:	9c 89       	ldd	r25, Y+20	; 0x14
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <LCD_SendCommand+0x2a4>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <LCD_SendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	6d 89       	ldd	r22, Y+21	; 0x15
    19ee:	7e 89       	ldd	r23, Y+22	; 0x16
    19f0:	8f 89       	ldd	r24, Y+23	; 0x17
    19f2:	98 8d       	ldd	r25, Y+24	; 0x18
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	8b 89       	ldd	r24, Y+19	; 0x13
    1a02:	9c 89       	ldd	r25, Y+20	; 0x14
    1a04:	98 8b       	std	Y+16, r25	; 0x10
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
    1a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0a:	98 89       	ldd	r25, Y+16	; 0x10
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_SendCommand+0x2ec>
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Clear_Bit(LCD_Ctrl_Out,E);
    1a14:	a2 e3       	ldi	r26, 0x32	; 50
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e2 e3       	ldi	r30, 0x32	; 50
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8d 7f       	andi	r24, 0xFD	; 253
    1a20:	8c 93       	st	X, r24
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e8       	ldi	r26, 0x80	; 128
    1a28:	bf e3       	ldi	r27, 0x3F	; 63
    1a2a:	8b 87       	std	Y+11, r24	; 0x0b
    1a2c:	9c 87       	std	Y+12, r25	; 0x0c
    1a2e:	ad 87       	std	Y+13, r26	; 0x0d
    1a30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a ef       	ldi	r20, 0xFA	; 250
    1a40:	54 e4       	ldi	r21, 0x44	; 68
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8f 83       	std	Y+7, r24	; 0x07
    1a4c:	98 87       	std	Y+8, r25	; 0x08
    1a4e:	a9 87       	std	Y+9, r26	; 0x09
    1a50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a52:	6f 81       	ldd	r22, Y+7	; 0x07
    1a54:	78 85       	ldd	r23, Y+8	; 0x08
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <LCD_SendCommand+0x354>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	3f c0       	rjmp	.+126    	; 0x1af2 <LCD_SendCommand+0x3d2>
	else if (__tmp > 65535)
    1a74:	6f 81       	ldd	r22, Y+7	; 0x07
    1a76:	78 85       	ldd	r23, Y+8	; 0x08
    1a78:	89 85       	ldd	r24, Y+9	; 0x09
    1a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	4c f5       	brge	.+82     	; 0x1ade <LCD_SendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <LCD_SendCommand+0x3b4>
    1ab6:	88 ec       	ldi	r24, 0xC8	; 200
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_SendCommand+0x3a2>
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <LCD_SendCommand+0x396>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <LCD_SendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_SendCommand+0x3de>
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b06:	e9 96       	adiw	r28, 0x39	; 57
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <LCD_SendCharacter>:

void LCD_SendCharacter(uint8_t data)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	e9 97       	sbiw	r28, 0x39	; 57
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	89 af       	std	Y+57, r24	; 0x39
	Set_Bit(LCD_Ctrl_Out,RS);
    1b2e:	a2 e3       	ldi	r26, 0x32	; 50
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e2 e3       	ldi	r30, 0x32	; 50
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	81 60       	ori	r24, 0x01	; 1
    1b3a:	8c 93       	st	X, r24
	Clear_Bit(LCD_Ctrl_Out,W);
    1b3c:	a2 e3       	ldi	r26, 0x32	; 50
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8b 7f       	andi	r24, 0xFB	; 251
    1b48:	8c 93       	st	X, r24
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a0 e8       	ldi	r26, 0x80	; 128
    1b50:	bf e3       	ldi	r27, 0x3F	; 63
    1b52:	8d ab       	std	Y+53, r24	; 0x35
    1b54:	9e ab       	std	Y+54, r25	; 0x36
    1b56:	af ab       	std	Y+55, r26	; 0x37
    1b58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b60:	98 ad       	ldd	r25, Y+56	; 0x38
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a ef       	ldi	r20, 0xFA	; 250
    1b68:	54 e4       	ldi	r21, 0x44	; 68
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	89 ab       	std	Y+49, r24	; 0x31
    1b74:	9a ab       	std	Y+50, r25	; 0x32
    1b76:	ab ab       	std	Y+51, r26	; 0x33
    1b78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b80:	9c a9       	ldd	r25, Y+52	; 0x34
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <LCD_SendCharacter+0x84>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <LCD_SendCharacter+0x102>
	else if (__tmp > 65535)
    1b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	3f ef       	ldi	r19, 0xFF	; 255
    1ba8:	4f e7       	ldi	r20, 0x7F	; 127
    1baa:	57 e4       	ldi	r21, 0x47	; 71
    1bac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	4c f5       	brge	.+82     	; 0x1c06 <LCD_SendCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1bba:	98 ad       	ldd	r25, Y+56	; 0x38
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	98 ab       	std	Y+48, r25	; 0x30
    1bda:	8f a7       	std	Y+47, r24	; 0x2f
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <LCD_SendCharacter+0xe4>
    1bde:	88 ec       	ldi	r24, 0xC8	; 200
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9e a7       	std	Y+46, r25	; 0x2e
    1be4:	8d a7       	std	Y+45, r24	; 0x2d
    1be6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_SendCharacter+0xd2>
    1bee:	9e a7       	std	Y+46, r25	; 0x2e
    1bf0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	98 ab       	std	Y+48, r25	; 0x30
    1bfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	69 f7       	brne	.-38     	; 0x1bde <LCD_SendCharacter+0xc6>
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <LCD_SendCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c06:	69 a9       	ldd	r22, Y+49	; 0x31
    1c08:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	98 ab       	std	Y+48, r25	; 0x30
    1c18:	8f a7       	std	Y+47, r24	; 0x2f
    1c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1e:	9c a7       	std	Y+44, r25	; 0x2c
    1c20:	8b a7       	std	Y+43, r24	; 0x2b
    1c22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_SendCharacter+0x10e>
    1c2a:	9c a7       	std	Y+44, r25	; 0x2c
    1c2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Set_Bit(LCD_Ctrl_Out,E);
    1c2e:	a2 e3       	ldi	r26, 0x32	; 50
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e2 e3       	ldi	r30, 0x32	; 50
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	82 60       	ori	r24, 0x02	; 2
    1c3a:	8c 93       	st	X, r24
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e8       	ldi	r26, 0x80	; 128
    1c42:	bf e3       	ldi	r27, 0x3F	; 63
    1c44:	8f a3       	std	Y+39, r24	; 0x27
    1c46:	98 a7       	std	Y+40, r25	; 0x28
    1c48:	a9 a7       	std	Y+41, r26	; 0x29
    1c4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c50:	89 a5       	ldd	r24, Y+41	; 0x29
    1c52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	4a ef       	ldi	r20, 0xFA	; 250
    1c5a:	54 e4       	ldi	r21, 0x44	; 68
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	8b a3       	std	Y+35, r24	; 0x23
    1c66:	9c a3       	std	Y+36, r25	; 0x24
    1c68:	ad a3       	std	Y+37, r26	; 0x25
    1c6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c70:	8d a1       	ldd	r24, Y+37	; 0x25
    1c72:	9e a1       	ldd	r25, Y+38	; 0x26
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e8       	ldi	r20, 0x80	; 128
    1c7a:	5f e3       	ldi	r21, 0x3F	; 63
    1c7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c80:	88 23       	and	r24, r24
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <LCD_SendCharacter+0x176>
		__ticks = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9a a3       	std	Y+34, r25	; 0x22
    1c8a:	89 a3       	std	Y+33, r24	; 0x21
    1c8c:	3f c0       	rjmp	.+126    	; 0x1d0c <LCD_SendCharacter+0x1f4>
	else if (__tmp > 65535)
    1c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c90:	7c a1       	ldd	r23, Y+36	; 0x24
    1c92:	8d a1       	ldd	r24, Y+37	; 0x25
    1c94:	9e a1       	ldd	r25, Y+38	; 0x26
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	3f ef       	ldi	r19, 0xFF	; 255
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	57 e4       	ldi	r21, 0x47	; 71
    1c9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	4c f5       	brge	.+82     	; 0x1cf8 <LCD_SendCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca8:	78 a5       	ldd	r23, Y+40	; 0x28
    1caa:	89 a5       	ldd	r24, Y+41	; 0x29
    1cac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e2       	ldi	r20, 0x20	; 32
    1cb4:	51 e4       	ldi	r21, 0x41	; 65
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9a a3       	std	Y+34, r25	; 0x22
    1ccc:	89 a3       	std	Y+33, r24	; 0x21
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <LCD_SendCharacter+0x1d6>
    1cd0:	88 ec       	ldi	r24, 0xC8	; 200
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	98 a3       	std	Y+32, r25	; 0x20
    1cd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1cd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cda:	98 a1       	ldd	r25, Y+32	; 0x20
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_SendCharacter+0x1c4>
    1ce0:	98 a3       	std	Y+32, r25	; 0x20
    1ce2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	9a a3       	std	Y+34, r25	; 0x22
    1cec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cee:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	69 f7       	brne	.-38     	; 0x1cd0 <LCD_SendCharacter+0x1b8>
    1cf6:	14 c0       	rjmp	.+40     	; 0x1d20 <LCD_SendCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9a a3       	std	Y+34, r25	; 0x22
    1d0a:	89 a3       	std	Y+33, r24	; 0x21
    1d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d10:	9e 8f       	std	Y+30, r25	; 0x1e
    1d12:	8d 8f       	std	Y+29, r24	; 0x1d
    1d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_SendCharacter+0x200>
    1d1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Data_Out = data;
    1d20:	e8 e3       	ldi	r30, 0x38	; 56
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	89 ad       	ldd	r24, Y+57	; 0x39
    1d26:	80 83       	st	Z, r24
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e8       	ldi	r26, 0x80	; 128
    1d2e:	bf e3       	ldi	r27, 0x3F	; 63
    1d30:	89 8f       	std	Y+25, r24	; 0x19
    1d32:	9a 8f       	std	Y+26, r25	; 0x1a
    1d34:	ab 8f       	std	Y+27, r26	; 0x1b
    1d36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a ef       	ldi	r20, 0xFA	; 250
    1d46:	54 e4       	ldi	r21, 0x44	; 68
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	8d 8b       	std	Y+21, r24	; 0x15
    1d52:	9e 8b       	std	Y+22, r25	; 0x16
    1d54:	af 8b       	std	Y+23, r26	; 0x17
    1d56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d58:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <LCD_SendCharacter+0x262>
		__ticks = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9c 8b       	std	Y+20, r25	; 0x14
    1d76:	8b 8b       	std	Y+19, r24	; 0x13
    1d78:	3f c0       	rjmp	.+126    	; 0x1df8 <LCD_SendCharacter+0x2e0>
	else if (__tmp > 65535)
    1d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	4c f5       	brge	.+82     	; 0x1de4 <LCD_SendCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d92:	69 8d       	ldd	r22, Y+25	; 0x19
    1d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e2       	ldi	r20, 0x20	; 32
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	9c 8b       	std	Y+20, r25	; 0x14
    1db8:	8b 8b       	std	Y+19, r24	; 0x13
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <LCD_SendCharacter+0x2c2>
    1dbc:	88 ec       	ldi	r24, 0xC8	; 200
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9a 8b       	std	Y+18, r25	; 0x12
    1dc2:	89 8b       	std	Y+17, r24	; 0x11
    1dc4:	89 89       	ldd	r24, Y+17	; 0x11
    1dc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_SendCharacter+0x2b0>
    1dcc:	9a 8b       	std	Y+18, r25	; 0x12
    1dce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	9c 8b       	std	Y+20, r25	; 0x14
    1dd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	8b 89       	ldd	r24, Y+19	; 0x13
    1ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	69 f7       	brne	.-38     	; 0x1dbc <LCD_SendCharacter+0x2a4>
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <LCD_SendCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de4:	6d 89       	ldd	r22, Y+21	; 0x15
    1de6:	7e 89       	ldd	r23, Y+22	; 0x16
    1de8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dea:	98 8d       	ldd	r25, Y+24	; 0x18
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfc:	98 8b       	std	Y+16, r25	; 0x10
    1dfe:	8f 87       	std	Y+15, r24	; 0x0f
    1e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e02:	98 89       	ldd	r25, Y+16	; 0x10
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_SendCharacter+0x2ec>
    1e08:	98 8b       	std	Y+16, r25	; 0x10
    1e0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Clear_Bit(LCD_Ctrl_Out,E);
    1e0c:	a2 e3       	ldi	r26, 0x32	; 50
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e2 e3       	ldi	r30, 0x32	; 50
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8d 7f       	andi	r24, 0xFD	; 253
    1e18:	8c 93       	st	X, r24
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a0 e8       	ldi	r26, 0x80	; 128
    1e20:	bf e3       	ldi	r27, 0x3F	; 63
    1e22:	8b 87       	std	Y+11, r24	; 0x0b
    1e24:	9c 87       	std	Y+12, r25	; 0x0c
    1e26:	ad 87       	std	Y+13, r26	; 0x0d
    1e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a ef       	ldi	r20, 0xFA	; 250
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	8f 83       	std	Y+7, r24	; 0x07
    1e44:	98 87       	std	Y+8, r25	; 0x08
    1e46:	a9 87       	std	Y+9, r26	; 0x09
    1e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e8       	ldi	r20, 0x80	; 128
    1e58:	5f e3       	ldi	r21, 0x3F	; 63
    1e5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5e:	88 23       	and	r24, r24
    1e60:	2c f4       	brge	.+10     	; 0x1e6c <LCD_SendCharacter+0x354>
		__ticks = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	3f c0       	rjmp	.+126    	; 0x1eea <LCD_SendCharacter+0x3d2>
	else if (__tmp > 65535)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	3f ef       	ldi	r19, 0xFF	; 255
    1e78:	4f e7       	ldi	r20, 0x7F	; 127
    1e7a:	57 e4       	ldi	r21, 0x47	; 71
    1e7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e80:	18 16       	cp	r1, r24
    1e82:	4c f5       	brge	.+82     	; 0x1ed6 <LCD_SendCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e2       	ldi	r20, 0x20	; 32
    1e92:	51 e4       	ldi	r21, 0x41	; 65
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <LCD_SendCharacter+0x3b4>
    1eae:	88 ec       	ldi	r24, 0xC8	; 200
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_SendCharacter+0x3a2>
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <LCD_SendCharacter+0x396>
    1ed4:	14 c0       	rjmp	.+40     	; 0x1efe <LCD_SendCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_SendCharacter+0x3de>
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1efe:	e9 96       	adiw	r28, 0x39	; 57
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <LCD_SendString>:

void LCD_SendString(uint8_t *str)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <LCD_SendString+0x6>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	0a c0       	rjmp	.+20     	; 0x1f34 <LCD_SendString+0x24>
	while(*str != '\0')
	{
		LCD_SendCharacter(*str);
    1f20:	e9 81       	ldd	r30, Y+1	; 0x01
    1f22:	fa 81       	ldd	r31, Y+2	; 0x02
    1f24:	80 81       	ld	r24, Z
    1f26:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <LCD_SendCharacter>
		str++;
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void LCD_SendString(uint8_t *str)
{
	while(*str != '\0')
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	80 81       	ld	r24, Z
    1f3a:	88 23       	and	r24, r24
    1f3c:	89 f7       	brne	.-30     	; 0x1f20 <LCD_SendString+0x10>
	{
		LCD_SendCharacter(*str);
		str++;
	}
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <LCD_GoToRowCol>:

void LCD_GoToRowCol(uint8_t row, uint8_t col)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <LCD_GoToRowCol+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <LCD_GoToRowCol+0x8>
    1f50:	0f 92       	push	r0
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t address;
	switch (row)
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3d 83       	std	Y+5, r19	; 0x05
    1f62:	2c 83       	std	Y+4, r18	; 0x04
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	31 f0       	breq	.+12     	; 0x1f78 <LCD_GoToRowCol+0x30>
    1f6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f70:	21 30       	cpi	r18, 0x01	; 1
    1f72:	31 05       	cpc	r19, r1
    1f74:	21 f0       	breq	.+8      	; 0x1f7e <LCD_GoToRowCol+0x36>
    1f76:	06 c0       	rjmp	.+12     	; 0x1f84 <LCD_GoToRowCol+0x3c>
	{
		case 0:
			address = col;
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <LCD_GoToRowCol+0x3c>
			break;
		case 1:
			address = col + 0x40;
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	80 5c       	subi	r24, 0xC0	; 192
    1f82:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_SendCommand(address | SET_CURSOR_LOCATION);
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	80 68       	ori	r24, 0x80	; 128
    1f88:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_SendCommand>
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <LCD_SendStringRowCol>:

void LCD_SendStringRowCol(uint8_t row, uint8_t col, uint8_t *str)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <LCD_SendStringRowCol+0x6>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <LCD_SendStringRowCol+0x8>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	6a 83       	std	Y+2, r22	; 0x02
    1fac:	5c 83       	std	Y+4, r21	; 0x04
    1fae:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToRowCol(row,col);
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	6a 81       	ldd	r22, Y+2	; 0x02
    1fb4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_GoToRowCol>
	LCD_SendString(str);
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_SendString>
}
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <LCD_IntegerToString>:

void LCD_IntegerToString(uint16_t data)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	62 97       	sbiw	r28, 0x12	; 18
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	9a 8b       	std	Y+18, r25	; 0x12
    1fe4:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t BUFF[16];
	itoa(data,BUFF,10);
    1fe6:	89 89       	ldd	r24, Y+17	; 0x11
    1fe8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fea:	9e 01       	movw	r18, r28
    1fec:	2f 5f       	subi	r18, 0xFF	; 255
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	b9 01       	movw	r22, r18
    1ff2:	4a e0       	ldi	r20, 0x0A	; 10
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	0e 94 c7 13 	call	0x278e	; 0x278e <itoa>
	LCD_SendString(BUFF);
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_SendString>
}
    2002:	62 96       	adiw	r28, 0x12	; 18
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_ClearScreen>:

void LCD_ClearScreen()
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_COMMAND);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_SendCommand>
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <dio_set_direction>:
 * 						this value must be type of dio_direction_t
 * @example:
 * dio_set_direction(DIOA, 4, OUTPUT);
 */
void dio_set_direction(dio_t port, dio_pin_t pin, dio_direction_t direction)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <dio_set_direction+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <dio_set_direction+0x8>
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	6a 83       	std	Y+2, r22	; 0x02
    203a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3d 83       	std	Y+5, r19	; 0x05
    2044:	2c 83       	std	Y+4, r18	; 0x04
    2046:	6c 81       	ldd	r22, Y+4	; 0x04
    2048:	7d 81       	ldd	r23, Y+5	; 0x05
    204a:	61 30       	cpi	r22, 0x01	; 1
    204c:	71 05       	cpc	r23, r1
    204e:	09 f4       	brne	.+2      	; 0x2052 <dio_set_direction+0x2a>
    2050:	41 c0       	rjmp	.+130    	; 0x20d4 <dio_set_direction+0xac>
    2052:	8c 81       	ldd	r24, Y+4	; 0x04
    2054:	9d 81       	ldd	r25, Y+5	; 0x05
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	91 05       	cpc	r25, r1
    205a:	34 f4       	brge	.+12     	; 0x2068 <dio_set_direction+0x40>
    205c:	2c 81       	ldd	r18, Y+4	; 0x04
    205e:	3d 81       	ldd	r19, Y+5	; 0x05
    2060:	21 15       	cp	r18, r1
    2062:	31 05       	cpc	r19, r1
    2064:	71 f0       	breq	.+28     	; 0x2082 <dio_set_direction+0x5a>
    2066:	b0 c0       	rjmp	.+352    	; 0x21c8 <dio_set_direction+0x1a0>
    2068:	6c 81       	ldd	r22, Y+4	; 0x04
    206a:	7d 81       	ldd	r23, Y+5	; 0x05
    206c:	62 30       	cpi	r22, 0x02	; 2
    206e:	71 05       	cpc	r23, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <dio_set_direction+0x4c>
    2072:	59 c0       	rjmp	.+178    	; 0x2126 <dio_set_direction+0xfe>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	91 05       	cpc	r25, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <dio_set_direction+0x58>
    207e:	7c c0       	rjmp	.+248    	; 0x2178 <dio_set_direction+0x150>
    2080:	a3 c0       	rjmp	.+326    	; 0x21c8 <dio_set_direction+0x1a0>
	{
	case DIOA:
		/* code */
		DDRA &= ~(0x01<<pin);   // clear bit
    2082:	aa e3       	ldi	r26, 0x3A	; 58
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	ea e3       	ldi	r30, 0x3A	; 58
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 c0       	rjmp	.+4      	; 0x209e <dio_set_direction+0x76>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	2a 95       	dec	r18
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <dio_set_direction+0x72>
    20a2:	80 95       	com	r24
    20a4:	84 23       	and	r24, r20
    20a6:	8c 93       	st	X, r24
		DDRA |= direction <<pin; // set value
    20a8:	aa e3       	ldi	r26, 0x3A	; 58
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ea e3       	ldi	r30, 0x3A	; 58
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	48 2f       	mov	r20, r24
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	b9 01       	movw	r22, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <dio_set_direction+0xa0>
    20c4:	66 0f       	add	r22, r22
    20c6:	77 1f       	adc	r23, r23
    20c8:	8a 95       	dec	r24
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <dio_set_direction+0x9c>
    20cc:	cb 01       	movw	r24, r22
    20ce:	84 2b       	or	r24, r20
    20d0:	8c 93       	st	X, r24
    20d2:	7a c0       	rjmp	.+244    	; 0x21c8 <dio_set_direction+0x1a0>
		break;
	case DIOB:
		DDRB &= ~(0x01<<pin);   // clear bit
    20d4:	a7 e3       	ldi	r26, 0x37	; 55
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e7 e3       	ldi	r30, 0x37	; 55
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	48 2f       	mov	r20, r24
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <dio_set_direction+0xc8>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	2a 95       	dec	r18
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <dio_set_direction+0xc4>
    20f4:	80 95       	com	r24
    20f6:	84 23       	and	r24, r20
    20f8:	8c 93       	st	X, r24
		DDRB |= direction <<pin; // set value
    20fa:	a7 e3       	ldi	r26, 0x37	; 55
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e7 e3       	ldi	r30, 0x37	; 55
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	48 2f       	mov	r20, r24
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	b9 01       	movw	r22, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <dio_set_direction+0xf2>
    2116:	66 0f       	add	r22, r22
    2118:	77 1f       	adc	r23, r23
    211a:	8a 95       	dec	r24
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <dio_set_direction+0xee>
    211e:	cb 01       	movw	r24, r22
    2120:	84 2b       	or	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	51 c0       	rjmp	.+162    	; 0x21c8 <dio_set_direction+0x1a0>
		/* code */
		break;
	case DIOC:
		/* code */
		DDRC &= ~(0x01<<pin);   // clear bit
    2126:	a4 e3       	ldi	r26, 0x34	; 52
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e4 e3       	ldi	r30, 0x34	; 52
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <dio_set_direction+0x11a>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	2a 95       	dec	r18
    2144:	e2 f7       	brpl	.-8      	; 0x213e <dio_set_direction+0x116>
    2146:	80 95       	com	r24
    2148:	84 23       	and	r24, r20
    214a:	8c 93       	st	X, r24
		DDRC |= direction << pin; // set value
    214c:	a4 e3       	ldi	r26, 0x34	; 52
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e4 e3       	ldi	r30, 0x34	; 52
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	48 2f       	mov	r20, r24
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	b9 01       	movw	r22, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <dio_set_direction+0x144>
    2168:	66 0f       	add	r22, r22
    216a:	77 1f       	adc	r23, r23
    216c:	8a 95       	dec	r24
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <dio_set_direction+0x140>
    2170:	cb 01       	movw	r24, r22
    2172:	84 2b       	or	r24, r20
    2174:	8c 93       	st	X, r24
    2176:	28 c0       	rjmp	.+80     	; 0x21c8 <dio_set_direction+0x1a0>
		break;
	case DIOD:
		/* code */
		DDRD &= ~(0x01<<pin);   // clear bit
    2178:	a1 e3       	ldi	r26, 0x31	; 49
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e1 e3       	ldi	r30, 0x31	; 49
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	48 2f       	mov	r20, r24
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <dio_set_direction+0x16c>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	2a 95       	dec	r18
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <dio_set_direction+0x168>
    2198:	80 95       	com	r24
    219a:	84 23       	and	r24, r20
    219c:	8c 93       	st	X, r24
		DDRD |= direction << pin; // set value
    219e:	a1 e3       	ldi	r26, 0x31	; 49
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e1 e3       	ldi	r30, 0x31	; 49
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	48 2f       	mov	r20, r24
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	b9 01       	movw	r22, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <dio_set_direction+0x196>
    21ba:	66 0f       	add	r22, r22
    21bc:	77 1f       	adc	r23, r23
    21be:	8a 95       	dec	r24
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <dio_set_direction+0x192>
    21c2:	cb 01       	movw	r24, r22
    21c4:	84 2b       	or	r24, r20
    21c6:	8c 93       	st	X, r24

	default:
		//reDIO error
		break;
	}
}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <dio_set_level>:


void dio_set_level(dio_t port, dio_pin_t pin, dio_level_t value)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <dio_set_level+0x6>
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <dio_set_level+0x8>
    21e0:	0f 92       	push	r0
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	6a 83       	std	Y+2, r22	; 0x02
    21ea:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3d 83       	std	Y+5, r19	; 0x05
    21f4:	2c 83       	std	Y+4, r18	; 0x04
    21f6:	6c 81       	ldd	r22, Y+4	; 0x04
    21f8:	7d 81       	ldd	r23, Y+5	; 0x05
    21fa:	61 30       	cpi	r22, 0x01	; 1
    21fc:	71 05       	cpc	r23, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <dio_set_level+0x2a>
    2200:	41 c0       	rjmp	.+130    	; 0x2284 <dio_set_level+0xac>
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	9d 81       	ldd	r25, Y+5	; 0x05
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	91 05       	cpc	r25, r1
    220a:	34 f4       	brge	.+12     	; 0x2218 <dio_set_level+0x40>
    220c:	2c 81       	ldd	r18, Y+4	; 0x04
    220e:	3d 81       	ldd	r19, Y+5	; 0x05
    2210:	21 15       	cp	r18, r1
    2212:	31 05       	cpc	r19, r1
    2214:	71 f0       	breq	.+28     	; 0x2232 <dio_set_level+0x5a>
    2216:	b0 c0       	rjmp	.+352    	; 0x2378 <dio_set_level+0x1a0>
    2218:	6c 81       	ldd	r22, Y+4	; 0x04
    221a:	7d 81       	ldd	r23, Y+5	; 0x05
    221c:	62 30       	cpi	r22, 0x02	; 2
    221e:	71 05       	cpc	r23, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <dio_set_level+0x4c>
    2222:	59 c0       	rjmp	.+178    	; 0x22d6 <dio_set_level+0xfe>
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	83 30       	cpi	r24, 0x03	; 3
    222a:	91 05       	cpc	r25, r1
    222c:	09 f4       	brne	.+2      	; 0x2230 <dio_set_level+0x58>
    222e:	7c c0       	rjmp	.+248    	; 0x2328 <dio_set_level+0x150>
    2230:	a3 c0       	rjmp	.+326    	; 0x2378 <dio_set_level+0x1a0>
	{
	case DIOA:
		/* code */
		PORTA &= ~(0x01<<pin);   // clear bit
    2232:	ab e3       	ldi	r26, 0x3B	; 59
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	eb e3       	ldi	r30, 0x3B	; 59
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	48 2f       	mov	r20, r24
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 c0       	rjmp	.+4      	; 0x224e <dio_set_level+0x76>
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	2a 95       	dec	r18
    2250:	e2 f7       	brpl	.-8      	; 0x224a <dio_set_level+0x72>
    2252:	80 95       	com	r24
    2254:	84 23       	and	r24, r20
    2256:	8c 93       	st	X, r24
		PORTA |= value <<pin; // set value
    2258:	ab e3       	ldi	r26, 0x3B	; 59
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	eb e3       	ldi	r30, 0x3B	; 59
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	48 2f       	mov	r20, r24
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	b9 01       	movw	r22, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <dio_set_level+0xa0>
    2274:	66 0f       	add	r22, r22
    2276:	77 1f       	adc	r23, r23
    2278:	8a 95       	dec	r24
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <dio_set_level+0x9c>
    227c:	cb 01       	movw	r24, r22
    227e:	84 2b       	or	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	7a c0       	rjmp	.+244    	; 0x2378 <dio_set_level+0x1a0>
		break;
	case DIOB:
		PORTB &= ~(0x01<<pin);   // clear bit
    2284:	a8 e3       	ldi	r26, 0x38	; 56
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e3       	ldi	r30, 0x38	; 56
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <dio_set_level+0xc8>
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	2a 95       	dec	r18
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <dio_set_level+0xc4>
    22a4:	80 95       	com	r24
    22a6:	84 23       	and	r24, r20
    22a8:	8c 93       	st	X, r24
		PORTB |= value <<pin; // set value
    22aa:	a8 e3       	ldi	r26, 0x38	; 56
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e8 e3       	ldi	r30, 0x38	; 56
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	48 2f       	mov	r20, r24
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	b9 01       	movw	r22, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <dio_set_level+0xf2>
    22c6:	66 0f       	add	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	8a 95       	dec	r24
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <dio_set_level+0xee>
    22ce:	cb 01       	movw	r24, r22
    22d0:	84 2b       	or	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	51 c0       	rjmp	.+162    	; 0x2378 <dio_set_level+0x1a0>
		/* code */
		break;
	case DIOC:
		/* code */
		PORTC &= ~(0x01<<pin);   // clear bit
    22d6:	a5 e3       	ldi	r26, 0x35	; 53
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e5 e3       	ldi	r30, 0x35	; 53
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	48 2f       	mov	r20, r24
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <dio_set_level+0x11a>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	2a 95       	dec	r18
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <dio_set_level+0x116>
    22f6:	80 95       	com	r24
    22f8:	84 23       	and	r24, r20
    22fa:	8c 93       	st	X, r24
		PORTC |= value << pin; // set value
    22fc:	a5 e3       	ldi	r26, 0x35	; 53
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e5 e3       	ldi	r30, 0x35	; 53
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	b9 01       	movw	r22, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <dio_set_level+0x144>
    2318:	66 0f       	add	r22, r22
    231a:	77 1f       	adc	r23, r23
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <dio_set_level+0x140>
    2320:	cb 01       	movw	r24, r22
    2322:	84 2b       	or	r24, r20
    2324:	8c 93       	st	X, r24
    2326:	28 c0       	rjmp	.+80     	; 0x2378 <dio_set_level+0x1a0>
		break;
	case DIOD:
		/* code */
		PORTD &= ~(0x01<<pin);   // clear bit
    2328:	a2 e3       	ldi	r26, 0x32	; 50
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e2 e3       	ldi	r30, 0x32	; 50
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <dio_set_level+0x16c>
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	2a 95       	dec	r18
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <dio_set_level+0x168>
    2348:	80 95       	com	r24
    234a:	84 23       	and	r24, r20
    234c:	8c 93       	st	X, r24
		PORTD |= value << pin; // set value
    234e:	a2 e3       	ldi	r26, 0x32	; 50
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e2 e3       	ldi	r30, 0x32	; 50
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	48 2f       	mov	r20, r24
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	b9 01       	movw	r22, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <dio_set_level+0x196>
    236a:	66 0f       	add	r22, r22
    236c:	77 1f       	adc	r23, r23
    236e:	8a 95       	dec	r24
    2370:	e2 f7       	brpl	.-8      	; 0x236a <dio_set_level+0x192>
    2372:	cb 01       	movw	r24, r22
    2374:	84 2b       	or	r24, r20
    2376:	8c 93       	st	X, r24

	default:
		//report error
		break;
	}
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <dio_get_level>:


dio_level_t dio_get_level(dio_t port, dio_pin_t pin)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <dio_get_level+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <dio_get_level+0x8>
    2390:	00 d0       	rcall	.+0      	; 0x2392 <dio_get_level+0xa>
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	3d 83       	std	Y+5, r19	; 0x05
    23a2:	2c 83       	std	Y+4, r18	; 0x04
    23a4:	4c 81       	ldd	r20, Y+4	; 0x04
    23a6:	5d 81       	ldd	r21, Y+5	; 0x05
    23a8:	41 30       	cpi	r20, 0x01	; 1
    23aa:	51 05       	cpc	r21, r1
    23ac:	49 f1       	breq	.+82     	; 0x2400 <dio_get_level+0x78>
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	91 05       	cpc	r25, r1
    23b6:	34 f4       	brge	.+12     	; 0x23c4 <dio_get_level+0x3c>
    23b8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ba:	3d 81       	ldd	r19, Y+5	; 0x05
    23bc:	21 15       	cp	r18, r1
    23be:	31 05       	cpc	r19, r1
    23c0:	61 f0       	breq	.+24     	; 0x23da <dio_get_level+0x52>
    23c2:	57 c0       	rjmp	.+174    	; 0x2472 <dio_get_level+0xea>
    23c4:	4c 81       	ldd	r20, Y+4	; 0x04
    23c6:	5d 81       	ldd	r21, Y+5	; 0x05
    23c8:	42 30       	cpi	r20, 0x02	; 2
    23ca:	51 05       	cpc	r21, r1
    23cc:	61 f1       	breq	.+88     	; 0x2426 <dio_get_level+0x9e>
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	83 30       	cpi	r24, 0x03	; 3
    23d4:	91 05       	cpc	r25, r1
    23d6:	d1 f1       	breq	.+116    	; 0x244c <dio_get_level+0xc4>
    23d8:	4c c0       	rjmp	.+152    	; 0x2472 <dio_get_level+0xea>
	{
	case DIOA:
		return 0b01&(PINA>>pin);
    23da:	e9 e3       	ldi	r30, 0x39	; 57
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a9 01       	movw	r20, r18
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <dio_get_level+0x6a>
    23ee:	55 95       	asr	r21
    23f0:	47 95       	ror	r20
    23f2:	8a 95       	dec	r24
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <dio_get_level+0x66>
    23f6:	ca 01       	movw	r24, r20
    23f8:	58 2f       	mov	r21, r24
    23fa:	51 70       	andi	r21, 0x01	; 1
    23fc:	5b 83       	std	Y+3, r21	; 0x03
    23fe:	3a c0       	rjmp	.+116    	; 0x2474 <dio_get_level+0xec>
		break;
	case DIOB:
		return 0b01&(PINB>>pin);
    2400:	e6 e3       	ldi	r30, 0x36	; 54
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a9 01       	movw	r20, r18
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <dio_get_level+0x90>
    2414:	55 95       	asr	r21
    2416:	47 95       	ror	r20
    2418:	8a 95       	dec	r24
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <dio_get_level+0x8c>
    241c:	ca 01       	movw	r24, r20
    241e:	58 2f       	mov	r21, r24
    2420:	51 70       	andi	r21, 0x01	; 1
    2422:	5b 83       	std	Y+3, r21	; 0x03
    2424:	27 c0       	rjmp	.+78     	; 0x2474 <dio_get_level+0xec>
		break;
	case DIOC:
		return 0b01&(PINC>>pin);
    2426:	e3 e3       	ldi	r30, 0x33	; 51
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a9 01       	movw	r20, r18
    2438:	02 c0       	rjmp	.+4      	; 0x243e <dio_get_level+0xb6>
    243a:	55 95       	asr	r21
    243c:	47 95       	ror	r20
    243e:	8a 95       	dec	r24
    2440:	e2 f7       	brpl	.-8      	; 0x243a <dio_get_level+0xb2>
    2442:	ca 01       	movw	r24, r20
    2444:	58 2f       	mov	r21, r24
    2446:	51 70       	andi	r21, 0x01	; 1
    2448:	5b 83       	std	Y+3, r21	; 0x03
    244a:	14 c0       	rjmp	.+40     	; 0x2474 <dio_get_level+0xec>
		break;
	case DIOD:
		return 0b01&(PIND>>pin);
    244c:	e0 e3       	ldi	r30, 0x30	; 48
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a9 01       	movw	r20, r18
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <dio_get_level+0xdc>
    2460:	55 95       	asr	r21
    2462:	47 95       	ror	r20
    2464:	8a 95       	dec	r24
    2466:	e2 f7       	brpl	.-8      	; 0x2460 <dio_get_level+0xd8>
    2468:	ca 01       	movw	r24, r20
    246a:	58 2f       	mov	r21, r24
    246c:	51 70       	andi	r21, 0x01	; 1
    246e:	5b 83       	std	Y+3, r21	; 0x03
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <dio_get_level+0xec>
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <dio_get_level+0xf0>
		break;

	default:
		break;
	}
}
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	8e 83       	std	Y+6, r24	; 0x06
    2478:	8e 81       	ldd	r24, Y+6	; 0x06
    247a:	26 96       	adiw	r28, 0x06	; 6
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <toggle>:

void toggle(dio_t port, dio_pin_t pin){
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <toggle+0x6>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <toggle+0x8>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	3c 83       	std	Y+4, r19	; 0x04
    24a4:	2b 83       	std	Y+3, r18	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	91 05       	cpc	r25, r1
    24ae:	49 f1       	breq	.+82     	; 0x2502 <toggle+0x76>
    24b0:	2b 81       	ldd	r18, Y+3	; 0x03
    24b2:	3c 81       	ldd	r19, Y+4	; 0x04
    24b4:	22 30       	cpi	r18, 0x02	; 2
    24b6:	31 05       	cpc	r19, r1
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <toggle+0x38>
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	61 f0       	breq	.+24     	; 0x24da <toggle+0x4e>
    24c2:	5a c0       	rjmp	.+180    	; 0x2578 <toggle+0xec>
    24c4:	2b 81       	ldd	r18, Y+3	; 0x03
    24c6:	3c 81       	ldd	r19, Y+4	; 0x04
    24c8:	22 30       	cpi	r18, 0x02	; 2
    24ca:	31 05       	cpc	r19, r1
    24cc:	71 f1       	breq	.+92     	; 0x252a <toggle+0x9e>
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	83 30       	cpi	r24, 0x03	; 3
    24d4:	91 05       	cpc	r25, r1
    24d6:	e9 f1       	breq	.+122    	; 0x2552 <toggle+0xc6>
    24d8:	4f c0       	rjmp	.+158    	; 0x2578 <toggle+0xec>
	{
	case DIOA:
		/* code */
		PORTA ^= 1 << pin; // set value
    24da:	ab e3       	ldi	r26, 0x3B	; 59
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	eb e3       	ldi	r30, 0x3B	; 59
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <toggle+0x6c>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <toggle+0x68>
    24fc:	84 27       	eor	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	3b c0       	rjmp	.+118    	; 0x2578 <toggle+0xec>
		break;
	case DIOB:
		
		PORTB ^= 1 << pin; // set value
    2502:	a8 e3       	ldi	r26, 0x38	; 56
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e8 e3       	ldi	r30, 0x38	; 56
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	48 2f       	mov	r20, r24
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <toggle+0x94>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <toggle+0x90>
    2524:	84 27       	eor	r24, r20
    2526:	8c 93       	st	X, r24
    2528:	27 c0       	rjmp	.+78     	; 0x2578 <toggle+0xec>
		/* code */
		break;
	case DIOC:
		/* code */
		
		PORTC ^= 1 << pin; // set value
    252a:	a5 e3       	ldi	r26, 0x35	; 53
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e5 e3       	ldi	r30, 0x35	; 53
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	48 2f       	mov	r20, r24
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	02 2e       	mov	r0, r18
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <toggle+0xbc>
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	0a 94       	dec	r0
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <toggle+0xb8>
    254c:	84 27       	eor	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	13 c0       	rjmp	.+38     	; 0x2578 <toggle+0xec>
		break;
	case DIOD:
		/* code */
		
		PORTD ^= 1 << pin; // set value
    2552:	a2 e3       	ldi	r26, 0x32	; 50
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e2 e3       	ldi	r30, 0x32	; 50
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <toggle+0xe4>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <toggle+0xe0>
    2574:	84 27       	eor	r24, r20
    2576:	8c 93       	st	X, r24

	default:
		//report error
		break;
	}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <ADC_Init>:
#include"../Common_Macros.h"
#include"../Micro_config.h"

void ADC_Init(){										
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;	        /* Make ADC port as input */
    258e:	ea e3       	ldi	r30, 0x3A	; 58
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	10 82       	st	Z, r1
	ADCSRA = 0x87;          /* Enable ADC, with freq/128  */
    2594:	e6 e2       	ldi	r30, 0x26	; 38
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	87 e8       	ldi	r24, 0x87	; 135
    259a:	80 83       	st	Z, r24
	ADMUX = 0x40;           /* Vref: Avcc, ADC channel: 0 */
    259c:	e7 e2       	ldi	r30, 0x27	; 39
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 e4       	ldi	r24, 0x40	; 64
    25a2:	80 83       	st	Z, r24
}
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <ADC_Read>:

uint8_t ADC_Read(uint8_t channel)							
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	2f 97       	sbiw	r28, 0x0f	; 15
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	8f 87       	std	Y+15, r24	; 0x0f
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
    25c0:	e7 e2       	ldi	r30, 0x27	; 39
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c6:	87 70       	andi	r24, 0x07	; 7
    25c8:	80 64       	ori	r24, 0x40	; 64
    25ca:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
    25cc:	a6 e2       	ldi	r26, 0x26	; 38
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e6 e2       	ldi	r30, 0x26	; 38
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	80 64       	ori	r24, 0x40	; 64
    25d8:	8c 93       	st	X, r24
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
    25da:	e6 e2       	ldi	r30, 0x26	; 38
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	80 71       	andi	r24, 0x10	; 16
    25e6:	90 70       	andi	r25, 0x00	; 0
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	b9 f3       	breq	.-18     	; 0x25da <ADC_Read+0x30>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
    25ec:	a6 e2       	ldi	r26, 0x26	; 38
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e6 e2       	ldi	r30, 0x26	; 38
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	80 61       	ori	r24, 0x10	; 16
    25f8:	8c 93       	st	X, r24
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a0 e8       	ldi	r26, 0x80	; 128
    2600:	bf e3       	ldi	r27, 0x3F	; 63
    2602:	8b 87       	std	Y+11, r24	; 0x0b
    2604:	9c 87       	std	Y+12, r25	; 0x0c
    2606:	ad 87       	std	Y+13, r26	; 0x0d
    2608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	6b 85       	ldd	r22, Y+11	; 0x0b
    260c:	7c 85       	ldd	r23, Y+12	; 0x0c
    260e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2610:	9e 85       	ldd	r25, Y+14	; 0x0e
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	4a ef       	ldi	r20, 0xFA	; 250
    2618:	54 e4       	ldi	r21, 0x44	; 68
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	8f 83       	std	Y+7, r24	; 0x07
    2624:	98 87       	std	Y+8, r25	; 0x08
    2626:	a9 87       	std	Y+9, r26	; 0x09
    2628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e8       	ldi	r20, 0x80	; 128
    2638:	5f e3       	ldi	r21, 0x3F	; 63
    263a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	2c f4       	brge	.+10     	; 0x264c <ADC_Read+0xa2>
		__ticks = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
    264a:	3f c0       	rjmp	.+126    	; 0x26ca <ADC_Read+0x120>
	else if (__tmp > 65535)
    264c:	6f 81       	ldd	r22, Y+7	; 0x07
    264e:	78 85       	ldd	r23, Y+8	; 0x08
    2650:	89 85       	ldd	r24, Y+9	; 0x09
    2652:	9a 85       	ldd	r25, Y+10	; 0x0a
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	3f ef       	ldi	r19, 0xFF	; 255
    2658:	4f e7       	ldi	r20, 0x7F	; 127
    265a:	57 e4       	ldi	r21, 0x47	; 71
    265c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2660:	18 16       	cp	r1, r24
    2662:	4c f5       	brge	.+82     	; 0x26b6 <ADC_Read+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2664:	6b 85       	ldd	r22, Y+11	; 0x0b
    2666:	7c 85       	ldd	r23, Y+12	; 0x0c
    2668:	8d 85       	ldd	r24, Y+13	; 0x0d
    266a:	9e 85       	ldd	r25, Y+14	; 0x0e
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e2       	ldi	r20, 0x20	; 32
    2672:	51 e4       	ldi	r21, 0x41	; 65
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <ADC_Read+0x102>
    268e:	88 ec       	ldi	r24, 0xC8	; 200
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9c 83       	std	Y+4, r25	; 0x04
    2694:	8b 83       	std	Y+3, r24	; 0x03
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <ADC_Read+0xf0>
    269e:	9c 83       	std	Y+4, r25	; 0x04
    26a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	69 f7       	brne	.-38     	; 0x268e <ADC_Read+0xe4>
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <ADC_Read+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b6:	6f 81       	ldd	r22, Y+7	; 0x07
    26b8:	78 85       	ldd	r23, Y+8	; 0x08
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	8d 81       	ldd	r24, Y+5	; 0x05
    26cc:	9e 81       	ldd	r25, Y+6	; 0x06
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <ADC_Read+0x12c>
    26da:	9a 83       	std	Y+2, r25	; 0x02
    26dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
    26de:	e4 e2       	ldi	r30, 0x24	; 36
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	2f 96       	adiw	r28, 0x0f	; 15
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <main>:
#include"MCAL\lm35\lm35.h"
#include"MCAL\lcd\lcd.h"

#define F_CPU 8000000UL

int main(){
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    2700:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_Init>
	lm_init();
    2704:	0e 94 45 08 	call	0x108a	; 0x108a <lm_init>
	ADC_Init();
    2708:	0e 94 c3 12 	call	0x2586	; 0x2586 <ADC_Init>

	while(1){
		lm_calc();
    270c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <lm_calc>
    2710:	fd cf       	rjmp	.-6      	; 0x270c <main+0x14>

00002712 <__prologue_saves__>:
    2712:	2f 92       	push	r2
    2714:	3f 92       	push	r3
    2716:	4f 92       	push	r4
    2718:	5f 92       	push	r5
    271a:	6f 92       	push	r6
    271c:	7f 92       	push	r7
    271e:	8f 92       	push	r8
    2720:	9f 92       	push	r9
    2722:	af 92       	push	r10
    2724:	bf 92       	push	r11
    2726:	cf 92       	push	r12
    2728:	df 92       	push	r13
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	ca 1b       	sub	r28, r26
    273c:	db 0b       	sbc	r29, r27
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	09 94       	ijmp

0000274a <__epilogue_restores__>:
    274a:	2a 88       	ldd	r2, Y+18	; 0x12
    274c:	39 88       	ldd	r3, Y+17	; 0x11
    274e:	48 88       	ldd	r4, Y+16	; 0x10
    2750:	5f 84       	ldd	r5, Y+15	; 0x0f
    2752:	6e 84       	ldd	r6, Y+14	; 0x0e
    2754:	7d 84       	ldd	r7, Y+13	; 0x0d
    2756:	8c 84       	ldd	r8, Y+12	; 0x0c
    2758:	9b 84       	ldd	r9, Y+11	; 0x0b
    275a:	aa 84       	ldd	r10, Y+10	; 0x0a
    275c:	b9 84       	ldd	r11, Y+9	; 0x09
    275e:	c8 84       	ldd	r12, Y+8	; 0x08
    2760:	df 80       	ldd	r13, Y+7	; 0x07
    2762:	ee 80       	ldd	r14, Y+6	; 0x06
    2764:	fd 80       	ldd	r15, Y+5	; 0x05
    2766:	0c 81       	ldd	r16, Y+4	; 0x04
    2768:	1b 81       	ldd	r17, Y+3	; 0x03
    276a:	aa 81       	ldd	r26, Y+2	; 0x02
    276c:	b9 81       	ldd	r27, Y+1	; 0x01
    276e:	ce 0f       	add	r28, r30
    2770:	d1 1d       	adc	r29, r1
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	ed 01       	movw	r28, r26
    277e:	08 95       	ret

00002780 <memset>:
    2780:	dc 01       	movw	r26, r24
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <memset+0x6>
    2784:	6d 93       	st	X+, r22
    2786:	41 50       	subi	r20, 0x01	; 1
    2788:	50 40       	sbci	r21, 0x00	; 0
    278a:	e0 f7       	brcc	.-8      	; 0x2784 <memset+0x4>
    278c:	08 95       	ret

0000278e <itoa>:
    278e:	fb 01       	movw	r30, r22
    2790:	9f 01       	movw	r18, r30
    2792:	e8 94       	clt
    2794:	42 30       	cpi	r20, 0x02	; 2
    2796:	c4 f0       	brlt	.+48     	; 0x27c8 <itoa+0x3a>
    2798:	45 32       	cpi	r20, 0x25	; 37
    279a:	b4 f4       	brge	.+44     	; 0x27c8 <itoa+0x3a>
    279c:	4a 30       	cpi	r20, 0x0A	; 10
    279e:	29 f4       	brne	.+10     	; 0x27aa <itoa+0x1c>
    27a0:	97 fb       	bst	r25, 7
    27a2:	1e f4       	brtc	.+6      	; 0x27aa <itoa+0x1c>
    27a4:	90 95       	com	r25
    27a6:	81 95       	neg	r24
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	64 2f       	mov	r22, r20
    27ac:	77 27       	eor	r23, r23
    27ae:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__udivmodhi4>
    27b2:	80 5d       	subi	r24, 0xD0	; 208
    27b4:	8a 33       	cpi	r24, 0x3A	; 58
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <itoa+0x2c>
    27b8:	89 5d       	subi	r24, 0xD9	; 217
    27ba:	81 93       	st	Z+, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	a1 f7       	brne	.-24     	; 0x27aa <itoa+0x1c>
    27c2:	16 f4       	brtc	.+4      	; 0x27c8 <itoa+0x3a>
    27c4:	5d e2       	ldi	r21, 0x2D	; 45
    27c6:	51 93       	st	Z+, r21
    27c8:	10 82       	st	Z, r1
    27ca:	c9 01       	movw	r24, r18
    27cc:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <strrev>

000027d0 <sprintf>:
    27d0:	ae e0       	ldi	r26, 0x0E	; 14
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	ee ee       	ldi	r30, 0xEE	; 238
    27d6:	f3 e1       	ldi	r31, 0x13	; 19
    27d8:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x1c>
    27dc:	0d 89       	ldd	r16, Y+21	; 0x15
    27de:	1e 89       	ldd	r17, Y+22	; 0x16
    27e0:	86 e0       	ldi	r24, 0x06	; 6
    27e2:	8c 83       	std	Y+4, r24	; 0x04
    27e4:	1a 83       	std	Y+2, r17	; 0x02
    27e6:	09 83       	std	Y+1, r16	; 0x01
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	9f e7       	ldi	r25, 0x7F	; 127
    27ec:	9e 83       	std	Y+6, r25	; 0x06
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	9e 01       	movw	r18, r28
    27f2:	27 5e       	subi	r18, 0xE7	; 231
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	ce 01       	movw	r24, r28
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	6f 89       	ldd	r22, Y+23	; 0x17
    27fc:	78 8d       	ldd	r23, Y+24	; 0x18
    27fe:	a9 01       	movw	r20, r18
    2800:	0e 94 0c 14 	call	0x2818	; 0x2818 <vfprintf>
    2804:	2f 81       	ldd	r18, Y+7	; 0x07
    2806:	38 85       	ldd	r19, Y+8	; 0x08
    2808:	02 0f       	add	r16, r18
    280a:	13 1f       	adc	r17, r19
    280c:	f8 01       	movw	r30, r16
    280e:	10 82       	st	Z, r1
    2810:	2e 96       	adiw	r28, 0x0e	; 14
    2812:	e4 e0       	ldi	r30, 0x04	; 4
    2814:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x1c>

00002818 <vfprintf>:
    2818:	ab e0       	ldi	r26, 0x0B	; 11
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e2 e1       	ldi	r30, 0x12	; 18
    281e:	f4 e1       	ldi	r31, 0x14	; 20
    2820:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__>
    2824:	3c 01       	movw	r6, r24
    2826:	2b 01       	movw	r4, r22
    2828:	5a 01       	movw	r10, r20
    282a:	fc 01       	movw	r30, r24
    282c:	17 82       	std	Z+7, r1	; 0x07
    282e:	16 82       	std	Z+6, r1	; 0x06
    2830:	83 81       	ldd	r24, Z+3	; 0x03
    2832:	81 fd       	sbrc	r24, 1
    2834:	03 c0       	rjmp	.+6      	; 0x283c <vfprintf+0x24>
    2836:	6f ef       	ldi	r22, 0xFF	; 255
    2838:	7f ef       	ldi	r23, 0xFF	; 255
    283a:	c6 c1       	rjmp	.+908    	; 0x2bc8 <vfprintf+0x3b0>
    283c:	9a e0       	ldi	r25, 0x0A	; 10
    283e:	89 2e       	mov	r8, r25
    2840:	1e 01       	movw	r2, r28
    2842:	08 94       	sec
    2844:	21 1c       	adc	r2, r1
    2846:	31 1c       	adc	r3, r1
    2848:	f3 01       	movw	r30, r6
    284a:	23 81       	ldd	r18, Z+3	; 0x03
    284c:	f2 01       	movw	r30, r4
    284e:	23 fd       	sbrc	r18, 3
    2850:	85 91       	lpm	r24, Z+
    2852:	23 ff       	sbrs	r18, 3
    2854:	81 91       	ld	r24, Z+
    2856:	2f 01       	movw	r4, r30
    2858:	88 23       	and	r24, r24
    285a:	09 f4       	brne	.+2      	; 0x285e <vfprintf+0x46>
    285c:	b2 c1       	rjmp	.+868    	; 0x2bc2 <vfprintf+0x3aa>
    285e:	85 32       	cpi	r24, 0x25	; 37
    2860:	39 f4       	brne	.+14     	; 0x2870 <vfprintf+0x58>
    2862:	23 fd       	sbrc	r18, 3
    2864:	85 91       	lpm	r24, Z+
    2866:	23 ff       	sbrs	r18, 3
    2868:	81 91       	ld	r24, Z+
    286a:	2f 01       	movw	r4, r30
    286c:	85 32       	cpi	r24, 0x25	; 37
    286e:	29 f4       	brne	.+10     	; 0x287a <vfprintf+0x62>
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	b3 01       	movw	r22, r6
    2874:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    2878:	e7 cf       	rjmp	.-50     	; 0x2848 <vfprintf+0x30>
    287a:	98 2f       	mov	r25, r24
    287c:	ff 24       	eor	r15, r15
    287e:	ee 24       	eor	r14, r14
    2880:	99 24       	eor	r9, r9
    2882:	ff e1       	ldi	r31, 0x1F	; 31
    2884:	ff 15       	cp	r31, r15
    2886:	d0 f0       	brcs	.+52     	; 0x28bc <vfprintf+0xa4>
    2888:	9b 32       	cpi	r25, 0x2B	; 43
    288a:	69 f0       	breq	.+26     	; 0x28a6 <vfprintf+0x8e>
    288c:	9c 32       	cpi	r25, 0x2C	; 44
    288e:	28 f4       	brcc	.+10     	; 0x289a <vfprintf+0x82>
    2890:	90 32       	cpi	r25, 0x20	; 32
    2892:	59 f0       	breq	.+22     	; 0x28aa <vfprintf+0x92>
    2894:	93 32       	cpi	r25, 0x23	; 35
    2896:	91 f4       	brne	.+36     	; 0x28bc <vfprintf+0xa4>
    2898:	0e c0       	rjmp	.+28     	; 0x28b6 <vfprintf+0x9e>
    289a:	9d 32       	cpi	r25, 0x2D	; 45
    289c:	49 f0       	breq	.+18     	; 0x28b0 <vfprintf+0x98>
    289e:	90 33       	cpi	r25, 0x30	; 48
    28a0:	69 f4       	brne	.+26     	; 0x28bc <vfprintf+0xa4>
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	24 c0       	rjmp	.+72     	; 0x28ee <vfprintf+0xd6>
    28a6:	52 e0       	ldi	r21, 0x02	; 2
    28a8:	f5 2a       	or	r15, r21
    28aa:	84 e0       	ldi	r24, 0x04	; 4
    28ac:	f8 2a       	or	r15, r24
    28ae:	28 c0       	rjmp	.+80     	; 0x2900 <vfprintf+0xe8>
    28b0:	98 e0       	ldi	r25, 0x08	; 8
    28b2:	f9 2a       	or	r15, r25
    28b4:	25 c0       	rjmp	.+74     	; 0x2900 <vfprintf+0xe8>
    28b6:	e0 e1       	ldi	r30, 0x10	; 16
    28b8:	fe 2a       	or	r15, r30
    28ba:	22 c0       	rjmp	.+68     	; 0x2900 <vfprintf+0xe8>
    28bc:	f7 fc       	sbrc	r15, 7
    28be:	29 c0       	rjmp	.+82     	; 0x2912 <vfprintf+0xfa>
    28c0:	89 2f       	mov	r24, r25
    28c2:	80 53       	subi	r24, 0x30	; 48
    28c4:	8a 30       	cpi	r24, 0x0A	; 10
    28c6:	70 f4       	brcc	.+28     	; 0x28e4 <vfprintf+0xcc>
    28c8:	f6 fe       	sbrs	r15, 6
    28ca:	05 c0       	rjmp	.+10     	; 0x28d6 <vfprintf+0xbe>
    28cc:	98 9c       	mul	r9, r8
    28ce:	90 2c       	mov	r9, r0
    28d0:	11 24       	eor	r1, r1
    28d2:	98 0e       	add	r9, r24
    28d4:	15 c0       	rjmp	.+42     	; 0x2900 <vfprintf+0xe8>
    28d6:	e8 9c       	mul	r14, r8
    28d8:	e0 2c       	mov	r14, r0
    28da:	11 24       	eor	r1, r1
    28dc:	e8 0e       	add	r14, r24
    28de:	f0 e2       	ldi	r31, 0x20	; 32
    28e0:	ff 2a       	or	r15, r31
    28e2:	0e c0       	rjmp	.+28     	; 0x2900 <vfprintf+0xe8>
    28e4:	9e 32       	cpi	r25, 0x2E	; 46
    28e6:	29 f4       	brne	.+10     	; 0x28f2 <vfprintf+0xda>
    28e8:	f6 fc       	sbrc	r15, 6
    28ea:	6b c1       	rjmp	.+726    	; 0x2bc2 <vfprintf+0x3aa>
    28ec:	40 e4       	ldi	r20, 0x40	; 64
    28ee:	f4 2a       	or	r15, r20
    28f0:	07 c0       	rjmp	.+14     	; 0x2900 <vfprintf+0xe8>
    28f2:	9c 36       	cpi	r25, 0x6C	; 108
    28f4:	19 f4       	brne	.+6      	; 0x28fc <vfprintf+0xe4>
    28f6:	50 e8       	ldi	r21, 0x80	; 128
    28f8:	f5 2a       	or	r15, r21
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <vfprintf+0xe8>
    28fc:	98 36       	cpi	r25, 0x68	; 104
    28fe:	49 f4       	brne	.+18     	; 0x2912 <vfprintf+0xfa>
    2900:	f2 01       	movw	r30, r4
    2902:	23 fd       	sbrc	r18, 3
    2904:	95 91       	lpm	r25, Z+
    2906:	23 ff       	sbrs	r18, 3
    2908:	91 91       	ld	r25, Z+
    290a:	2f 01       	movw	r4, r30
    290c:	99 23       	and	r25, r25
    290e:	09 f0       	breq	.+2      	; 0x2912 <vfprintf+0xfa>
    2910:	b8 cf       	rjmp	.-144    	; 0x2882 <vfprintf+0x6a>
    2912:	89 2f       	mov	r24, r25
    2914:	85 54       	subi	r24, 0x45	; 69
    2916:	83 30       	cpi	r24, 0x03	; 3
    2918:	18 f0       	brcs	.+6      	; 0x2920 <vfprintf+0x108>
    291a:	80 52       	subi	r24, 0x20	; 32
    291c:	83 30       	cpi	r24, 0x03	; 3
    291e:	38 f4       	brcc	.+14     	; 0x292e <vfprintf+0x116>
    2920:	44 e0       	ldi	r20, 0x04	; 4
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	a4 0e       	add	r10, r20
    2926:	b5 1e       	adc	r11, r21
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	59 83       	std	Y+1, r21	; 0x01
    292c:	0f c0       	rjmp	.+30     	; 0x294c <vfprintf+0x134>
    292e:	93 36       	cpi	r25, 0x63	; 99
    2930:	31 f0       	breq	.+12     	; 0x293e <vfprintf+0x126>
    2932:	93 37       	cpi	r25, 0x73	; 115
    2934:	79 f0       	breq	.+30     	; 0x2954 <vfprintf+0x13c>
    2936:	93 35       	cpi	r25, 0x53	; 83
    2938:	09 f0       	breq	.+2      	; 0x293c <vfprintf+0x124>
    293a:	56 c0       	rjmp	.+172    	; 0x29e8 <vfprintf+0x1d0>
    293c:	20 c0       	rjmp	.+64     	; 0x297e <vfprintf+0x166>
    293e:	f5 01       	movw	r30, r10
    2940:	80 81       	ld	r24, Z
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	42 e0       	ldi	r20, 0x02	; 2
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	a4 0e       	add	r10, r20
    294a:	b5 1e       	adc	r11, r21
    294c:	61 01       	movw	r12, r2
    294e:	01 e0       	ldi	r16, 0x01	; 1
    2950:	10 e0       	ldi	r17, 0x00	; 0
    2952:	12 c0       	rjmp	.+36     	; 0x2978 <vfprintf+0x160>
    2954:	f5 01       	movw	r30, r10
    2956:	c0 80       	ld	r12, Z
    2958:	d1 80       	ldd	r13, Z+1	; 0x01
    295a:	f6 fc       	sbrc	r15, 6
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <vfprintf+0x14c>
    295e:	6f ef       	ldi	r22, 0xFF	; 255
    2960:	7f ef       	ldi	r23, 0xFF	; 255
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <vfprintf+0x150>
    2964:	69 2d       	mov	r22, r9
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	42 e0       	ldi	r20, 0x02	; 2
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	a4 0e       	add	r10, r20
    296e:	b5 1e       	adc	r11, r21
    2970:	c6 01       	movw	r24, r12
    2972:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <strnlen>
    2976:	8c 01       	movw	r16, r24
    2978:	5f e7       	ldi	r21, 0x7F	; 127
    297a:	f5 22       	and	r15, r21
    297c:	14 c0       	rjmp	.+40     	; 0x29a6 <vfprintf+0x18e>
    297e:	f5 01       	movw	r30, r10
    2980:	c0 80       	ld	r12, Z
    2982:	d1 80       	ldd	r13, Z+1	; 0x01
    2984:	f6 fc       	sbrc	r15, 6
    2986:	03 c0       	rjmp	.+6      	; 0x298e <vfprintf+0x176>
    2988:	6f ef       	ldi	r22, 0xFF	; 255
    298a:	7f ef       	ldi	r23, 0xFF	; 255
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <vfprintf+0x17a>
    298e:	69 2d       	mov	r22, r9
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	42 e0       	ldi	r20, 0x02	; 2
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	a4 0e       	add	r10, r20
    2998:	b5 1e       	adc	r11, r21
    299a:	c6 01       	movw	r24, r12
    299c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <strnlen_P>
    29a0:	8c 01       	movw	r16, r24
    29a2:	50 e8       	ldi	r21, 0x80	; 128
    29a4:	f5 2a       	or	r15, r21
    29a6:	f3 fe       	sbrs	r15, 3
    29a8:	07 c0       	rjmp	.+14     	; 0x29b8 <vfprintf+0x1a0>
    29aa:	1a c0       	rjmp	.+52     	; 0x29e0 <vfprintf+0x1c8>
    29ac:	80 e2       	ldi	r24, 0x20	; 32
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	b3 01       	movw	r22, r6
    29b2:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    29b6:	ea 94       	dec	r14
    29b8:	8e 2d       	mov	r24, r14
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	08 17       	cp	r16, r24
    29be:	19 07       	cpc	r17, r25
    29c0:	a8 f3       	brcs	.-22     	; 0x29ac <vfprintf+0x194>
    29c2:	0e c0       	rjmp	.+28     	; 0x29e0 <vfprintf+0x1c8>
    29c4:	f6 01       	movw	r30, r12
    29c6:	f7 fc       	sbrc	r15, 7
    29c8:	85 91       	lpm	r24, Z+
    29ca:	f7 fe       	sbrs	r15, 7
    29cc:	81 91       	ld	r24, Z+
    29ce:	6f 01       	movw	r12, r30
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	b3 01       	movw	r22, r6
    29d4:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    29d8:	e1 10       	cpse	r14, r1
    29da:	ea 94       	dec	r14
    29dc:	01 50       	subi	r16, 0x01	; 1
    29de:	10 40       	sbci	r17, 0x00	; 0
    29e0:	01 15       	cp	r16, r1
    29e2:	11 05       	cpc	r17, r1
    29e4:	79 f7       	brne	.-34     	; 0x29c4 <vfprintf+0x1ac>
    29e6:	ea c0       	rjmp	.+468    	; 0x2bbc <vfprintf+0x3a4>
    29e8:	94 36       	cpi	r25, 0x64	; 100
    29ea:	11 f0       	breq	.+4      	; 0x29f0 <vfprintf+0x1d8>
    29ec:	99 36       	cpi	r25, 0x69	; 105
    29ee:	69 f5       	brne	.+90     	; 0x2a4a <vfprintf+0x232>
    29f0:	f7 fe       	sbrs	r15, 7
    29f2:	08 c0       	rjmp	.+16     	; 0x2a04 <vfprintf+0x1ec>
    29f4:	f5 01       	movw	r30, r10
    29f6:	20 81       	ld	r18, Z
    29f8:	31 81       	ldd	r19, Z+1	; 0x01
    29fa:	42 81       	ldd	r20, Z+2	; 0x02
    29fc:	53 81       	ldd	r21, Z+3	; 0x03
    29fe:	84 e0       	ldi	r24, 0x04	; 4
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0a c0       	rjmp	.+20     	; 0x2a18 <vfprintf+0x200>
    2a04:	f5 01       	movw	r30, r10
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	9c 01       	movw	r18, r24
    2a0c:	44 27       	eor	r20, r20
    2a0e:	37 fd       	sbrc	r19, 7
    2a10:	40 95       	com	r20
    2a12:	54 2f       	mov	r21, r20
    2a14:	82 e0       	ldi	r24, 0x02	; 2
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	a8 0e       	add	r10, r24
    2a1a:	b9 1e       	adc	r11, r25
    2a1c:	9f e6       	ldi	r25, 0x6F	; 111
    2a1e:	f9 22       	and	r15, r25
    2a20:	57 ff       	sbrs	r21, 7
    2a22:	09 c0       	rjmp	.+18     	; 0x2a36 <vfprintf+0x21e>
    2a24:	50 95       	com	r21
    2a26:	40 95       	com	r20
    2a28:	30 95       	com	r19
    2a2a:	21 95       	neg	r18
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a30:	5f 4f       	sbci	r21, 0xFF	; 255
    2a32:	e0 e8       	ldi	r30, 0x80	; 128
    2a34:	fe 2a       	or	r15, r30
    2a36:	ca 01       	movw	r24, r20
    2a38:	b9 01       	movw	r22, r18
    2a3a:	a1 01       	movw	r20, r2
    2a3c:	2a e0       	ldi	r18, 0x0A	; 10
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__ultoa_invert>
    2a44:	d8 2e       	mov	r13, r24
    2a46:	d2 18       	sub	r13, r2
    2a48:	40 c0       	rjmp	.+128    	; 0x2aca <vfprintf+0x2b2>
    2a4a:	95 37       	cpi	r25, 0x75	; 117
    2a4c:	29 f4       	brne	.+10     	; 0x2a58 <vfprintf+0x240>
    2a4e:	1f 2d       	mov	r17, r15
    2a50:	1f 7e       	andi	r17, 0xEF	; 239
    2a52:	2a e0       	ldi	r18, 0x0A	; 10
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	1d c0       	rjmp	.+58     	; 0x2a92 <vfprintf+0x27a>
    2a58:	1f 2d       	mov	r17, r15
    2a5a:	19 7f       	andi	r17, 0xF9	; 249
    2a5c:	9f 36       	cpi	r25, 0x6F	; 111
    2a5e:	61 f0       	breq	.+24     	; 0x2a78 <vfprintf+0x260>
    2a60:	90 37       	cpi	r25, 0x70	; 112
    2a62:	20 f4       	brcc	.+8      	; 0x2a6c <vfprintf+0x254>
    2a64:	98 35       	cpi	r25, 0x58	; 88
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <vfprintf+0x252>
    2a68:	ac c0       	rjmp	.+344    	; 0x2bc2 <vfprintf+0x3aa>
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <vfprintf+0x272>
    2a6c:	90 37       	cpi	r25, 0x70	; 112
    2a6e:	39 f0       	breq	.+14     	; 0x2a7e <vfprintf+0x266>
    2a70:	98 37       	cpi	r25, 0x78	; 120
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <vfprintf+0x25e>
    2a74:	a6 c0       	rjmp	.+332    	; 0x2bc2 <vfprintf+0x3aa>
    2a76:	04 c0       	rjmp	.+8      	; 0x2a80 <vfprintf+0x268>
    2a78:	28 e0       	ldi	r18, 0x08	; 8
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	0a c0       	rjmp	.+20     	; 0x2a92 <vfprintf+0x27a>
    2a7e:	10 61       	ori	r17, 0x10	; 16
    2a80:	14 fd       	sbrc	r17, 4
    2a82:	14 60       	ori	r17, 0x04	; 4
    2a84:	20 e1       	ldi	r18, 0x10	; 16
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	04 c0       	rjmp	.+8      	; 0x2a92 <vfprintf+0x27a>
    2a8a:	14 fd       	sbrc	r17, 4
    2a8c:	16 60       	ori	r17, 0x06	; 6
    2a8e:	20 e1       	ldi	r18, 0x10	; 16
    2a90:	32 e0       	ldi	r19, 0x02	; 2
    2a92:	17 ff       	sbrs	r17, 7
    2a94:	08 c0       	rjmp	.+16     	; 0x2aa6 <vfprintf+0x28e>
    2a96:	f5 01       	movw	r30, r10
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	44 e0       	ldi	r20, 0x04	; 4
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	08 c0       	rjmp	.+16     	; 0x2ab6 <vfprintf+0x29e>
    2aa6:	f5 01       	movw	r30, r10
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	bc 01       	movw	r22, r24
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	42 e0       	ldi	r20, 0x02	; 2
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	a4 0e       	add	r10, r20
    2ab8:	b5 1e       	adc	r11, r21
    2aba:	a1 01       	movw	r20, r2
    2abc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__ultoa_invert>
    2ac0:	d8 2e       	mov	r13, r24
    2ac2:	d2 18       	sub	r13, r2
    2ac4:	8f e7       	ldi	r24, 0x7F	; 127
    2ac6:	f8 2e       	mov	r15, r24
    2ac8:	f1 22       	and	r15, r17
    2aca:	f6 fe       	sbrs	r15, 6
    2acc:	0b c0       	rjmp	.+22     	; 0x2ae4 <vfprintf+0x2cc>
    2ace:	5e ef       	ldi	r21, 0xFE	; 254
    2ad0:	f5 22       	and	r15, r21
    2ad2:	d9 14       	cp	r13, r9
    2ad4:	38 f4       	brcc	.+14     	; 0x2ae4 <vfprintf+0x2cc>
    2ad6:	f4 fe       	sbrs	r15, 4
    2ad8:	07 c0       	rjmp	.+14     	; 0x2ae8 <vfprintf+0x2d0>
    2ada:	f2 fc       	sbrc	r15, 2
    2adc:	05 c0       	rjmp	.+10     	; 0x2ae8 <vfprintf+0x2d0>
    2ade:	8f ee       	ldi	r24, 0xEF	; 239
    2ae0:	f8 22       	and	r15, r24
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <vfprintf+0x2d0>
    2ae4:	1d 2d       	mov	r17, r13
    2ae6:	01 c0       	rjmp	.+2      	; 0x2aea <vfprintf+0x2d2>
    2ae8:	19 2d       	mov	r17, r9
    2aea:	f4 fe       	sbrs	r15, 4
    2aec:	0d c0       	rjmp	.+26     	; 0x2b08 <vfprintf+0x2f0>
    2aee:	fe 01       	movw	r30, r28
    2af0:	ed 0d       	add	r30, r13
    2af2:	f1 1d       	adc	r31, r1
    2af4:	80 81       	ld	r24, Z
    2af6:	80 33       	cpi	r24, 0x30	; 48
    2af8:	19 f4       	brne	.+6      	; 0x2b00 <vfprintf+0x2e8>
    2afa:	99 ee       	ldi	r25, 0xE9	; 233
    2afc:	f9 22       	and	r15, r25
    2afe:	08 c0       	rjmp	.+16     	; 0x2b10 <vfprintf+0x2f8>
    2b00:	1f 5f       	subi	r17, 0xFF	; 255
    2b02:	f2 fe       	sbrs	r15, 2
    2b04:	05 c0       	rjmp	.+10     	; 0x2b10 <vfprintf+0x2f8>
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <vfprintf+0x2f6>
    2b08:	8f 2d       	mov	r24, r15
    2b0a:	86 78       	andi	r24, 0x86	; 134
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <vfprintf+0x2f8>
    2b0e:	1f 5f       	subi	r17, 0xFF	; 255
    2b10:	0f 2d       	mov	r16, r15
    2b12:	f3 fc       	sbrc	r15, 3
    2b14:	14 c0       	rjmp	.+40     	; 0x2b3e <vfprintf+0x326>
    2b16:	f0 fe       	sbrs	r15, 0
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <vfprintf+0x320>
    2b1a:	1e 15       	cp	r17, r14
    2b1c:	10 f0       	brcs	.+4      	; 0x2b22 <vfprintf+0x30a>
    2b1e:	9d 2c       	mov	r9, r13
    2b20:	0b c0       	rjmp	.+22     	; 0x2b38 <vfprintf+0x320>
    2b22:	9d 2c       	mov	r9, r13
    2b24:	9e 0c       	add	r9, r14
    2b26:	91 1a       	sub	r9, r17
    2b28:	1e 2d       	mov	r17, r14
    2b2a:	06 c0       	rjmp	.+12     	; 0x2b38 <vfprintf+0x320>
    2b2c:	80 e2       	ldi	r24, 0x20	; 32
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	b3 01       	movw	r22, r6
    2b32:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    2b36:	1f 5f       	subi	r17, 0xFF	; 255
    2b38:	1e 15       	cp	r17, r14
    2b3a:	c0 f3       	brcs	.-16     	; 0x2b2c <vfprintf+0x314>
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <vfprintf+0x32e>
    2b3e:	1e 15       	cp	r17, r14
    2b40:	10 f4       	brcc	.+4      	; 0x2b46 <vfprintf+0x32e>
    2b42:	e1 1a       	sub	r14, r17
    2b44:	01 c0       	rjmp	.+2      	; 0x2b48 <vfprintf+0x330>
    2b46:	ee 24       	eor	r14, r14
    2b48:	04 ff       	sbrs	r16, 4
    2b4a:	0f c0       	rjmp	.+30     	; 0x2b6a <vfprintf+0x352>
    2b4c:	80 e3       	ldi	r24, 0x30	; 48
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	b3 01       	movw	r22, r6
    2b52:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    2b56:	02 ff       	sbrs	r16, 2
    2b58:	1d c0       	rjmp	.+58     	; 0x2b94 <vfprintf+0x37c>
    2b5a:	01 fd       	sbrc	r16, 1
    2b5c:	03 c0       	rjmp	.+6      	; 0x2b64 <vfprintf+0x34c>
    2b5e:	88 e7       	ldi	r24, 0x78	; 120
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e c0       	rjmp	.+28     	; 0x2b80 <vfprintf+0x368>
    2b64:	88 e5       	ldi	r24, 0x58	; 88
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0b c0       	rjmp	.+22     	; 0x2b80 <vfprintf+0x368>
    2b6a:	80 2f       	mov	r24, r16
    2b6c:	86 78       	andi	r24, 0x86	; 134
    2b6e:	91 f0       	breq	.+36     	; 0x2b94 <vfprintf+0x37c>
    2b70:	01 ff       	sbrs	r16, 1
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <vfprintf+0x360>
    2b74:	8b e2       	ldi	r24, 0x2B	; 43
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <vfprintf+0x362>
    2b78:	80 e2       	ldi	r24, 0x20	; 32
    2b7a:	f7 fc       	sbrc	r15, 7
    2b7c:	8d e2       	ldi	r24, 0x2D	; 45
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	b3 01       	movw	r22, r6
    2b82:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    2b86:	06 c0       	rjmp	.+12     	; 0x2b94 <vfprintf+0x37c>
    2b88:	80 e3       	ldi	r24, 0x30	; 48
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	b3 01       	movw	r22, r6
    2b8e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    2b92:	9a 94       	dec	r9
    2b94:	d9 14       	cp	r13, r9
    2b96:	c0 f3       	brcs	.-16     	; 0x2b88 <vfprintf+0x370>
    2b98:	da 94       	dec	r13
    2b9a:	f1 01       	movw	r30, r2
    2b9c:	ed 0d       	add	r30, r13
    2b9e:	f1 1d       	adc	r31, r1
    2ba0:	80 81       	ld	r24, Z
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	b3 01       	movw	r22, r6
    2ba6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    2baa:	dd 20       	and	r13, r13
    2bac:	a9 f7       	brne	.-22     	; 0x2b98 <vfprintf+0x380>
    2bae:	06 c0       	rjmp	.+12     	; 0x2bbc <vfprintf+0x3a4>
    2bb0:	80 e2       	ldi	r24, 0x20	; 32
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	b3 01       	movw	r22, r6
    2bb6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <fputc>
    2bba:	ea 94       	dec	r14
    2bbc:	ee 20       	and	r14, r14
    2bbe:	c1 f7       	brne	.-16     	; 0x2bb0 <vfprintf+0x398>
    2bc0:	43 ce       	rjmp	.-890    	; 0x2848 <vfprintf+0x30>
    2bc2:	f3 01       	movw	r30, r6
    2bc4:	66 81       	ldd	r22, Z+6	; 0x06
    2bc6:	77 81       	ldd	r23, Z+7	; 0x07
    2bc8:	cb 01       	movw	r24, r22
    2bca:	2b 96       	adiw	r28, 0x0b	; 11
    2bcc:	e2 e1       	ldi	r30, 0x12	; 18
    2bce:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__>

00002bd2 <strnlen_P>:
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	05 90       	lpm	r0, Z+
    2bd6:	61 50       	subi	r22, 0x01	; 1
    2bd8:	70 40       	sbci	r23, 0x00	; 0
    2bda:	01 10       	cpse	r0, r1
    2bdc:	d8 f7       	brcc	.-10     	; 0x2bd4 <strnlen_P+0x2>
    2bde:	80 95       	com	r24
    2be0:	90 95       	com	r25
    2be2:	8e 0f       	add	r24, r30
    2be4:	9f 1f       	adc	r25, r31
    2be6:	08 95       	ret

00002be8 <strnlen>:
    2be8:	fc 01       	movw	r30, r24
    2bea:	61 50       	subi	r22, 0x01	; 1
    2bec:	70 40       	sbci	r23, 0x00	; 0
    2bee:	01 90       	ld	r0, Z+
    2bf0:	01 10       	cpse	r0, r1
    2bf2:	d8 f7       	brcc	.-10     	; 0x2bea <strnlen+0x2>
    2bf4:	80 95       	com	r24
    2bf6:	90 95       	com	r25
    2bf8:	8e 0f       	add	r24, r30
    2bfa:	9f 1f       	adc	r25, r31
    2bfc:	08 95       	ret

00002bfe <strrev>:
    2bfe:	dc 01       	movw	r26, r24
    2c00:	fc 01       	movw	r30, r24
    2c02:	67 2f       	mov	r22, r23
    2c04:	71 91       	ld	r23, Z+
    2c06:	77 23       	and	r23, r23
    2c08:	e1 f7       	brne	.-8      	; 0x2c02 <strrev+0x4>
    2c0a:	32 97       	sbiw	r30, 0x02	; 2
    2c0c:	04 c0       	rjmp	.+8      	; 0x2c16 <strrev+0x18>
    2c0e:	7c 91       	ld	r23, X
    2c10:	6d 93       	st	X+, r22
    2c12:	70 83       	st	Z, r23
    2c14:	62 91       	ld	r22, -Z
    2c16:	ae 17       	cp	r26, r30
    2c18:	bf 07       	cpc	r27, r31
    2c1a:	c8 f3       	brcs	.-14     	; 0x2c0e <strrev+0x10>
    2c1c:	08 95       	ret

00002c1e <fputc>:
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	8c 01       	movw	r16, r24
    2c28:	eb 01       	movw	r28, r22
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	81 ff       	sbrs	r24, 1
    2c2e:	1b c0       	rjmp	.+54     	; 0x2c66 <fputc+0x48>
    2c30:	82 ff       	sbrs	r24, 2
    2c32:	0d c0       	rjmp	.+26     	; 0x2c4e <fputc+0x30>
    2c34:	2e 81       	ldd	r18, Y+6	; 0x06
    2c36:	3f 81       	ldd	r19, Y+7	; 0x07
    2c38:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3c:	28 17       	cp	r18, r24
    2c3e:	39 07       	cpc	r19, r25
    2c40:	64 f4       	brge	.+24     	; 0x2c5a <fputc+0x3c>
    2c42:	e8 81       	ld	r30, Y
    2c44:	f9 81       	ldd	r31, Y+1	; 0x01
    2c46:	01 93       	st	Z+, r16
    2c48:	f9 83       	std	Y+1, r31	; 0x01
    2c4a:	e8 83       	st	Y, r30
    2c4c:	06 c0       	rjmp	.+12     	; 0x2c5a <fputc+0x3c>
    2c4e:	e8 85       	ldd	r30, Y+8	; 0x08
    2c50:	f9 85       	ldd	r31, Y+9	; 0x09
    2c52:	80 2f       	mov	r24, r16
    2c54:	09 95       	icall
    2c56:	89 2b       	or	r24, r25
    2c58:	31 f4       	brne	.+12     	; 0x2c66 <fputc+0x48>
    2c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	9f 83       	std	Y+7, r25	; 0x07
    2c62:	8e 83       	std	Y+6, r24	; 0x06
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <fputc+0x4c>
    2c66:	0f ef       	ldi	r16, 0xFF	; 255
    2c68:	1f ef       	ldi	r17, 0xFF	; 255
    2c6a:	c8 01       	movw	r24, r16
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	08 95       	ret

00002c76 <__ultoa_invert>:
    2c76:	fa 01       	movw	r30, r20
    2c78:	aa 27       	eor	r26, r26
    2c7a:	28 30       	cpi	r18, 0x08	; 8
    2c7c:	51 f1       	breq	.+84     	; 0x2cd2 <__ultoa_invert+0x5c>
    2c7e:	20 31       	cpi	r18, 0x10	; 16
    2c80:	81 f1       	breq	.+96     	; 0x2ce2 <__ultoa_invert+0x6c>
    2c82:	e8 94       	clt
    2c84:	6f 93       	push	r22
    2c86:	6e 7f       	andi	r22, 0xFE	; 254
    2c88:	6e 5f       	subi	r22, 0xFE	; 254
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c90:	af 4f       	sbci	r26, 0xFF	; 255
    2c92:	b1 e0       	ldi	r27, 0x01	; 1
    2c94:	3e d0       	rcall	.+124    	; 0x2d12 <__ultoa_invert+0x9c>
    2c96:	b4 e0       	ldi	r27, 0x04	; 4
    2c98:	3c d0       	rcall	.+120    	; 0x2d12 <__ultoa_invert+0x9c>
    2c9a:	67 0f       	add	r22, r23
    2c9c:	78 1f       	adc	r23, r24
    2c9e:	89 1f       	adc	r24, r25
    2ca0:	9a 1f       	adc	r25, r26
    2ca2:	a1 1d       	adc	r26, r1
    2ca4:	68 0f       	add	r22, r24
    2ca6:	79 1f       	adc	r23, r25
    2ca8:	8a 1f       	adc	r24, r26
    2caa:	91 1d       	adc	r25, r1
    2cac:	a1 1d       	adc	r26, r1
    2cae:	6a 0f       	add	r22, r26
    2cb0:	71 1d       	adc	r23, r1
    2cb2:	81 1d       	adc	r24, r1
    2cb4:	91 1d       	adc	r25, r1
    2cb6:	a1 1d       	adc	r26, r1
    2cb8:	20 d0       	rcall	.+64     	; 0x2cfa <__ultoa_invert+0x84>
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <__ultoa_invert+0x48>
    2cbc:	68 94       	set
    2cbe:	3f 91       	pop	r19
    2cc0:	2a e0       	ldi	r18, 0x0A	; 10
    2cc2:	26 9f       	mul	r18, r22
    2cc4:	11 24       	eor	r1, r1
    2cc6:	30 19       	sub	r19, r0
    2cc8:	30 5d       	subi	r19, 0xD0	; 208
    2cca:	31 93       	st	Z+, r19
    2ccc:	de f6       	brtc	.-74     	; 0x2c84 <__ultoa_invert+0xe>
    2cce:	cf 01       	movw	r24, r30
    2cd0:	08 95       	ret
    2cd2:	46 2f       	mov	r20, r22
    2cd4:	47 70       	andi	r20, 0x07	; 7
    2cd6:	40 5d       	subi	r20, 0xD0	; 208
    2cd8:	41 93       	st	Z+, r20
    2cda:	b3 e0       	ldi	r27, 0x03	; 3
    2cdc:	0f d0       	rcall	.+30     	; 0x2cfc <__ultoa_invert+0x86>
    2cde:	c9 f7       	brne	.-14     	; 0x2cd2 <__ultoa_invert+0x5c>
    2ce0:	f6 cf       	rjmp	.-20     	; 0x2cce <__ultoa_invert+0x58>
    2ce2:	46 2f       	mov	r20, r22
    2ce4:	4f 70       	andi	r20, 0x0F	; 15
    2ce6:	40 5d       	subi	r20, 0xD0	; 208
    2ce8:	4a 33       	cpi	r20, 0x3A	; 58
    2cea:	18 f0       	brcs	.+6      	; 0x2cf2 <__ultoa_invert+0x7c>
    2cec:	49 5d       	subi	r20, 0xD9	; 217
    2cee:	31 fd       	sbrc	r19, 1
    2cf0:	40 52       	subi	r20, 0x20	; 32
    2cf2:	41 93       	st	Z+, r20
    2cf4:	02 d0       	rcall	.+4      	; 0x2cfa <__ultoa_invert+0x84>
    2cf6:	a9 f7       	brne	.-22     	; 0x2ce2 <__ultoa_invert+0x6c>
    2cf8:	ea cf       	rjmp	.-44     	; 0x2cce <__ultoa_invert+0x58>
    2cfa:	b4 e0       	ldi	r27, 0x04	; 4
    2cfc:	a6 95       	lsr	r26
    2cfe:	97 95       	ror	r25
    2d00:	87 95       	ror	r24
    2d02:	77 95       	ror	r23
    2d04:	67 95       	ror	r22
    2d06:	ba 95       	dec	r27
    2d08:	c9 f7       	brne	.-14     	; 0x2cfc <__ultoa_invert+0x86>
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	61 05       	cpc	r22, r1
    2d0e:	71 05       	cpc	r23, r1
    2d10:	08 95       	ret
    2d12:	9b 01       	movw	r18, r22
    2d14:	ac 01       	movw	r20, r24
    2d16:	0a 2e       	mov	r0, r26
    2d18:	06 94       	lsr	r0
    2d1a:	57 95       	ror	r21
    2d1c:	47 95       	ror	r20
    2d1e:	37 95       	ror	r19
    2d20:	27 95       	ror	r18
    2d22:	ba 95       	dec	r27
    2d24:	c9 f7       	brne	.-14     	; 0x2d18 <__ultoa_invert+0xa2>
    2d26:	62 0f       	add	r22, r18
    2d28:	73 1f       	adc	r23, r19
    2d2a:	84 1f       	adc	r24, r20
    2d2c:	95 1f       	adc	r25, r21
    2d2e:	a0 1d       	adc	r26, r0
    2d30:	08 95       	ret

00002d32 <__udivmodhi4>:
    2d32:	aa 1b       	sub	r26, r26
    2d34:	bb 1b       	sub	r27, r27
    2d36:	51 e1       	ldi	r21, 0x11	; 17
    2d38:	07 c0       	rjmp	.+14     	; 0x2d48 <__udivmodhi4_ep>

00002d3a <__udivmodhi4_loop>:
    2d3a:	aa 1f       	adc	r26, r26
    2d3c:	bb 1f       	adc	r27, r27
    2d3e:	a6 17       	cp	r26, r22
    2d40:	b7 07       	cpc	r27, r23
    2d42:	10 f0       	brcs	.+4      	; 0x2d48 <__udivmodhi4_ep>
    2d44:	a6 1b       	sub	r26, r22
    2d46:	b7 0b       	sbc	r27, r23

00002d48 <__udivmodhi4_ep>:
    2d48:	88 1f       	adc	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	5a 95       	dec	r21
    2d4e:	a9 f7       	brne	.-22     	; 0x2d3a <__udivmodhi4_loop>
    2d50:	80 95       	com	r24
    2d52:	90 95       	com	r25
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	08 95       	ret

00002d5a <_exit>:
    2d5a:	f8 94       	cli

00002d5c <__stop_program>:
    2d5c:	ff cf       	rjmp	.-2      	; 0x2d5c <__stop_program>
