
task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002ac8  00002b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  00002b74  2**0
                  ALLOC
  3 .stab         00002bb0  00000000  00000000  00002b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bb0  00000000  00000000  00005724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b255  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <main>
      8a:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer0_init>:
#define Clear_Bit(REG,BIT) (REG &= (~(1<<BIT)))
#define Set_Bit(REG,BIT) (REG |= (1<<BIT))

static void(*call_back)(void);

void timer0_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
		// FAST PWM
        Set_Bit(TCCR0,WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
        Set_Bit(TCCR0,WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
        //preload
        TCNT0 = 0;
     b6a:	e2 e5       	ldi	r30, 0x52	; 82
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
        //clock source prescalar 64 edit it
        Set_Bit(TCCR0,CS00);
     b70:	a3 e5       	ldi	r26, 0x53	; 83
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e3 e5       	ldi	r30, 0x53	; 83
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	8c 93       	st	X, r24
        Set_Bit(TCCR0,CS01);
     b7e:	a3 e5       	ldi	r26, 0x53	; 83
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e3 e5       	ldi	r30, 0x53	; 83
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	8c 93       	st	X, r24
        Clear_Bit(TCCR0,CS02);
     b8c:	a3 e5       	ldi	r26, 0x53	; 83
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e3 e5       	ldi	r30, 0x53	; 83
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8b 7f       	andi	r24, 0xFB	; 251
     b98:	8c 93       	st	X, r24

        // nin inverting
        // Set_Bit(TCCR0,COM00);
        Set_Bit(TCCR0,COM01);
     b9a:	a3 e5       	ldi	r26, 0x53	; 83
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e3 e5       	ldi	r30, 0x53	; 83
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 62       	ori	r24, 0x20	; 32
     ba6:	8c 93       	st	X, r24
        //enable 
        Set_Bit(TIMSK, OCIE0); // OUTPUT COMPARE INTERRUPT
     ba8:	a9 e5       	ldi	r26, 0x59	; 89
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e9 e5       	ldi	r30, 0x59	; 89
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	8c 93       	st	X, r24

        OCR0 = 125; // FOR 1 MS SEC comp value
     bb6:	ec e5       	ldi	r30, 0x5C	; 92
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	8d e7       	ldi	r24, 0x7D	; 125
     bbc:	80 83       	st	Z, r24
        // DO NOTHING on compare
        Clear_Bit(TCCR0,COM00);
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
     bca:	8c 93       	st	X, r24
        Clear_Bit(TCCR0,COM01);
     bcc:	a3 e5       	ldi	r26, 0x53	; 83
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e3 e5       	ldi	r30, 0x53	; 83
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	8c 93       	st	X, r24

}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <timer0_deinit>:

void timer0_deinit(){
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
    // NO CLK SOURCE
    Clear_Bit(TCCR0,CS00);
     be8:	a3 e5       	ldi	r26, 0x53	; 83
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e3 e5       	ldi	r30, 0x53	; 83
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	8c 93       	st	X, r24
    Clear_Bit(TCCR0,CS01);
     bf6:	a3 e5       	ldi	r26, 0x53	; 83
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e3 e5       	ldi	r30, 0x53	; 83
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8d 7f       	andi	r24, 0xFD	; 253
     c02:	8c 93       	st	X, r24
    Clear_Bit(TCCR0,CS02);
     c04:	a3 e5       	ldi	r26, 0x53	; 83
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e3 e5       	ldi	r30, 0x53	; 83
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	8c 93       	st	X, r24
    // CLEAR INT
    Clear_Bit(TIMSK,TOIE0);
     c12:	a9 e5       	ldi	r26, 0x59	; 89
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e9 e5       	ldi	r30, 0x59	; 89
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	8c 93       	st	X, r24
}
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <timer0_set_callback>:

void timer0_set_callback(void(*fun_prt)(void)){
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <timer0_set_callback+0x6>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
    call_back = fun_prt;
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	90 93 79 00 	sts	0x0079, r25
     c3c:	80 93 78 00 	sts	0x0078, r24
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <timer1_init>:

void timer1_init(){ // for servo
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
        // TCCR1A = (1<<WGM11)|(1<<COM1A1);
	    // TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);

        Set_Bit(TCCR1A,COM1A1);
     c52:	af e4       	ldi	r26, 0x4F	; 79
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ef e4       	ldi	r30, 0x4F	; 79
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	8c 93       	st	X, r24
        Set_Bit(TCCR1A,WGM11);
     c60:	af e4       	ldi	r26, 0x4F	; 79
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ef e4       	ldi	r30, 0x4F	; 79
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	82 60       	ori	r24, 0x02	; 2
     c6c:	8c 93       	st	X, r24

        Set_Bit(TCCR1B,WGM12);
     c6e:	ae e4       	ldi	r26, 0x4E	; 78
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ee e4       	ldi	r30, 0x4E	; 78
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	88 60       	ori	r24, 0x08	; 8
     c7a:	8c 93       	st	X, r24
        Set_Bit(TCCR1B,WGM13);
     c7c:	ae e4       	ldi	r26, 0x4E	; 78
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	ee e4       	ldi	r30, 0x4E	; 78
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	80 61       	ori	r24, 0x10	; 16
     c88:	8c 93       	st	X, r24

        // ICU HIGH
        // Set_Bit(TCCR1B,ICES1);
        
        TCNT1 = 0;		/* Set timer1 count zero */
     c8a:	ec e4       	ldi	r30, 0x4C	; 76
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	11 82       	std	Z+1, r1	; 0x01
     c90:	10 82       	st	Z, r1
        ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
     c92:	e6 e4       	ldi	r30, 0x46	; 70
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	83 ec       	ldi	r24, 0xC3	; 195
     c98:	99 e0       	ldi	r25, 0x09	; 9
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24

        //clock source prescalar 64
        Set_Bit(TCCR1B,CS10);
     c9e:	ae e4       	ldi	r26, 0x4E	; 78
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ee e4       	ldi	r30, 0x4E	; 78
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
        Set_Bit(TCCR1B,CS11);
     cac:	ae e4       	ldi	r26, 0x4E	; 78
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ee e4       	ldi	r30, 0x4E	; 78
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	82 60       	ori	r24, 0x02	; 2
     cb8:	8c 93       	st	X, r24
}
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <timer1_deinit>:

void timer1_deinit(){
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
    // NO CLK SOURCE
    Clear_Bit(TCCR1B,CS00);
     cc8:	ae e4       	ldi	r26, 0x4E	; 78
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ee e4       	ldi	r30, 0x4E	; 78
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8e 7f       	andi	r24, 0xFE	; 254
     cd4:	8c 93       	st	X, r24
    Clear_Bit(TCCR1B,CS01);
     cd6:	ae e4       	ldi	r26, 0x4E	; 78
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	ee e4       	ldi	r30, 0x4E	; 78
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8d 7f       	andi	r24, 0xFD	; 253
     ce2:	8c 93       	st	X, r24
    Clear_Bit(TCCR1B,CS02);
     ce4:	ae e4       	ldi	r26, 0x4E	; 78
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ee e4       	ldi	r30, 0x4E	; 78
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8b 7f       	andi	r24, 0xFB	; 251
     cf0:	8c 93       	st	X, r24
    // CLEAR INT
    Clear_Bit(TIMSK,TOIE0);
     cf2:	a9 e5       	ldi	r26, 0x59	; 89
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e9 e5       	ldi	r30, 0x59	; 89
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8e 7f       	andi	r24, 0xFE	; 254
     cfe:	8c 93       	st	X, r24
}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <timer2_init>:

void timer2_init(){
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
        // FAST PWM
        Set_Bit(TCCR2,WGM20);
     d0e:	a5 e4       	ldi	r26, 0x45	; 69
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e5 e4       	ldi	r30, 0x45	; 69
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
        Set_Bit(TCCR2,WGM21);
     d1c:	a5 e4       	ldi	r26, 0x45	; 69
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e5 e4       	ldi	r30, 0x45	; 69
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	88 60       	ori	r24, 0x08	; 8
     d28:	8c 93       	st	X, r24
        
        

        //Clear on compare
        Set_Bit(TCCR2,COM21);
     d2a:	a5 e4       	ldi	r26, 0x45	; 69
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e5 e4       	ldi	r30, 0x45	; 69
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 62       	ori	r24, 0x20	; 32
     d36:	8c 93       	st	X, r24

        //clock source prescalar no
        Set_Bit(TCCR2,CS20);
     d38:	a5 e4       	ldi	r26, 0x45	; 69
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e5 e4       	ldi	r30, 0x45	; 69
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	81 60       	ori	r24, 0x01	; 1
     d44:	8c 93       	st	X, r24
        Clear_Bit(TCCR2,CS21);
     d46:	a5 e4       	ldi	r26, 0x45	; 69
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e4       	ldi	r30, 0x45	; 69
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8d 7f       	andi	r24, 0xFD	; 253
     d52:	8c 93       	st	X, r24
        Clear_Bit(TCCR2,CS22);
     d54:	a5 e4       	ldi	r26, 0x45	; 69
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e4       	ldi	r30, 0x45	; 69
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	8c 93       	st	X, r24

}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <servo_init>:
#include "..\dio\dio.h"
#include "C:\Users\Administrator\Desktop\ES ITI\project\pro22\MCAL\timer\timer.h"
#include"../keypad_new/KPD_interface.h"
#include"../lcd/lcd.h"

void servo_init(){
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
    dio_set_direction(DIOD, DIO_PIN5, DIO_DIRECTION_OUTPUT);
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	65 e0       	ldi	r22, 0x05	; 5
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	0e 94 14 11 	call	0x2228	; 0x2228 <dio_set_direction>
}
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <servo_cnt>:
void servo_cnt(uint8_t position){
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	ab 97       	sbiw	r28, 0x2b	; 43
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	8b a7       	std	Y+43, r24	; 0x2b
    if(position == 85){
     d96:	8b a5       	ldd	r24, Y+43	; 0x2b
     d98:	85 35       	cpi	r24, 0x55	; 85
     d9a:	09 f0       	breq	.+2      	; 0xd9e <servo_cnt+0x1e>
     d9c:	7b c0       	rjmp	.+246    	; 0xe94 <servo_cnt+0x114>
        timer1_init();
     d9e:	0e 94 25 06 	call	0xc4a	; 0xc4a <timer1_init>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	aa ef       	ldi	r26, 0xFA	; 250
     da8:	b3 e4       	ldi	r27, 0x43	; 67
     daa:	8f a3       	std	Y+39, r24	; 0x27
     dac:	98 a7       	std	Y+40, r25	; 0x28
     dae:	a9 a7       	std	Y+41, r26	; 0x29
     db0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db2:	6f a1       	ldd	r22, Y+39	; 0x27
     db4:	78 a5       	ldd	r23, Y+40	; 0x28
     db6:	89 a5       	ldd	r24, Y+41	; 0x29
     db8:	9a a5       	ldd	r25, Y+42	; 0x2a
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a ef       	ldi	r20, 0xFA	; 250
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	8b a3       	std	Y+35, r24	; 0x23
     dcc:	9c a3       	std	Y+36, r25	; 0x24
     dce:	ad a3       	std	Y+37, r26	; 0x25
     dd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dd2:	6b a1       	ldd	r22, Y+35	; 0x23
     dd4:	7c a1       	ldd	r23, Y+36	; 0x24
     dd6:	8d a1       	ldd	r24, Y+37	; 0x25
     dd8:	9e a1       	ldd	r25, Y+38	; 0x26
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e8       	ldi	r20, 0x80	; 128
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de6:	88 23       	and	r24, r24
     de8:	2c f4       	brge	.+10     	; 0xdf4 <servo_cnt+0x74>
		__ticks = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9a a3       	std	Y+34, r25	; 0x22
     df0:	89 a3       	std	Y+33, r24	; 0x21
     df2:	3f c0       	rjmp	.+126    	; 0xe72 <servo_cnt+0xf2>
	else if (__tmp > 65535)
     df4:	6b a1       	ldd	r22, Y+35	; 0x23
     df6:	7c a1       	ldd	r23, Y+36	; 0x24
     df8:	8d a1       	ldd	r24, Y+37	; 0x25
     dfa:	9e a1       	ldd	r25, Y+38	; 0x26
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	4c f5       	brge	.+82     	; 0xe5e <servo_cnt+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0c:	6f a1       	ldd	r22, Y+39	; 0x27
     e0e:	78 a5       	ldd	r23, Y+40	; 0x28
     e10:	89 a5       	ldd	r24, Y+41	; 0x29
     e12:	9a a5       	ldd	r25, Y+42	; 0x2a
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e2       	ldi	r20, 0x20	; 32
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	9a a3       	std	Y+34, r25	; 0x22
     e32:	89 a3       	std	Y+33, r24	; 0x21
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <servo_cnt+0xd4>
     e36:	88 ec       	ldi	r24, 0xC8	; 200
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	98 a3       	std	Y+32, r25	; 0x20
     e3c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e40:	98 a1       	ldd	r25, Y+32	; 0x20
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <servo_cnt+0xc2>
     e46:	98 a3       	std	Y+32, r25	; 0x20
     e48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4a:	89 a1       	ldd	r24, Y+33	; 0x21
     e4c:	9a a1       	ldd	r25, Y+34	; 0x22
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9a a3       	std	Y+34, r25	; 0x22
     e52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	89 a1       	ldd	r24, Y+33	; 0x21
     e56:	9a a1       	ldd	r25, Y+34	; 0x22
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	69 f7       	brne	.-38     	; 0xe36 <servo_cnt+0xb6>
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <servo_cnt+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5e:	6b a1       	ldd	r22, Y+35	; 0x23
     e60:	7c a1       	ldd	r23, Y+36	; 0x24
     e62:	8d a1       	ldd	r24, Y+37	; 0x25
     e64:	9e a1       	ldd	r25, Y+38	; 0x26
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9a a3       	std	Y+34, r25	; 0x22
     e70:	89 a3       	std	Y+33, r24	; 0x21
     e72:	89 a1       	ldd	r24, Y+33	; 0x21
     e74:	9a a1       	ldd	r25, Y+34	; 0x22
     e76:	9e 8f       	std	Y+30, r25	; 0x1e
     e78:	8d 8f       	std	Y+29, r24	; 0x1d
     e7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <servo_cnt+0xfe>
     e82:	9e 8f       	std	Y+30, r25	; 0x1e
     e84:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(500);
        OCR1A = 65;	/* Set servo shaft at -90° position */
     e86:	ea e4       	ldi	r30, 0x4A	; 74
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	81 e4       	ldi	r24, 0x41	; 65
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
     e92:	f4 c0       	rjmp	.+488    	; 0x107c <servo_cnt+0x2fc>
    }
    else if(position == 199){
     e94:	8b a5       	ldd	r24, Y+43	; 0x2b
     e96:	87 3c       	cpi	r24, 0xC7	; 199
     e98:	09 f0       	breq	.+2      	; 0xe9c <servo_cnt+0x11c>
     e9a:	f0 c0       	rjmp	.+480    	; 0x107c <servo_cnt+0x2fc>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	aa ef       	ldi	r26, 0xFA	; 250
     ea2:	b3 e4       	ldi	r27, 0x43	; 67
     ea4:	89 8f       	std	Y+25, r24	; 0x19
     ea6:	9a 8f       	std	Y+26, r25	; 0x1a
     ea8:	ab 8f       	std	Y+27, r26	; 0x1b
     eaa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	69 8d       	ldd	r22, Y+25	; 0x19
     eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a ef       	ldi	r20, 0xFA	; 250
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8d 8b       	std	Y+21, r24	; 0x15
     ec6:	9e 8b       	std	Y+22, r25	; 0x16
     ec8:	af 8b       	std	Y+23, r26	; 0x17
     eca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ecc:	6d 89       	ldd	r22, Y+21	; 0x15
     ece:	7e 89       	ldd	r23, Y+22	; 0x16
     ed0:	8f 89       	ldd	r24, Y+23	; 0x17
     ed2:	98 8d       	ldd	r25, Y+24	; 0x18
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <servo_cnt+0x16e>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 8b       	std	Y+20, r25	; 0x14
     eea:	8b 8b       	std	Y+19, r24	; 0x13
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <servo_cnt+0x1ec>
	else if (__tmp > 65535)
     eee:	6d 89       	ldd	r22, Y+21	; 0x15
     ef0:	7e 89       	ldd	r23, Y+22	; 0x16
     ef2:	8f 89       	ldd	r24, Y+23	; 0x17
     ef4:	98 8d       	ldd	r25, Y+24	; 0x18
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <servo_cnt+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	69 8d       	ldd	r22, Y+25	; 0x19
     f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9c 8b       	std	Y+20, r25	; 0x14
     f2c:	8b 8b       	std	Y+19, r24	; 0x13
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <servo_cnt+0x1ce>
     f30:	88 ec       	ldi	r24, 0xC8	; 200
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9a 8b       	std	Y+18, r25	; 0x12
     f36:	89 8b       	std	Y+17, r24	; 0x11
     f38:	89 89       	ldd	r24, Y+17	; 0x11
     f3a:	9a 89       	ldd	r25, Y+18	; 0x12
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <servo_cnt+0x1bc>
     f40:	9a 8b       	std	Y+18, r25	; 0x12
     f42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	8b 89       	ldd	r24, Y+19	; 0x13
     f46:	9c 89       	ldd	r25, Y+20	; 0x14
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9c 8b       	std	Y+20, r25	; 0x14
     f4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	8b 89       	ldd	r24, Y+19	; 0x13
     f50:	9c 89       	ldd	r25, Y+20	; 0x14
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <servo_cnt+0x1b0>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <servo_cnt+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6d 89       	ldd	r22, Y+21	; 0x15
     f5a:	7e 89       	ldd	r23, Y+22	; 0x16
     f5c:	8f 89       	ldd	r24, Y+23	; 0x17
     f5e:	98 8d       	ldd	r25, Y+24	; 0x18
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9c 8b       	std	Y+20, r25	; 0x14
     f6a:	8b 8b       	std	Y+19, r24	; 0x13
     f6c:	8b 89       	ldd	r24, Y+19	; 0x13
     f6e:	9c 89       	ldd	r25, Y+20	; 0x14
     f70:	98 8b       	std	Y+16, r25	; 0x10
     f72:	8f 87       	std	Y+15, r24	; 0x0f
     f74:	8f 85       	ldd	r24, Y+15	; 0x0f
     f76:	98 89       	ldd	r25, Y+16	; 0x10
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <servo_cnt+0x1f8>
     f7c:	98 8b       	std	Y+16, r25	; 0x10
     f7e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);
		OCR1A = 175;	/* Set servo shaft at 0° position */
     f80:	ea e4       	ldi	r30, 0x4A	; 74
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	8f ea       	ldi	r24, 0xAF	; 175
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	aa ef       	ldi	r26, 0xFA	; 250
     f92:	b3 e4       	ldi	r27, 0x43	; 67
     f94:	8b 87       	std	Y+11, r24	; 0x0b
     f96:	9c 87       	std	Y+12, r25	; 0x0c
     f98:	ad 87       	std	Y+13, r26	; 0x0d
     f9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a ef       	ldi	r20, 0xFA	; 250
     faa:	54 e4       	ldi	r21, 0x44	; 68
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8f 83       	std	Y+7, r24	; 0x07
     fb6:	98 87       	std	Y+8, r25	; 0x08
     fb8:	a9 87       	std	Y+9, r26	; 0x09
     fba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fbc:	6f 81       	ldd	r22, Y+7	; 0x07
     fbe:	78 85       	ldd	r23, Y+8	; 0x08
     fc0:	89 85       	ldd	r24, Y+9	; 0x09
     fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd0:	88 23       	and	r24, r24
     fd2:	2c f4       	brge	.+10     	; 0xfde <servo_cnt+0x25e>
		__ticks = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	8d 83       	std	Y+5, r24	; 0x05
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <servo_cnt+0x2dc>
	else if (__tmp > 65535)
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	4c f5       	brge	.+82     	; 0x1048 <servo_cnt+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	0f c0       	rjmp	.+30     	; 0x103e <servo_cnt+0x2be>
    1020:	88 ec       	ldi	r24, 0xC8	; 200
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <servo_cnt+0x2ac>
    1030:	9c 83       	std	Y+4, r25	; 0x04
    1032:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	69 f7       	brne	.-38     	; 0x1020 <servo_cnt+0x2a0>
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <servo_cnt+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <servo_cnt+0x2e8>
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        OCR1A = 300;	/* Set servo at +90° position */
    1070:	ea e4       	ldi	r30, 0x4A	; 74
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8c e2       	ldi	r24, 0x2C	; 44
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
    }
}
    107c:	ab 96       	adiw	r28, 0x2b	; 43
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <LCD_Init>:
#include"lcd.h"
#include"..\dio\dio.h"


void LCD_Init()
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	LCD_Data_Dir = 0xFF;
    1096:	e7 e3       	ldi	r30, 0x37	; 55
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	80 83       	st	Z, r24
	LCD_Ctrl_Dir |= (1<<E) | (1<<W) | (1<<RS);
    109e:	a1 e3       	ldi	r26, 0x31	; 49
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	87 60       	ori	r24, 0x07	; 7
    10aa:	8c 93       	st	X, r24
	LCD_SendCommand(Eight_Bit_Mode);
    10ac:	88 e3       	ldi	r24, 0x38	; 56
    10ae:	0e 94 62 08 	call	0x10c4	; 0x10c4 <LCD_SendCommand>
	LCD_SendCommand(CURSOR_OFF);
    10b2:	8c e0       	ldi	r24, 0x0C	; 12
    10b4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <LCD_SendCommand>
	LCD_SendCommand(CLEAR_COMMAND);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 62 08 	call	0x10c4	; 0x10c4 <LCD_SendCommand>
}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t data)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	e9 97       	sbiw	r28, 0x39	; 57
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	89 af       	std	Y+57, r24	; 0x39
	Clear_Bit(LCD_Ctrl_Out,RS);
    10da:	a2 e3       	ldi	r26, 0x32	; 50
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e2 e3       	ldi	r30, 0x32	; 50
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8e 7f       	andi	r24, 0xFE	; 254
    10e6:	8c 93       	st	X, r24
	Clear_Bit(LCD_Ctrl_Out,W);
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8b 7f       	andi	r24, 0xFB	; 251
    10f4:	8c 93       	st	X, r24
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a0 e8       	ldi	r26, 0x80	; 128
    10fc:	bf e3       	ldi	r27, 0x3F	; 63
    10fe:	8d ab       	std	Y+53, r24	; 0x35
    1100:	9e ab       	std	Y+54, r25	; 0x36
    1102:	af ab       	std	Y+55, r26	; 0x37
    1104:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1106:	6d a9       	ldd	r22, Y+53	; 0x35
    1108:	7e a9       	ldd	r23, Y+54	; 0x36
    110a:	8f a9       	ldd	r24, Y+55	; 0x37
    110c:	98 ad       	ldd	r25, Y+56	; 0x38
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	4a ef       	ldi	r20, 0xFA	; 250
    1114:	54 e4       	ldi	r21, 0x44	; 68
    1116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	89 ab       	std	Y+49, r24	; 0x31
    1120:	9a ab       	std	Y+50, r25	; 0x32
    1122:	ab ab       	std	Y+51, r26	; 0x33
    1124:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1126:	69 a9       	ldd	r22, Y+49	; 0x31
    1128:	7a a9       	ldd	r23, Y+50	; 0x32
    112a:	8b a9       	ldd	r24, Y+51	; 0x33
    112c:	9c a9       	ldd	r25, Y+52	; 0x34
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e8       	ldi	r20, 0x80	; 128
    1134:	5f e3       	ldi	r21, 0x3F	; 63
    1136:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113a:	88 23       	and	r24, r24
    113c:	2c f4       	brge	.+10     	; 0x1148 <LCD_SendCommand+0x84>
		__ticks = 1;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	98 ab       	std	Y+48, r25	; 0x30
    1144:	8f a7       	std	Y+47, r24	; 0x2f
    1146:	3f c0       	rjmp	.+126    	; 0x11c6 <LCD_SendCommand+0x102>
	else if (__tmp > 65535)
    1148:	69 a9       	ldd	r22, Y+49	; 0x31
    114a:	7a a9       	ldd	r23, Y+50	; 0x32
    114c:	8b a9       	ldd	r24, Y+51	; 0x33
    114e:	9c a9       	ldd	r25, Y+52	; 0x34
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	3f ef       	ldi	r19, 0xFF	; 255
    1154:	4f e7       	ldi	r20, 0x7F	; 127
    1156:	57 e4       	ldi	r21, 0x47	; 71
    1158:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115c:	18 16       	cp	r1, r24
    115e:	4c f5       	brge	.+82     	; 0x11b2 <LCD_SendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1160:	6d a9       	ldd	r22, Y+53	; 0x35
    1162:	7e a9       	ldd	r23, Y+54	; 0x36
    1164:	8f a9       	ldd	r24, Y+55	; 0x37
    1166:	98 ad       	ldd	r25, Y+56	; 0x38
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e2       	ldi	r20, 0x20	; 32
    116e:	51 e4       	ldi	r21, 0x41	; 65
    1170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	98 ab       	std	Y+48, r25	; 0x30
    1186:	8f a7       	std	Y+47, r24	; 0x2f
    1188:	0f c0       	rjmp	.+30     	; 0x11a8 <LCD_SendCommand+0xe4>
    118a:	88 ec       	ldi	r24, 0xC8	; 200
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	9e a7       	std	Y+46, r25	; 0x2e
    1190:	8d a7       	std	Y+45, r24	; 0x2d
    1192:	8d a5       	ldd	r24, Y+45	; 0x2d
    1194:	9e a5       	ldd	r25, Y+46	; 0x2e
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <LCD_SendCommand+0xd2>
    119a:	9e a7       	std	Y+46, r25	; 0x2e
    119c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119e:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a0:	98 a9       	ldd	r25, Y+48	; 0x30
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	98 ab       	std	Y+48, r25	; 0x30
    11a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11aa:	98 a9       	ldd	r25, Y+48	; 0x30
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	69 f7       	brne	.-38     	; 0x118a <LCD_SendCommand+0xc6>
    11b0:	14 c0       	rjmp	.+40     	; 0x11da <LCD_SendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b2:	69 a9       	ldd	r22, Y+49	; 0x31
    11b4:	7a a9       	ldd	r23, Y+50	; 0x32
    11b6:	8b a9       	ldd	r24, Y+51	; 0x33
    11b8:	9c a9       	ldd	r25, Y+52	; 0x34
    11ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	98 ab       	std	Y+48, r25	; 0x30
    11c4:	8f a7       	std	Y+47, r24	; 0x2f
    11c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c8:	98 a9       	ldd	r25, Y+48	; 0x30
    11ca:	9c a7       	std	Y+44, r25	; 0x2c
    11cc:	8b a7       	std	Y+43, r24	; 0x2b
    11ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <LCD_SendCommand+0x10e>
    11d6:	9c a7       	std	Y+44, r25	; 0x2c
    11d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Set_Bit(LCD_Ctrl_Out,E);
    11da:	a2 e3       	ldi	r26, 0x32	; 50
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	82 60       	ori	r24, 0x02	; 2
    11e6:	8c 93       	st	X, r24
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a0 e8       	ldi	r26, 0x80	; 128
    11ee:	bf e3       	ldi	r27, 0x3F	; 63
    11f0:	8f a3       	std	Y+39, r24	; 0x27
    11f2:	98 a7       	std	Y+40, r25	; 0x28
    11f4:	a9 a7       	std	Y+41, r26	; 0x29
    11f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f8:	6f a1       	ldd	r22, Y+39	; 0x27
    11fa:	78 a5       	ldd	r23, Y+40	; 0x28
    11fc:	89 a5       	ldd	r24, Y+41	; 0x29
    11fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4a ef       	ldi	r20, 0xFA	; 250
    1206:	54 e4       	ldi	r21, 0x44	; 68
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	8b a3       	std	Y+35, r24	; 0x23
    1212:	9c a3       	std	Y+36, r25	; 0x24
    1214:	ad a3       	std	Y+37, r26	; 0x25
    1216:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1218:	6b a1       	ldd	r22, Y+35	; 0x23
    121a:	7c a1       	ldd	r23, Y+36	; 0x24
    121c:	8d a1       	ldd	r24, Y+37	; 0x25
    121e:	9e a1       	ldd	r25, Y+38	; 0x26
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <LCD_SendCommand+0x176>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9a a3       	std	Y+34, r25	; 0x22
    1236:	89 a3       	std	Y+33, r24	; 0x21
    1238:	3f c0       	rjmp	.+126    	; 0x12b8 <LCD_SendCommand+0x1f4>
	else if (__tmp > 65535)
    123a:	6b a1       	ldd	r22, Y+35	; 0x23
    123c:	7c a1       	ldd	r23, Y+36	; 0x24
    123e:	8d a1       	ldd	r24, Y+37	; 0x25
    1240:	9e a1       	ldd	r25, Y+38	; 0x26
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	3f ef       	ldi	r19, 0xFF	; 255
    1246:	4f e7       	ldi	r20, 0x7F	; 127
    1248:	57 e4       	ldi	r21, 0x47	; 71
    124a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124e:	18 16       	cp	r1, r24
    1250:	4c f5       	brge	.+82     	; 0x12a4 <LCD_SendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1252:	6f a1       	ldd	r22, Y+39	; 0x27
    1254:	78 a5       	ldd	r23, Y+40	; 0x28
    1256:	89 a5       	ldd	r24, Y+41	; 0x29
    1258:	9a a5       	ldd	r25, Y+42	; 0x2a
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9a a3       	std	Y+34, r25	; 0x22
    1278:	89 a3       	std	Y+33, r24	; 0x21
    127a:	0f c0       	rjmp	.+30     	; 0x129a <LCD_SendCommand+0x1d6>
    127c:	88 ec       	ldi	r24, 0xC8	; 200
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	98 a3       	std	Y+32, r25	; 0x20
    1282:	8f 8f       	std	Y+31, r24	; 0x1f
    1284:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1286:	98 a1       	ldd	r25, Y+32	; 0x20
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <LCD_SendCommand+0x1c4>
    128c:	98 a3       	std	Y+32, r25	; 0x20
    128e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1290:	89 a1       	ldd	r24, Y+33	; 0x21
    1292:	9a a1       	ldd	r25, Y+34	; 0x22
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9a a3       	std	Y+34, r25	; 0x22
    1298:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	89 a1       	ldd	r24, Y+33	; 0x21
    129c:	9a a1       	ldd	r25, Y+34	; 0x22
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	69 f7       	brne	.-38     	; 0x127c <LCD_SendCommand+0x1b8>
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <LCD_SendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a4:	6b a1       	ldd	r22, Y+35	; 0x23
    12a6:	7c a1       	ldd	r23, Y+36	; 0x24
    12a8:	8d a1       	ldd	r24, Y+37	; 0x25
    12aa:	9e a1       	ldd	r25, Y+38	; 0x26
    12ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9a a3       	std	Y+34, r25	; 0x22
    12b6:	89 a3       	std	Y+33, r24	; 0x21
    12b8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ba:	9a a1       	ldd	r25, Y+34	; 0x22
    12bc:	9e 8f       	std	Y+30, r25	; 0x1e
    12be:	8d 8f       	std	Y+29, r24	; 0x1d
    12c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <LCD_SendCommand+0x200>
    12c8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Data_Out = data;
    12cc:	e8 e3       	ldi	r30, 0x38	; 56
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	89 ad       	ldd	r24, Y+57	; 0x39
    12d2:	80 83       	st	Z, r24
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a0 e8       	ldi	r26, 0x80	; 128
    12da:	bf e3       	ldi	r27, 0x3F	; 63
    12dc:	89 8f       	std	Y+25, r24	; 0x19
    12de:	9a 8f       	std	Y+26, r25	; 0x1a
    12e0:	ab 8f       	std	Y+27, r26	; 0x1b
    12e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	69 8d       	ldd	r22, Y+25	; 0x19
    12e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a ef       	ldi	r20, 0xFA	; 250
    12f2:	54 e4       	ldi	r21, 0x44	; 68
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8d 8b       	std	Y+21, r24	; 0x15
    12fe:	9e 8b       	std	Y+22, r25	; 0x16
    1300:	af 8b       	std	Y+23, r26	; 0x17
    1302:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1304:	6d 89       	ldd	r22, Y+21	; 0x15
    1306:	7e 89       	ldd	r23, Y+22	; 0x16
    1308:	8f 89       	ldd	r24, Y+23	; 0x17
    130a:	98 8d       	ldd	r25, Y+24	; 0x18
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <LCD_SendCommand+0x262>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9c 8b       	std	Y+20, r25	; 0x14
    1322:	8b 8b       	std	Y+19, r24	; 0x13
    1324:	3f c0       	rjmp	.+126    	; 0x13a4 <LCD_SendCommand+0x2e0>
	else if (__tmp > 65535)
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	4c f5       	brge	.+82     	; 0x1390 <LCD_SendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	69 8d       	ldd	r22, Y+25	; 0x19
    1340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9c 8b       	std	Y+20, r25	; 0x14
    1364:	8b 8b       	std	Y+19, r24	; 0x13
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <LCD_SendCommand+0x2c2>
    1368:	88 ec       	ldi	r24, 0xC8	; 200
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9a 8b       	std	Y+18, r25	; 0x12
    136e:	89 8b       	std	Y+17, r24	; 0x11
    1370:	89 89       	ldd	r24, Y+17	; 0x11
    1372:	9a 89       	ldd	r25, Y+18	; 0x12
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_SendCommand+0x2b0>
    1378:	9a 8b       	std	Y+18, r25	; 0x12
    137a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	8b 89       	ldd	r24, Y+19	; 0x13
    137e:	9c 89       	ldd	r25, Y+20	; 0x14
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9c 8b       	std	Y+20, r25	; 0x14
    1384:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	69 f7       	brne	.-38     	; 0x1368 <LCD_SendCommand+0x2a4>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <LCD_SendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1390:	6d 89       	ldd	r22, Y+21	; 0x15
    1392:	7e 89       	ldd	r23, Y+22	; 0x16
    1394:	8f 89       	ldd	r24, Y+23	; 0x17
    1396:	98 8d       	ldd	r25, Y+24	; 0x18
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9c 8b       	std	Y+20, r25	; 0x14
    13a2:	8b 8b       	std	Y+19, r24	; 0x13
    13a4:	8b 89       	ldd	r24, Y+19	; 0x13
    13a6:	9c 89       	ldd	r25, Y+20	; 0x14
    13a8:	98 8b       	std	Y+16, r25	; 0x10
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
    13ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ae:	98 89       	ldd	r25, Y+16	; 0x10
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <LCD_SendCommand+0x2ec>
    13b4:	98 8b       	std	Y+16, r25	; 0x10
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Clear_Bit(LCD_Ctrl_Out,E);
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	8c 93       	st	X, r24
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e8       	ldi	r26, 0x80	; 128
    13cc:	bf e3       	ldi	r27, 0x3F	; 63
    13ce:	8b 87       	std	Y+11, r24	; 0x0b
    13d0:	9c 87       	std	Y+12, r25	; 0x0c
    13d2:	ad 87       	std	Y+13, r26	; 0x0d
    13d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13da:	8d 85       	ldd	r24, Y+13	; 0x0d
    13dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a ef       	ldi	r20, 0xFA	; 250
    13e4:	54 e4       	ldi	r21, 0x44	; 68
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8f 83       	std	Y+7, r24	; 0x07
    13f0:	98 87       	std	Y+8, r25	; 0x08
    13f2:	a9 87       	std	Y+9, r26	; 0x09
    13f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f6:	6f 81       	ldd	r22, Y+7	; 0x07
    13f8:	78 85       	ldd	r23, Y+8	; 0x08
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <LCD_SendCommand+0x354>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <LCD_SendCommand+0x3d2>
	else if (__tmp > 65535)
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <LCD_SendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	6b 85       	ldd	r22, Y+11	; 0x0b
    1432:	7c 85       	ldd	r23, Y+12	; 0x0c
    1434:	8d 85       	ldd	r24, Y+13	; 0x0d
    1436:	9e 85       	ldd	r25, Y+14	; 0x0e
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <LCD_SendCommand+0x3b4>
    145a:	88 ec       	ldi	r24, 0xC8	; 200
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9c 83       	std	Y+4, r25	; 0x04
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_SendCommand+0x3a2>
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <LCD_SendCommand+0x396>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <LCD_SendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <LCD_SendCommand+0x3de>
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    14aa:	e9 96       	adiw	r28, 0x39	; 57
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <LCD_SendCharacter>:

void LCD_SendCharacter(uint8_t data)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	e9 97       	sbiw	r28, 0x39	; 57
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	89 af       	std	Y+57, r24	; 0x39
	Set_Bit(LCD_Ctrl_Out,RS);
    14d2:	a2 e3       	ldi	r26, 0x32	; 50
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e2 e3       	ldi	r30, 0x32	; 50
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	81 60       	ori	r24, 0x01	; 1
    14de:	8c 93       	st	X, r24
	Clear_Bit(LCD_Ctrl_Out,W);
    14e0:	a2 e3       	ldi	r26, 0x32	; 50
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e2 e3       	ldi	r30, 0x32	; 50
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8b 7f       	andi	r24, 0xFB	; 251
    14ec:	8c 93       	st	X, r24
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a0 e8       	ldi	r26, 0x80	; 128
    14f4:	bf e3       	ldi	r27, 0x3F	; 63
    14f6:	8d ab       	std	Y+53, r24	; 0x35
    14f8:	9e ab       	std	Y+54, r25	; 0x36
    14fa:	af ab       	std	Y+55, r26	; 0x37
    14fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1500:	7e a9       	ldd	r23, Y+54	; 0x36
    1502:	8f a9       	ldd	r24, Y+55	; 0x37
    1504:	98 ad       	ldd	r25, Y+56	; 0x38
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	4a ef       	ldi	r20, 0xFA	; 250
    150c:	54 e4       	ldi	r21, 0x44	; 68
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	89 ab       	std	Y+49, r24	; 0x31
    1518:	9a ab       	std	Y+50, r25	; 0x32
    151a:	ab ab       	std	Y+51, r26	; 0x33
    151c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    151e:	69 a9       	ldd	r22, Y+49	; 0x31
    1520:	7a a9       	ldd	r23, Y+50	; 0x32
    1522:	8b a9       	ldd	r24, Y+51	; 0x33
    1524:	9c a9       	ldd	r25, Y+52	; 0x34
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	5f e3       	ldi	r21, 0x3F	; 63
    152e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1532:	88 23       	and	r24, r24
    1534:	2c f4       	brge	.+10     	; 0x1540 <LCD_SendCharacter+0x84>
		__ticks = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 ab       	std	Y+48, r25	; 0x30
    153c:	8f a7       	std	Y+47, r24	; 0x2f
    153e:	3f c0       	rjmp	.+126    	; 0x15be <LCD_SendCharacter+0x102>
	else if (__tmp > 65535)
    1540:	69 a9       	ldd	r22, Y+49	; 0x31
    1542:	7a a9       	ldd	r23, Y+50	; 0x32
    1544:	8b a9       	ldd	r24, Y+51	; 0x33
    1546:	9c a9       	ldd	r25, Y+52	; 0x34
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	4f e7       	ldi	r20, 0x7F	; 127
    154e:	57 e4       	ldi	r21, 0x47	; 71
    1550:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1554:	18 16       	cp	r1, r24
    1556:	4c f5       	brge	.+82     	; 0x15aa <LCD_SendCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1558:	6d a9       	ldd	r22, Y+53	; 0x35
    155a:	7e a9       	ldd	r23, Y+54	; 0x36
    155c:	8f a9       	ldd	r24, Y+55	; 0x37
    155e:	98 ad       	ldd	r25, Y+56	; 0x38
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e2       	ldi	r20, 0x20	; 32
    1566:	51 e4       	ldi	r21, 0x41	; 65
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	98 ab       	std	Y+48, r25	; 0x30
    157e:	8f a7       	std	Y+47, r24	; 0x2f
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <LCD_SendCharacter+0xe4>
    1582:	88 ec       	ldi	r24, 0xC8	; 200
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9e a7       	std	Y+46, r25	; 0x2e
    1588:	8d a7       	std	Y+45, r24	; 0x2d
    158a:	8d a5       	ldd	r24, Y+45	; 0x2d
    158c:	9e a5       	ldd	r25, Y+46	; 0x2e
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <LCD_SendCharacter+0xd2>
    1592:	9e a7       	std	Y+46, r25	; 0x2e
    1594:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1596:	8f a5       	ldd	r24, Y+47	; 0x2f
    1598:	98 a9       	ldd	r25, Y+48	; 0x30
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	98 ab       	std	Y+48, r25	; 0x30
    159e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a2:	98 a9       	ldd	r25, Y+48	; 0x30
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	69 f7       	brne	.-38     	; 0x1582 <LCD_SendCharacter+0xc6>
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <LCD_SendCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15aa:	69 a9       	ldd	r22, Y+49	; 0x31
    15ac:	7a a9       	ldd	r23, Y+50	; 0x32
    15ae:	8b a9       	ldd	r24, Y+51	; 0x33
    15b0:	9c a9       	ldd	r25, Y+52	; 0x34
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	98 ab       	std	Y+48, r25	; 0x30
    15bc:	8f a7       	std	Y+47, r24	; 0x2f
    15be:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c0:	98 a9       	ldd	r25, Y+48	; 0x30
    15c2:	9c a7       	std	Y+44, r25	; 0x2c
    15c4:	8b a7       	std	Y+43, r24	; 0x2b
    15c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <LCD_SendCharacter+0x10e>
    15ce:	9c a7       	std	Y+44, r25	; 0x2c
    15d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Set_Bit(LCD_Ctrl_Out,E);
    15d2:	a2 e3       	ldi	r26, 0x32	; 50
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e2 e3       	ldi	r30, 0x32	; 50
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	8c 93       	st	X, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e8       	ldi	r26, 0x80	; 128
    15e6:	bf e3       	ldi	r27, 0x3F	; 63
    15e8:	8f a3       	std	Y+39, r24	; 0x27
    15ea:	98 a7       	std	Y+40, r25	; 0x28
    15ec:	a9 a7       	std	Y+41, r26	; 0x29
    15ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	6f a1       	ldd	r22, Y+39	; 0x27
    15f2:	78 a5       	ldd	r23, Y+40	; 0x28
    15f4:	89 a5       	ldd	r24, Y+41	; 0x29
    15f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a ef       	ldi	r20, 0xFA	; 250
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8b a3       	std	Y+35, r24	; 0x23
    160a:	9c a3       	std	Y+36, r25	; 0x24
    160c:	ad a3       	std	Y+37, r26	; 0x25
    160e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <LCD_SendCharacter+0x176>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9a a3       	std	Y+34, r25	; 0x22
    162e:	89 a3       	std	Y+33, r24	; 0x21
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <LCD_SendCharacter+0x1f4>
	else if (__tmp > 65535)
    1632:	6b a1       	ldd	r22, Y+35	; 0x23
    1634:	7c a1       	ldd	r23, Y+36	; 0x24
    1636:	8d a1       	ldd	r24, Y+37	; 0x25
    1638:	9e a1       	ldd	r25, Y+38	; 0x26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <LCD_SendCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	6f a1       	ldd	r22, Y+39	; 0x27
    164c:	78 a5       	ldd	r23, Y+40	; 0x28
    164e:	89 a5       	ldd	r24, Y+41	; 0x29
    1650:	9a a5       	ldd	r25, Y+42	; 0x2a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9a a3       	std	Y+34, r25	; 0x22
    1670:	89 a3       	std	Y+33, r24	; 0x21
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <LCD_SendCharacter+0x1d6>
    1674:	88 ec       	ldi	r24, 0xC8	; 200
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	98 a3       	std	Y+32, r25	; 0x20
    167a:	8f 8f       	std	Y+31, r24	; 0x1f
    167c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    167e:	98 a1       	ldd	r25, Y+32	; 0x20
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_SendCharacter+0x1c4>
    1684:	98 a3       	std	Y+32, r25	; 0x20
    1686:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	89 a1       	ldd	r24, Y+33	; 0x21
    168a:	9a a1       	ldd	r25, Y+34	; 0x22
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9a a3       	std	Y+34, r25	; 0x22
    1690:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	89 a1       	ldd	r24, Y+33	; 0x21
    1694:	9a a1       	ldd	r25, Y+34	; 0x22
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <LCD_SendCharacter+0x1b8>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <LCD_SendCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6b a1       	ldd	r22, Y+35	; 0x23
    169e:	7c a1       	ldd	r23, Y+36	; 0x24
    16a0:	8d a1       	ldd	r24, Y+37	; 0x25
    16a2:	9e a1       	ldd	r25, Y+38	; 0x26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9a a3       	std	Y+34, r25	; 0x22
    16ae:	89 a3       	std	Y+33, r24	; 0x21
    16b0:	89 a1       	ldd	r24, Y+33	; 0x21
    16b2:	9a a1       	ldd	r25, Y+34	; 0x22
    16b4:	9e 8f       	std	Y+30, r25	; 0x1e
    16b6:	8d 8f       	std	Y+29, r24	; 0x1d
    16b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_SendCharacter+0x200>
    16c0:	9e 8f       	std	Y+30, r25	; 0x1e
    16c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Data_Out = data;
    16c4:	e8 e3       	ldi	r30, 0x38	; 56
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	89 ad       	ldd	r24, Y+57	; 0x39
    16ca:	80 83       	st	Z, r24
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a0 e8       	ldi	r26, 0x80	; 128
    16d2:	bf e3       	ldi	r27, 0x3F	; 63
    16d4:	89 8f       	std	Y+25, r24	; 0x19
    16d6:	9a 8f       	std	Y+26, r25	; 0x1a
    16d8:	ab 8f       	std	Y+27, r26	; 0x1b
    16da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8d 8b       	std	Y+21, r24	; 0x15
    16f6:	9e 8b       	std	Y+22, r25	; 0x16
    16f8:	af 8b       	std	Y+23, r26	; 0x17
    16fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <LCD_SendCharacter+0x262>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
    171c:	3f c0       	rjmp	.+126    	; 0x179c <LCD_SendCharacter+0x2e0>
	else if (__tmp > 65535)
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <LCD_SendCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	69 8d       	ldd	r22, Y+25	; 0x19
    1738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	0f c0       	rjmp	.+30     	; 0x177e <LCD_SendCharacter+0x2c2>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9a 8b       	std	Y+18, r25	; 0x12
    1766:	89 8b       	std	Y+17, r24	; 0x11
    1768:	89 89       	ldd	r24, Y+17	; 0x11
    176a:	9a 89       	ldd	r25, Y+18	; 0x12
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_SendCharacter+0x2b0>
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8b 89       	ldd	r24, Y+19	; 0x13
    1776:	9c 89       	ldd	r25, Y+20	; 0x14
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <LCD_SendCharacter+0x2a4>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <LCD_SendCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6d 89       	ldd	r22, Y+21	; 0x15
    178a:	7e 89       	ldd	r23, Y+22	; 0x16
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	98 8d       	ldd	r25, Y+24	; 0x18
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9c 8b       	std	Y+20, r25	; 0x14
    179a:	8b 8b       	std	Y+19, r24	; 0x13
    179c:	8b 89       	ldd	r24, Y+19	; 0x13
    179e:	9c 89       	ldd	r25, Y+20	; 0x14
    17a0:	98 8b       	std	Y+16, r25	; 0x10
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	98 89       	ldd	r25, Y+16	; 0x10
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_SendCharacter+0x2ec>
    17ac:	98 8b       	std	Y+16, r25	; 0x10
    17ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Clear_Bit(LCD_Ctrl_Out,E);
    17b0:	a2 e3       	ldi	r26, 0x32	; 50
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8d 7f       	andi	r24, 0xFD	; 253
    17bc:	8c 93       	st	X, r24
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a0 e8       	ldi	r26, 0x80	; 128
    17c4:	bf e3       	ldi	r27, 0x3F	; 63
    17c6:	8b 87       	std	Y+11, r24	; 0x0b
    17c8:	9c 87       	std	Y+12, r25	; 0x0c
    17ca:	ad 87       	std	Y+13, r26	; 0x0d
    17cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4a ef       	ldi	r20, 0xFA	; 250
    17dc:	54 e4       	ldi	r21, 0x44	; 68
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	8f 83       	std	Y+7, r24	; 0x07
    17e8:	98 87       	std	Y+8, r25	; 0x08
    17ea:	a9 87       	std	Y+9, r26	; 0x09
    17ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ee:	6f 81       	ldd	r22, Y+7	; 0x07
    17f0:	78 85       	ldd	r23, Y+8	; 0x08
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1802:	88 23       	and	r24, r24
    1804:	2c f4       	brge	.+10     	; 0x1810 <LCD_SendCharacter+0x354>
		__ticks = 1;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	3f c0       	rjmp	.+126    	; 0x188e <LCD_SendCharacter+0x3d2>
	else if (__tmp > 65535)
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	3f ef       	ldi	r19, 0xFF	; 255
    181c:	4f e7       	ldi	r20, 0x7F	; 127
    181e:	57 e4       	ldi	r21, 0x47	; 71
    1820:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1824:	18 16       	cp	r1, r24
    1826:	4c f5       	brge	.+82     	; 0x187a <LCD_SendCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e2       	ldi	r20, 0x20	; 32
    1836:	51 e4       	ldi	r21, 0x41	; 65
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	bc 01       	movw	r22, r24
    1842:	cd 01       	movw	r24, r26
    1844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	0f c0       	rjmp	.+30     	; 0x1870 <LCD_SendCharacter+0x3b4>
    1852:	88 ec       	ldi	r24, 0xC8	; 200
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	9c 83       	std	Y+4, r25	; 0x04
    1858:	8b 83       	std	Y+3, r24	; 0x03
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_SendCharacter+0x3a2>
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	69 f7       	brne	.-38     	; 0x1852 <LCD_SendCharacter+0x396>
    1878:	14 c0       	rjmp	.+40     	; 0x18a2 <LCD_SendCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187a:	6f 81       	ldd	r22, Y+7	; 0x07
    187c:	78 85       	ldd	r23, Y+8	; 0x08
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_SendCharacter+0x3de>
    189e:	9a 83       	std	Y+2, r25	; 0x02
    18a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    18a2:	e9 96       	adiw	r28, 0x39	; 57
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <LCD_SendString>:

void LCD_SendString(uint8_t *str)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <LCD_SendString+0x6>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <LCD_SendString+0x24>
	while(*str != '\0')
	{
		LCD_SendCharacter(*str);
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	80 81       	ld	r24, Z
    18ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LCD_SendCharacter>
		str++;
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void LCD_SendString(uint8_t *str)
{
	while(*str != '\0')
    18d8:	e9 81       	ldd	r30, Y+1	; 0x01
    18da:	fa 81       	ldd	r31, Y+2	; 0x02
    18dc:	80 81       	ld	r24, Z
    18de:	88 23       	and	r24, r24
    18e0:	89 f7       	brne	.-30     	; 0x18c4 <LCD_SendString+0x10>
	{
		LCD_SendCharacter(*str);
		str++;
	}
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LCD_GoToRowCol>:

void LCD_GoToRowCol(uint8_t row, uint8_t col)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <LCD_GoToRowCol+0x6>
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <LCD_GoToRowCol+0x8>
    18f4:	0f 92       	push	r0
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	8a 83       	std	Y+2, r24	; 0x02
    18fc:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t address;
	switch (row)
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	3d 83       	std	Y+5, r19	; 0x05
    1906:	2c 83       	std	Y+4, r18	; 0x04
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	9d 81       	ldd	r25, Y+5	; 0x05
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	31 f0       	breq	.+12     	; 0x191c <LCD_GoToRowCol+0x30>
    1910:	2c 81       	ldd	r18, Y+4	; 0x04
    1912:	3d 81       	ldd	r19, Y+5	; 0x05
    1914:	21 30       	cpi	r18, 0x01	; 1
    1916:	31 05       	cpc	r19, r1
    1918:	21 f0       	breq	.+8      	; 0x1922 <LCD_GoToRowCol+0x36>
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <LCD_GoToRowCol+0x3c>
	{
		case 0:
			address = col;
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <LCD_GoToRowCol+0x3c>
			break;
		case 1:
			address = col + 0x40;
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	80 5c       	subi	r24, 0xC0	; 192
    1926:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_SendCommand(address | SET_CURSOR_LOCATION);
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	80 68       	ori	r24, 0x80	; 128
    192c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <LCD_SendCommand>
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <LCD_SendStringRowCol>:

void LCD_SendStringRowCol(uint8_t row, uint8_t col, uint8_t *str)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <LCD_SendStringRowCol+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <LCD_SendStringRowCol+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	6a 83       	std	Y+2, r22	; 0x02
    1950:	5c 83       	std	Y+4, r21	; 0x04
    1952:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToRowCol(row,col);
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	6a 81       	ldd	r22, Y+2	; 0x02
    1958:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_GoToRowCol>
	LCD_SendString(str);
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_SendString>
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LCD_IntegerToString>:

void LCD_IntegerToString(uint16_t data)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	62 97       	sbiw	r28, 0x12	; 18
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	9a 8b       	std	Y+18, r25	; 0x12
    1988:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t BUFF[16];
	itoa(data,BUFF,10);
    198a:	89 89       	ldd	r24, Y+17	; 0x11
    198c:	9a 89       	ldd	r25, Y+18	; 0x12
    198e:	9e 01       	movw	r18, r28
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	b9 01       	movw	r22, r18
    1996:	4a e0       	ldi	r20, 0x0A	; 10
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <itoa>
	LCD_SendString(BUFF);
    199e:	ce 01       	movw	r24, r28
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_SendString>
}
    19a6:	62 96       	adiw	r28, 0x12	; 18
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <LCD_ClearScreen>:

void LCD_ClearScreen()
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_COMMAND);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <LCD_SendCommand>
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <KPD_voidInit>:

/***************************************** Macros **************************************/

/***************************************************************************************/
void KPD_voidInit(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(PORT,0b11110000);
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	60 ef       	ldi	r22, 0xF0	; 240
    19d8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(PORT,0xFF);
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	6f ef       	ldi	r22, 0xFF	; 255
    19e0:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8SetPortValue>
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <KPD_u8GetPressedKey>:
/*              pressed at the same time                               	     		   */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
u8 KPD_u8GetPressedKey(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	62 97       	sbiw	r28, 0x12	; 18
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61

  u8 LOC_u8Row;

  u8 LOC_u8PINVAL;
  /* Initialize the switch status to NOT Pressed                                                                     */
  u8 LOC_u8Retrun = NOT_PRESSED;
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	8f 87       	std	Y+15, r24	; 0x0f

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
    1a02:	84 e0       	ldi	r24, 0x04	; 4
    1a04:	89 8b       	std	Y+17, r24	; 0x11
    1a06:	bd c0       	rjmp	.+378    	; 0x1b82 <KPD_u8GetPressedKey+0x198>
  {
    /* Activate the Column                                                                                           */
    DIO_u8SetPinValue(PORT, LOC_u8Column, DIO_u8PIN_LOW);
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	69 89       	ldd	r22, Y+17	; 0x11
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <DIO_u8SetPinValue>

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
    1a12:	18 8a       	std	Y+16, r1	; 0x10
    1a14:	aa c0       	rjmp	.+340    	; 0x1b6a <KPD_u8GetPressedKey+0x180>
    {
      /* Check the status of the switch */
    	DIO_u8GetPinValue(PORT, LOC_u8Row,&LOC_u8PINVAL);
    1a16:	9e 01       	movw	r18, r28
    1a18:	2e 5e       	subi	r18, 0xEE	; 238
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	68 89       	ldd	r22, Y+16	; 0x10
    1a20:	a9 01       	movw	r20, r18
    1a22:	0e 94 7d 10 	call	0x20fa	; 0x20fa <DIO_u8GetPinValue>
      if (!LOC_u8PINVAL)
    1a26:	8a 89       	ldd	r24, Y+18	; 0x12
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <KPD_u8GetPressedKey+0x44>
    1a2c:	9b c0       	rjmp	.+310    	; 0x1b64 <KPD_u8GetPressedKey+0x17a>
      {
        /* Get the value of the currently pressed switch                                                             */
        LOC_u8Retrun = KPD_au8SwitchVal[LOC_u8Column - COL_INIT][LOC_u8Row - ROW_INIT];
    1a2e:	89 89       	ldd	r24, Y+17	; 0x11
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	ac 01       	movw	r20, r24
    1a36:	44 50       	subi	r20, 0x04	; 4
    1a38:	50 40       	sbci	r21, 0x00	; 0
    1a3a:	88 89       	ldd	r24, Y+16	; 0x10
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	ca 01       	movw	r24, r20
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	82 0f       	add	r24, r18
    1a4c:	93 1f       	adc	r25, r19
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e8 59       	subi	r30, 0x98	; 152
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
        DIO_u8GetPinValue(PORT, LOC_u8Row,&LOC_u8PINVAL);
    1a58:	9e 01       	movw	r18, r28
    1a5a:	2e 5e       	subi	r18, 0xEE	; 238
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	68 89       	ldd	r22, Y+16	; 0x10
    1a62:	a9 01       	movw	r20, r18
    1a64:	0e 94 7d 10 	call	0x20fa	; 0x20fa <DIO_u8GetPinValue>
    1a68:	08 c0       	rjmp	.+16     	; 0x1a7a <KPD_u8GetPressedKey+0x90>
        /* Wait until the switch is released (Single Press)                                                          */
        while (!LOC_u8PINVAL)
        {
        	DIO_u8GetPinValue(PORT, LOC_u8Row,&LOC_u8PINVAL);
    1a6a:	9e 01       	movw	r18, r28
    1a6c:	2e 5e       	subi	r18, 0xEE	; 238
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	68 89       	ldd	r22, Y+16	; 0x10
    1a74:	a9 01       	movw	r20, r18
    1a76:	0e 94 7d 10 	call	0x20fa	; 0x20fa <DIO_u8GetPinValue>
      {
        /* Get the value of the currently pressed switch                                                             */
        LOC_u8Retrun = KPD_au8SwitchVal[LOC_u8Column - COL_INIT][LOC_u8Row - ROW_INIT];
        DIO_u8GetPinValue(PORT, LOC_u8Row,&LOC_u8PINVAL);
        /* Wait until the switch is released (Single Press)                                                          */
        while (!LOC_u8PINVAL)
    1a7a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a7c:	88 23       	and	r24, r24
    1a7e:	a9 f3       	breq	.-22     	; 0x1a6a <KPD_u8GetPressedKey+0x80>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e2       	ldi	r26, 0x20	; 32
    1a86:	b1 e4       	ldi	r27, 0x41	; 65
    1a88:	8b 87       	std	Y+11, r24	; 0x0b
    1a8a:	9c 87       	std	Y+12, r25	; 0x0c
    1a8c:	ad 87       	std	Y+13, r26	; 0x0d
    1a8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	8f 83       	std	Y+7, r24	; 0x07
    1aaa:	98 87       	std	Y+8, r25	; 0x08
    1aac:	a9 87       	std	Y+9, r26	; 0x09
    1aae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <KPD_u8GetPressedKey+0xe8>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <KPD_u8GetPressedKey+0x166>
	else if (__tmp > 65535)
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <KPD_u8GetPressedKey+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <KPD_u8GetPressedKey+0x148>
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 83       	std	Y+4, r25	; 0x04
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <KPD_u8GetPressedKey+0x136>
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <KPD_u8GetPressedKey+0x12a>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <KPD_u8GetPressedKey+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	9e 81       	ldd	r25, Y+6	; 0x06
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <KPD_u8GetPressedKey+0x172>
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
  {
    /* Activate the Column                                                                                           */
    DIO_u8SetPinValue(PORT, LOC_u8Column, DIO_u8PIN_LOW);

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
    1b64:	88 89       	ldd	r24, Y+16	; 0x10
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	88 8b       	std	Y+16, r24	; 0x10
    1b6a:	88 89       	ldd	r24, Y+16	; 0x10
    1b6c:	84 30       	cpi	r24, 0x04	; 4
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <KPD_u8GetPressedKey+0x188>
    1b70:	52 cf       	rjmp	.-348    	; 0x1a16 <KPD_u8GetPressedKey+0x2c>

      }
    }

    /* Deactivate the Column                                                                                         */
    DIO_u8SetPinValue(PORT, LOC_u8Column, DIO_u8PIN_HIGH);
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	69 89       	ldd	r22, Y+17	; 0x11
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <DIO_u8SetPinValue>
  u8 LOC_u8PINVAL;
  /* Initialize the switch status to NOT Pressed                                                                     */
  u8 LOC_u8Retrun = NOT_PRESSED;

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
    1b7c:	89 89       	ldd	r24, Y+17	; 0x11
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	89 8b       	std	Y+17, r24	; 0x11
    1b82:	89 89       	ldd	r24, Y+17	; 0x11
    1b84:	88 30       	cpi	r24, 0x08	; 8
    1b86:	08 f4       	brcc	.+2      	; 0x1b8a <KPD_u8GetPressedKey+0x1a0>
    1b88:	3f cf       	rjmp	.-386    	; 0x1a08 <KPD_u8GetPressedKey+0x1e>

    /* Deactivate the Column                                                                                         */
    DIO_u8SetPinValue(PORT, LOC_u8Column, DIO_u8PIN_HIGH);
  }

  return LOC_u8Retrun;
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1b8c:	62 96       	adiw	r28, 0x12	; 18
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	28 97       	sbiw	r28, 0x08	; 8
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
    1bb4:	6b 83       	std	Y+3, r22	; 0x03
    1bb6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	88 30       	cpi	r24, 0x08	; 8
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <DIO_u8SetPinDirection+0x26>
    1bc2:	f1 c0       	rjmp	.+482    	; 0x1da6 <DIO_u8SetPinDirection+0x208>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <DIO_u8SetPinDirection+0x2e>
    1bca:	76 c0       	rjmp	.+236    	; 0x1cb8 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	38 87       	std	Y+8, r19	; 0x08
    1bd4:	2f 83       	std	Y+7, r18	; 0x07
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	98 85       	ldd	r25, Y+8	; 0x08
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	59 f1       	breq	.+86     	; 0x1c36 <DIO_u8SetPinDirection+0x98>
    1be0:	2f 81       	ldd	r18, Y+7	; 0x07
    1be2:	38 85       	ldd	r19, Y+8	; 0x08
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <DIO_u8SetPinDirection+0x56>
    1bea:	8f 81       	ldd	r24, Y+7	; 0x07
    1bec:	98 85       	ldd	r25, Y+8	; 0x08
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f0       	breq	.+26     	; 0x1c0c <DIO_u8SetPinDirection+0x6e>
    1bf2:	60 c0       	rjmp	.+192    	; 0x1cb4 <DIO_u8SetPinDirection+0x116>
    1bf4:	2f 81       	ldd	r18, Y+7	; 0x07
    1bf6:	38 85       	ldd	r19, Y+8	; 0x08
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	89 f1       	breq	.+98     	; 0x1c60 <DIO_u8SetPinDirection+0xc2>
    1bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1c00:	98 85       	ldd	r25, Y+8	; 0x08
    1c02:	83 30       	cpi	r24, 0x03	; 3
    1c04:	91 05       	cpc	r25, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <DIO_u8SetPinDirection+0x6c>
    1c08:	40 c0       	rjmp	.+128    	; 0x1c8a <DIO_u8SetPinDirection+0xec>
    1c0a:	54 c0       	rjmp	.+168    	; 0x1cb4 <DIO_u8SetPinDirection+0x116>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1c0c:	aa e3       	ldi	r26, 0x3A	; 58
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	ea e3       	ldi	r30, 0x3A	; 58
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <DIO_u8SetPinDirection+0x8c>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <DIO_u8SetPinDirection+0x88>
    1c2e:	80 95       	com	r24
    1c30:	84 23       	and	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	b9 c0       	rjmp	.+370    	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1c36:	a7 e3       	ldi	r26, 0x37	; 55
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e7 e3       	ldi	r30, 0x37	; 55
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_u8SetPinDirection+0xb6>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_u8SetPinDirection+0xb2>
    1c58:	80 95       	com	r24
    1c5a:	84 23       	and	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	a4 c0       	rjmp	.+328    	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1c60:	a4 e3       	ldi	r26, 0x34	; 52
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e4 e3       	ldi	r30, 0x34	; 52
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <DIO_u8SetPinDirection+0xe0>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <DIO_u8SetPinDirection+0xdc>
    1c82:	80 95       	com	r24
    1c84:	84 23       	and	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	8f c0       	rjmp	.+286    	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    1c8a:	a1 e3       	ldi	r26, 0x31	; 49
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e1 e3       	ldi	r30, 0x31	; 49
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_u8SetPinDirection+0x10a>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_u8SetPinDirection+0x106>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	7a c0       	rjmp	.+244    	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
    1cb4:	19 82       	std	Y+1, r1	; 0x01
    1cb6:	78 c0       	rjmp	.+240    	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <DIO_u8SetPinDirection+0x122>
    1cbe:	71 c0       	rjmp	.+226    	; 0x1da2 <DIO_u8SetPinDirection+0x204>
		{
			switch(Copy_u8Port)
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3e 83       	std	Y+6, r19	; 0x06
    1cc8:	2d 83       	std	Y+5, r18	; 0x05
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	49 f1       	breq	.+82     	; 0x1d26 <DIO_u8SetPinDirection+0x188>
    1cd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd8:	22 30       	cpi	r18, 0x02	; 2
    1cda:	31 05       	cpc	r19, r1
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <DIO_u8SetPinDirection+0x14a>
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	61 f0       	breq	.+24     	; 0x1cfe <DIO_u8SetPinDirection+0x160>
    1ce6:	5b c0       	rjmp	.+182    	; 0x1d9e <DIO_u8SetPinDirection+0x200>
    1ce8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cea:	3e 81       	ldd	r19, Y+6	; 0x06
    1cec:	22 30       	cpi	r18, 0x02	; 2
    1cee:	31 05       	cpc	r19, r1
    1cf0:	71 f1       	breq	.+92     	; 0x1d4e <DIO_u8SetPinDirection+0x1b0>
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	83 30       	cpi	r24, 0x03	; 3
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	e9 f1       	breq	.+122    	; 0x1d76 <DIO_u8SetPinDirection+0x1d8>
    1cfc:	50 c0       	rjmp	.+160    	; 0x1d9e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1cfe:	aa e3       	ldi	r26, 0x3A	; 58
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	ea e3       	ldi	r30, 0x3A	; 58
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_u8SetPinDirection+0x17e>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_u8SetPinDirection+0x17a>
    1d20:	84 2b       	or	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	41 c0       	rjmp	.+130    	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1d26:	a7 e3       	ldi	r26, 0x37	; 55
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e7 e3       	ldi	r30, 0x37	; 55
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_u8SetPinDirection+0x1a6>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_u8SetPinDirection+0x1a2>
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	2d c0       	rjmp	.+90     	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1d4e:	a4 e3       	ldi	r26, 0x34	; 52
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e4 e3       	ldi	r30, 0x34	; 52
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_u8SetPinDirection+0x1ce>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_u8SetPinDirection+0x1ca>
    1d70:	84 2b       	or	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	19 c0       	rjmp	.+50     	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    1d76:	a1 e3       	ldi	r26, 0x31	; 49
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e1 e3       	ldi	r30, 0x31	; 49
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_u8SetPinDirection+0x1f6>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_u8SetPinDirection+0x1f2>
    1d98:	84 2b       	or	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	05 c0       	rjmp	.+10     	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
    1d9e:	19 82       	std	Y+1, r1	; 0x01
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1da2:	19 82       	std	Y+1, r1	; 0x01
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <DIO_u8SetPinDirection+0x20a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1da6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1daa:	28 96       	adiw	r28, 0x08	; 8
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <DIO_u8SetPortDirection>:


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <DIO_u8SetPortDirection+0x6>
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <DIO_u8SetPortDirection+0x8>
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	8a 83       	std	Y+2, r24	; 0x02
    1dcc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Port)
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	3d 83       	std	Y+5, r19	; 0x05
    1dda:	2c 83       	std	Y+4, r18	; 0x04
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	9d 81       	ldd	r25, Y+5	; 0x05
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	91 05       	cpc	r25, r1
    1de4:	d1 f0       	breq	.+52     	; 0x1e1a <DIO_u8SetPortDirection+0x5e>
    1de6:	2c 81       	ldd	r18, Y+4	; 0x04
    1de8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dea:	22 30       	cpi	r18, 0x02	; 2
    1dec:	31 05       	cpc	r19, r1
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <DIO_u8SetPortDirection+0x3e>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	61 f0       	breq	.+24     	; 0x1e10 <DIO_u8SetPortDirection+0x54>
    1df8:	1f c0       	rjmp	.+62     	; 0x1e38 <DIO_u8SetPortDirection+0x7c>
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	81 f0       	breq	.+32     	; 0x1e24 <DIO_u8SetPortDirection+0x68>
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	9d 81       	ldd	r25, Y+5	; 0x05
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	81 f0       	breq	.+32     	; 0x1e2e <DIO_u8SetPortDirection+0x72>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <DIO_u8SetPortDirection+0x7c>
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
    1e10:	ea e3       	ldi	r30, 0x3A	; 58
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	80 83       	st	Z, r24
    1e18:	10 c0       	rjmp	.+32     	; 0x1e3a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
    1e1a:	e7 e3       	ldi	r30, 0x37	; 55
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	80 83       	st	Z, r24
    1e22:	0b c0       	rjmp	.+22     	; 0x1e3a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
    1e24:	e4 e3       	ldi	r30, 0x34	; 52
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	80 83       	st	Z, r24
    1e2c:	06 c0       	rjmp	.+12     	; 0x1e3a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
    1e2e:	e1 e3       	ldi	r30, 0x31	; 49
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	80 83       	st	Z, r24
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=NOK; 		  break;
    1e38:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	28 97       	sbiw	r28, 0x08	; 8
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	8a 83       	std	Y+2, r24	; 0x02
    1e62:	6b 83       	std	Y+3, r22	; 0x03
    1e64:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	88 30       	cpi	r24, 0x08	; 8
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <DIO_u8SetPinValue+0x26>
    1e70:	f1 c0       	rjmp	.+482    	; 0x2054 <DIO_u8SetPinValue+0x208>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	88 23       	and	r24, r24
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <DIO_u8SetPinValue+0x2e>
    1e78:	76 c0       	rjmp	.+236    	; 0x1f66 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	38 87       	std	Y+8, r19	; 0x08
    1e82:	2f 83       	std	Y+7, r18	; 0x07
    1e84:	8f 81       	ldd	r24, Y+7	; 0x07
    1e86:	98 85       	ldd	r25, Y+8	; 0x08
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	59 f1       	breq	.+86     	; 0x1ee4 <DIO_u8SetPinValue+0x98>
    1e8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e90:	38 85       	ldd	r19, Y+8	; 0x08
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <DIO_u8SetPinValue+0x56>
    1e98:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9a:	98 85       	ldd	r25, Y+8	; 0x08
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f0       	breq	.+26     	; 0x1eba <DIO_u8SetPinValue+0x6e>
    1ea0:	60 c0       	rjmp	.+192    	; 0x1f62 <DIO_u8SetPinValue+0x116>
    1ea2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea4:	38 85       	ldd	r19, Y+8	; 0x08
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	89 f1       	breq	.+98     	; 0x1f0e <DIO_u8SetPinValue+0xc2>
    1eac:	8f 81       	ldd	r24, Y+7	; 0x07
    1eae:	98 85       	ldd	r25, Y+8	; 0x08
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <DIO_u8SetPinValue+0x6c>
    1eb6:	40 c0       	rjmp	.+128    	; 0x1f38 <DIO_u8SetPinValue+0xec>
    1eb8:	54 c0       	rjmp	.+168    	; 0x1f62 <DIO_u8SetPinValue+0x116>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1eba:	ab e3       	ldi	r26, 0x3B	; 59
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	eb e3       	ldi	r30, 0x3B	; 59
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <DIO_u8SetPinValue+0x8c>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <DIO_u8SetPinValue+0x88>
    1edc:	80 95       	com	r24
    1ede:	84 23       	and	r24, r20
    1ee0:	8c 93       	st	X, r24
    1ee2:	b9 c0       	rjmp	.+370    	; 0x2056 <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1ee4:	a8 e3       	ldi	r26, 0x38	; 56
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e8 e3       	ldi	r30, 0x38	; 56
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <DIO_u8SetPinValue+0xb6>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <DIO_u8SetPinValue+0xb2>
    1f06:	80 95       	com	r24
    1f08:	84 23       	and	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	a4 c0       	rjmp	.+328    	; 0x2056 <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1f0e:	a5 e3       	ldi	r26, 0x35	; 53
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e5 e3       	ldi	r30, 0x35	; 53
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <DIO_u8SetPinValue+0xe0>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <DIO_u8SetPinValue+0xdc>
    1f30:	80 95       	com	r24
    1f32:	84 23       	and	r24, r20
    1f34:	8c 93       	st	X, r24
    1f36:	8f c0       	rjmp	.+286    	; 0x2056 <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1f38:	a2 e3       	ldi	r26, 0x32	; 50
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e2 e3       	ldi	r30, 0x32	; 50
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_u8SetPinValue+0x10a>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_u8SetPinValue+0x106>
    1f5a:	80 95       	com	r24
    1f5c:	84 23       	and	r24, r20
    1f5e:	8c 93       	st	X, r24
    1f60:	7a c0       	rjmp	.+244    	; 0x2056 <DIO_u8SetPinValue+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	78 c0       	rjmp	.+240    	; 0x2056 <DIO_u8SetPinValue+0x20a>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <DIO_u8SetPinValue+0x122>
    1f6c:	71 c0       	rjmp	.+226    	; 0x2050 <DIO_u8SetPinValue+0x204>
		{
			switch(Copy_u8Port)
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	3e 83       	std	Y+6, r19	; 0x06
    1f76:	2d 83       	std	Y+5, r18	; 0x05
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	91 05       	cpc	r25, r1
    1f80:	49 f1       	breq	.+82     	; 0x1fd4 <DIO_u8SetPinValue+0x188>
    1f82:	2d 81       	ldd	r18, Y+5	; 0x05
    1f84:	3e 81       	ldd	r19, Y+6	; 0x06
    1f86:	22 30       	cpi	r18, 0x02	; 2
    1f88:	31 05       	cpc	r19, r1
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <DIO_u8SetPinValue+0x14a>
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	61 f0       	breq	.+24     	; 0x1fac <DIO_u8SetPinValue+0x160>
    1f94:	5b c0       	rjmp	.+182    	; 0x204c <DIO_u8SetPinValue+0x200>
    1f96:	2d 81       	ldd	r18, Y+5	; 0x05
    1f98:	3e 81       	ldd	r19, Y+6	; 0x06
    1f9a:	22 30       	cpi	r18, 0x02	; 2
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	71 f1       	breq	.+92     	; 0x1ffc <DIO_u8SetPinValue+0x1b0>
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	83 30       	cpi	r24, 0x03	; 3
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	e9 f1       	breq	.+122    	; 0x2024 <DIO_u8SetPinValue+0x1d8>
    1faa:	50 c0       	rjmp	.+160    	; 0x204c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1fac:	ab e3       	ldi	r26, 0x3B	; 59
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	eb e3       	ldi	r30, 0x3B	; 59
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	48 2f       	mov	r20, r24
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 2e       	mov	r0, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <DIO_u8SetPinValue+0x17e>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	0a 94       	dec	r0
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <DIO_u8SetPinValue+0x17a>
    1fce:	84 2b       	or	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	41 c0       	rjmp	.+130    	; 0x2056 <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1fd4:	a8 e3       	ldi	r26, 0x38	; 56
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e8 e3       	ldi	r30, 0x38	; 56
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 2e       	mov	r0, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <DIO_u8SetPinValue+0x1a6>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <DIO_u8SetPinValue+0x1a2>
    1ff6:	84 2b       	or	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	2d c0       	rjmp	.+90     	; 0x2056 <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1ffc:	a5 e3       	ldi	r26, 0x35	; 53
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e5 e3       	ldi	r30, 0x35	; 53
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_u8SetPinValue+0x1ce>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_u8SetPinValue+0x1ca>
    201e:	84 2b       	or	r24, r20
    2020:	8c 93       	st	X, r24
    2022:	19 c0       	rjmp	.+50     	; 0x2056 <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    2024:	a2 e3       	ldi	r26, 0x32	; 50
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e2 e3       	ldi	r30, 0x32	; 50
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	48 2f       	mov	r20, r24
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 2e       	mov	r0, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <DIO_u8SetPinValue+0x1f6>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <DIO_u8SetPinValue+0x1f2>
    2046:	84 2b       	or	r24, r20
    2048:	8c 93       	st	X, r24
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <DIO_u8SetPinValue+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
    204c:	19 82       	std	Y+1, r1	; 0x01
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <DIO_u8SetPinValue+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    2050:	19 82       	std	Y+1, r1	; 0x01
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <DIO_u8SetPinValue+0x20a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    2054:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
}
    2058:	28 96       	adiw	r28, 0x08	; 8
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <DIO_u8SetPortValue+0x6>
    2070:	00 d0       	rcall	.+0      	; 0x2072 <DIO_u8SetPortValue+0x8>
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8a 83       	std	Y+2, r24	; 0x02
    207a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3d 83       	std	Y+5, r19	; 0x05
    2088:	2c 83       	std	Y+4, r18	; 0x04
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	d1 f0       	breq	.+52     	; 0x20c8 <DIO_u8SetPortValue+0x5e>
    2094:	2c 81       	ldd	r18, Y+4	; 0x04
    2096:	3d 81       	ldd	r19, Y+5	; 0x05
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	2c f4       	brge	.+10     	; 0x20a8 <DIO_u8SetPortValue+0x3e>
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	61 f0       	breq	.+24     	; 0x20be <DIO_u8SetPortValue+0x54>
    20a6:	1f c0       	rjmp	.+62     	; 0x20e6 <DIO_u8SetPortValue+0x7c>
    20a8:	2c 81       	ldd	r18, Y+4	; 0x04
    20aa:	3d 81       	ldd	r19, Y+5	; 0x05
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	81 f0       	breq	.+32     	; 0x20d2 <DIO_u8SetPortValue+0x68>
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	9d 81       	ldd	r25, Y+5	; 0x05
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	91 05       	cpc	r25, r1
    20ba:	81 f0       	breq	.+32     	; 0x20dc <DIO_u8SetPortValue+0x72>
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
    20be:	eb e3       	ldi	r30, 0x3B	; 59
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	80 83       	st	Z, r24
    20c6:	10 c0       	rjmp	.+32     	; 0x20e8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
    20c8:	e8 e3       	ldi	r30, 0x38	; 56
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	80 83       	st	Z, r24
    20d0:	0b c0       	rjmp	.+22     	; 0x20e8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
    20d2:	e5 e3       	ldi	r30, 0x35	; 53
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	80 83       	st	Z, r24
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD= Copy_u8Value; break;
    20dc:	e2 e3       	ldi	r30, 0x32	; 50
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	80 83       	st	Z, r24
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK; 	   break;
    20e6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	27 97       	sbiw	r28, 0x07	; 7
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	8a 83       	std	Y+2, r24	; 0x02
    2110:	6b 83       	std	Y+3, r22	; 0x03
    2112:	5d 83       	std	Y+5, r21	; 0x05
    2114:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_pu8Value != NULL)  && (Copy_u8Pin<= DIO_u8PIN7))
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	09 f4       	brne	.+2      	; 0x2124 <DIO_u8GetPinValue+0x2a>
    2122:	77 c0       	rjmp	.+238    	; 0x2212 <DIO_u8GetPinValue+0x118>
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	88 30       	cpi	r24, 0x08	; 8
    2128:	08 f0       	brcs	.+2      	; 0x212c <DIO_u8GetPinValue+0x32>
    212a:	73 c0       	rjmp	.+230    	; 0x2212 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	3f 83       	std	Y+7, r19	; 0x07
    2134:	2e 83       	std	Y+6, r18	; 0x06
    2136:	4e 81       	ldd	r20, Y+6	; 0x06
    2138:	5f 81       	ldd	r21, Y+7	; 0x07
    213a:	41 30       	cpi	r20, 0x01	; 1
    213c:	51 05       	cpc	r21, r1
    213e:	59 f1       	breq	.+86     	; 0x2196 <DIO_u8GetPinValue+0x9c>
    2140:	8e 81       	ldd	r24, Y+6	; 0x06
    2142:	9f 81       	ldd	r25, Y+7	; 0x07
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	91 05       	cpc	r25, r1
    2148:	34 f4       	brge	.+12     	; 0x2156 <DIO_u8GetPinValue+0x5c>
    214a:	2e 81       	ldd	r18, Y+6	; 0x06
    214c:	3f 81       	ldd	r19, Y+7	; 0x07
    214e:	21 15       	cp	r18, r1
    2150:	31 05       	cpc	r19, r1
    2152:	69 f0       	breq	.+26     	; 0x216e <DIO_u8GetPinValue+0x74>
    2154:	5c c0       	rjmp	.+184    	; 0x220e <DIO_u8GetPinValue+0x114>
    2156:	4e 81       	ldd	r20, Y+6	; 0x06
    2158:	5f 81       	ldd	r21, Y+7	; 0x07
    215a:	42 30       	cpi	r20, 0x02	; 2
    215c:	51 05       	cpc	r21, r1
    215e:	79 f1       	breq	.+94     	; 0x21be <DIO_u8GetPinValue+0xc4>
    2160:	8e 81       	ldd	r24, Y+6	; 0x06
    2162:	9f 81       	ldd	r25, Y+7	; 0x07
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	91 05       	cpc	r25, r1
    2168:	09 f4       	brne	.+2      	; 0x216c <DIO_u8GetPinValue+0x72>
    216a:	3d c0       	rjmp	.+122    	; 0x21e6 <DIO_u8GetPinValue+0xec>
    216c:	50 c0       	rjmp	.+160    	; 0x220e <DIO_u8GetPinValue+0x114>
		{
		case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    216e:	e9 e3       	ldi	r30, 0x39	; 57
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a9 01       	movw	r20, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <DIO_u8GetPinValue+0x8c>
    2182:	55 95       	asr	r21
    2184:	47 95       	ror	r20
    2186:	8a 95       	dec	r24
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <DIO_u8GetPinValue+0x88>
    218a:	ca 01       	movw	r24, r20
    218c:	81 70       	andi	r24, 0x01	; 1
    218e:	ec 81       	ldd	r30, Y+4	; 0x04
    2190:	fd 81       	ldd	r31, Y+5	; 0x05
    2192:	80 83       	st	Z, r24
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <DIO_u8GetPinValue+0x11a>
		case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    2196:	e6 e3       	ldi	r30, 0x36	; 54
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a9 01       	movw	r20, r18
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <DIO_u8GetPinValue+0xb4>
    21aa:	55 95       	asr	r21
    21ac:	47 95       	ror	r20
    21ae:	8a 95       	dec	r24
    21b0:	e2 f7       	brpl	.-8      	; 0x21aa <DIO_u8GetPinValue+0xb0>
    21b2:	ca 01       	movw	r24, r20
    21b4:	81 70       	andi	r24, 0x01	; 1
    21b6:	ec 81       	ldd	r30, Y+4	; 0x04
    21b8:	fd 81       	ldd	r31, Y+5	; 0x05
    21ba:	80 83       	st	Z, r24
    21bc:	2b c0       	rjmp	.+86     	; 0x2214 <DIO_u8GetPinValue+0x11a>
		case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    21be:	e3 e3       	ldi	r30, 0x33	; 51
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a9 01       	movw	r20, r18
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <DIO_u8GetPinValue+0xdc>
    21d2:	55 95       	asr	r21
    21d4:	47 95       	ror	r20
    21d6:	8a 95       	dec	r24
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <DIO_u8GetPinValue+0xd8>
    21da:	ca 01       	movw	r24, r20
    21dc:	81 70       	andi	r24, 0x01	; 1
    21de:	ec 81       	ldd	r30, Y+4	; 0x04
    21e0:	fd 81       	ldd	r31, Y+5	; 0x05
    21e2:	80 83       	st	Z, r24
    21e4:	17 c0       	rjmp	.+46     	; 0x2214 <DIO_u8GetPinValue+0x11a>
		case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    21e6:	e0 e3       	ldi	r30, 0x30	; 48
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a9 01       	movw	r20, r18
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <DIO_u8GetPinValue+0x104>
    21fa:	55 95       	asr	r21
    21fc:	47 95       	ror	r20
    21fe:	8a 95       	dec	r24
    2200:	e2 f7       	brpl	.-8      	; 0x21fa <DIO_u8GetPinValue+0x100>
    2202:	ca 01       	movw	r24, r20
    2204:	81 70       	andi	r24, 0x01	; 1
    2206:	ec 81       	ldd	r30, Y+4	; 0x04
    2208:	fd 81       	ldd	r31, Y+5	; 0x05
    220a:	80 83       	st	Z, r24
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <DIO_u8GetPinValue+0x11a>
		default: Local_u8ErrorState=NOK; 							break;
    220e:	19 82       	std	Y+1, r1	; 0x01
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <DIO_u8GetPinValue+0x11a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    2212:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
}
    2216:	27 96       	adiw	r28, 0x07	; 7
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <dio_set_direction>:
 * 						this value must be type of dio_direction_t
 * @example:
 * dio_set_direction(DIOA, 4, OUTPUT);
 */
void dio_set_direction(dio_t port, dio_pin_t pin, dio_direction_t direction)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <dio_set_direction+0x6>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <dio_set_direction+0x8>
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	6a 83       	std	Y+2, r22	; 0x02
    223a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	3d 83       	std	Y+5, r19	; 0x05
    2244:	2c 83       	std	Y+4, r18	; 0x04
    2246:	6c 81       	ldd	r22, Y+4	; 0x04
    2248:	7d 81       	ldd	r23, Y+5	; 0x05
    224a:	61 30       	cpi	r22, 0x01	; 1
    224c:	71 05       	cpc	r23, r1
    224e:	09 f4       	brne	.+2      	; 0x2252 <dio_set_direction+0x2a>
    2250:	41 c0       	rjmp	.+130    	; 0x22d4 <dio_set_direction+0xac>
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	9d 81       	ldd	r25, Y+5	; 0x05
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	91 05       	cpc	r25, r1
    225a:	34 f4       	brge	.+12     	; 0x2268 <dio_set_direction+0x40>
    225c:	2c 81       	ldd	r18, Y+4	; 0x04
    225e:	3d 81       	ldd	r19, Y+5	; 0x05
    2260:	21 15       	cp	r18, r1
    2262:	31 05       	cpc	r19, r1
    2264:	71 f0       	breq	.+28     	; 0x2282 <dio_set_direction+0x5a>
    2266:	b0 c0       	rjmp	.+352    	; 0x23c8 <dio_set_direction+0x1a0>
    2268:	6c 81       	ldd	r22, Y+4	; 0x04
    226a:	7d 81       	ldd	r23, Y+5	; 0x05
    226c:	62 30       	cpi	r22, 0x02	; 2
    226e:	71 05       	cpc	r23, r1
    2270:	09 f4       	brne	.+2      	; 0x2274 <dio_set_direction+0x4c>
    2272:	59 c0       	rjmp	.+178    	; 0x2326 <dio_set_direction+0xfe>
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	83 30       	cpi	r24, 0x03	; 3
    227a:	91 05       	cpc	r25, r1
    227c:	09 f4       	brne	.+2      	; 0x2280 <dio_set_direction+0x58>
    227e:	7c c0       	rjmp	.+248    	; 0x2378 <dio_set_direction+0x150>
    2280:	a3 c0       	rjmp	.+326    	; 0x23c8 <dio_set_direction+0x1a0>
	{
	case DIOA:
		/* code */
		DDRA &= ~(0x01<<pin);   // clear bit
    2282:	aa e3       	ldi	r26, 0x3A	; 58
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	ea e3       	ldi	r30, 0x3A	; 58
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	48 2f       	mov	r20, r24
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 c0       	rjmp	.+4      	; 0x229e <dio_set_direction+0x76>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	2a 95       	dec	r18
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <dio_set_direction+0x72>
    22a2:	80 95       	com	r24
    22a4:	84 23       	and	r24, r20
    22a6:	8c 93       	st	X, r24
		DDRA |= direction <<pin; // set value
    22a8:	aa e3       	ldi	r26, 0x3A	; 58
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ea e3       	ldi	r30, 0x3A	; 58
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	48 2f       	mov	r20, r24
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	b9 01       	movw	r22, r18
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <dio_set_direction+0xa0>
    22c4:	66 0f       	add	r22, r22
    22c6:	77 1f       	adc	r23, r23
    22c8:	8a 95       	dec	r24
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <dio_set_direction+0x9c>
    22cc:	cb 01       	movw	r24, r22
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	7a c0       	rjmp	.+244    	; 0x23c8 <dio_set_direction+0x1a0>
		break;
	case DIOB:
		DDRB &= ~(0x01<<pin);   // clear bit
    22d4:	a7 e3       	ldi	r26, 0x37	; 55
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e7 e3       	ldi	r30, 0x37	; 55
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <dio_set_direction+0xc8>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	2a 95       	dec	r18
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <dio_set_direction+0xc4>
    22f4:	80 95       	com	r24
    22f6:	84 23       	and	r24, r20
    22f8:	8c 93       	st	X, r24
		DDRB |= direction <<pin; // set value
    22fa:	a7 e3       	ldi	r26, 0x37	; 55
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e7 e3       	ldi	r30, 0x37	; 55
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	b9 01       	movw	r22, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <dio_set_direction+0xf2>
    2316:	66 0f       	add	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	8a 95       	dec	r24
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <dio_set_direction+0xee>
    231e:	cb 01       	movw	r24, r22
    2320:	84 2b       	or	r24, r20
    2322:	8c 93       	st	X, r24
    2324:	51 c0       	rjmp	.+162    	; 0x23c8 <dio_set_direction+0x1a0>
		/* code */
		break;
	case DIOC:
		/* code */
		DDRC &= ~(0x01<<pin);   // clear bit
    2326:	a4 e3       	ldi	r26, 0x34	; 52
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e4 e3       	ldi	r30, 0x34	; 52
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	48 2f       	mov	r20, r24
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <dio_set_direction+0x11a>
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	2a 95       	dec	r18
    2344:	e2 f7       	brpl	.-8      	; 0x233e <dio_set_direction+0x116>
    2346:	80 95       	com	r24
    2348:	84 23       	and	r24, r20
    234a:	8c 93       	st	X, r24
		DDRC |= direction << pin; // set value
    234c:	a4 e3       	ldi	r26, 0x34	; 52
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e4 e3       	ldi	r30, 0x34	; 52
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	b9 01       	movw	r22, r18
    2366:	02 c0       	rjmp	.+4      	; 0x236c <dio_set_direction+0x144>
    2368:	66 0f       	add	r22, r22
    236a:	77 1f       	adc	r23, r23
    236c:	8a 95       	dec	r24
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <dio_set_direction+0x140>
    2370:	cb 01       	movw	r24, r22
    2372:	84 2b       	or	r24, r20
    2374:	8c 93       	st	X, r24
    2376:	28 c0       	rjmp	.+80     	; 0x23c8 <dio_set_direction+0x1a0>
		break;
	case DIOD:
		/* code */
		DDRD &= ~(0x01<<pin);   // clear bit
    2378:	a1 e3       	ldi	r26, 0x31	; 49
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e1 e3       	ldi	r30, 0x31	; 49
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	48 2f       	mov	r20, r24
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <dio_set_direction+0x16c>
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	2a 95       	dec	r18
    2396:	e2 f7       	brpl	.-8      	; 0x2390 <dio_set_direction+0x168>
    2398:	80 95       	com	r24
    239a:	84 23       	and	r24, r20
    239c:	8c 93       	st	X, r24
		DDRD |= direction << pin; // set value
    239e:	a1 e3       	ldi	r26, 0x31	; 49
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e1 e3       	ldi	r30, 0x31	; 49
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	48 2f       	mov	r20, r24
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	b9 01       	movw	r22, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <dio_set_direction+0x196>
    23ba:	66 0f       	add	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	8a 95       	dec	r24
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <dio_set_direction+0x192>
    23c2:	cb 01       	movw	r24, r22
    23c4:	84 2b       	or	r24, r20
    23c6:	8c 93       	st	X, r24

	default:
		//reDIO error
		break;
	}
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <dio_set_level>:


void dio_set_level(dio_t port, dio_pin_t pin, dio_level_t value)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <dio_set_level+0x6>
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <dio_set_level+0x8>
    23e0:	0f 92       	push	r0
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	6a 83       	std	Y+2, r22	; 0x02
    23ea:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	3d 83       	std	Y+5, r19	; 0x05
    23f4:	2c 83       	std	Y+4, r18	; 0x04
    23f6:	6c 81       	ldd	r22, Y+4	; 0x04
    23f8:	7d 81       	ldd	r23, Y+5	; 0x05
    23fa:	61 30       	cpi	r22, 0x01	; 1
    23fc:	71 05       	cpc	r23, r1
    23fe:	09 f4       	brne	.+2      	; 0x2402 <dio_set_level+0x2a>
    2400:	41 c0       	rjmp	.+130    	; 0x2484 <dio_set_level+0xac>
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	9d 81       	ldd	r25, Y+5	; 0x05
    2406:	82 30       	cpi	r24, 0x02	; 2
    2408:	91 05       	cpc	r25, r1
    240a:	34 f4       	brge	.+12     	; 0x2418 <dio_set_level+0x40>
    240c:	2c 81       	ldd	r18, Y+4	; 0x04
    240e:	3d 81       	ldd	r19, Y+5	; 0x05
    2410:	21 15       	cp	r18, r1
    2412:	31 05       	cpc	r19, r1
    2414:	71 f0       	breq	.+28     	; 0x2432 <dio_set_level+0x5a>
    2416:	b0 c0       	rjmp	.+352    	; 0x2578 <dio_set_level+0x1a0>
    2418:	6c 81       	ldd	r22, Y+4	; 0x04
    241a:	7d 81       	ldd	r23, Y+5	; 0x05
    241c:	62 30       	cpi	r22, 0x02	; 2
    241e:	71 05       	cpc	r23, r1
    2420:	09 f4       	brne	.+2      	; 0x2424 <dio_set_level+0x4c>
    2422:	59 c0       	rjmp	.+178    	; 0x24d6 <dio_set_level+0xfe>
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	83 30       	cpi	r24, 0x03	; 3
    242a:	91 05       	cpc	r25, r1
    242c:	09 f4       	brne	.+2      	; 0x2430 <dio_set_level+0x58>
    242e:	7c c0       	rjmp	.+248    	; 0x2528 <dio_set_level+0x150>
    2430:	a3 c0       	rjmp	.+326    	; 0x2578 <dio_set_level+0x1a0>
	{
	case DIOA:
		/* code */
		PORTA &= ~(0x01<<pin);   // clear bit
    2432:	ab e3       	ldi	r26, 0x3B	; 59
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	eb e3       	ldi	r30, 0x3B	; 59
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	48 2f       	mov	r20, r24
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 c0       	rjmp	.+4      	; 0x244e <dio_set_level+0x76>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	2a 95       	dec	r18
    2450:	e2 f7       	brpl	.-8      	; 0x244a <dio_set_level+0x72>
    2452:	80 95       	com	r24
    2454:	84 23       	and	r24, r20
    2456:	8c 93       	st	X, r24
		PORTA |= value <<pin; // set value
    2458:	ab e3       	ldi	r26, 0x3B	; 59
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	eb e3       	ldi	r30, 0x3B	; 59
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	48 2f       	mov	r20, r24
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	b9 01       	movw	r22, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <dio_set_level+0xa0>
    2474:	66 0f       	add	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	8a 95       	dec	r24
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <dio_set_level+0x9c>
    247c:	cb 01       	movw	r24, r22
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	7a c0       	rjmp	.+244    	; 0x2578 <dio_set_level+0x1a0>
		break;
	case DIOB:
		PORTB &= ~(0x01<<pin);   // clear bit
    2484:	a8 e3       	ldi	r26, 0x38	; 56
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e8 e3       	ldi	r30, 0x38	; 56
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <dio_set_level+0xc8>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	2a 95       	dec	r18
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <dio_set_level+0xc4>
    24a4:	80 95       	com	r24
    24a6:	84 23       	and	r24, r20
    24a8:	8c 93       	st	X, r24
		PORTB |= value <<pin; // set value
    24aa:	a8 e3       	ldi	r26, 0x38	; 56
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e8 e3       	ldi	r30, 0x38	; 56
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	48 2f       	mov	r20, r24
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	b9 01       	movw	r22, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <dio_set_level+0xf2>
    24c6:	66 0f       	add	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	8a 95       	dec	r24
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <dio_set_level+0xee>
    24ce:	cb 01       	movw	r24, r22
    24d0:	84 2b       	or	r24, r20
    24d2:	8c 93       	st	X, r24
    24d4:	51 c0       	rjmp	.+162    	; 0x2578 <dio_set_level+0x1a0>
		/* code */
		break;
	case DIOC:
		/* code */
		PORTC &= ~(0x01<<pin);   // clear bit
    24d6:	a5 e3       	ldi	r26, 0x35	; 53
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e5 e3       	ldi	r30, 0x35	; 53
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	48 2f       	mov	r20, r24
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <dio_set_level+0x11a>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	2a 95       	dec	r18
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <dio_set_level+0x116>
    24f6:	80 95       	com	r24
    24f8:	84 23       	and	r24, r20
    24fa:	8c 93       	st	X, r24
		PORTC |= value << pin; // set value
    24fc:	a5 e3       	ldi	r26, 0x35	; 53
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e5 e3       	ldi	r30, 0x35	; 53
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	48 2f       	mov	r20, r24
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	b9 01       	movw	r22, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <dio_set_level+0x144>
    2518:	66 0f       	add	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	8a 95       	dec	r24
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <dio_set_level+0x140>
    2520:	cb 01       	movw	r24, r22
    2522:	84 2b       	or	r24, r20
    2524:	8c 93       	st	X, r24
    2526:	28 c0       	rjmp	.+80     	; 0x2578 <dio_set_level+0x1a0>
		break;
	case DIOD:
		/* code */
		PORTD &= ~(0x01<<pin);   // clear bit
    2528:	a2 e3       	ldi	r26, 0x32	; 50
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e2 e3       	ldi	r30, 0x32	; 50
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	48 2f       	mov	r20, r24
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <dio_set_level+0x16c>
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	2a 95       	dec	r18
    2546:	e2 f7       	brpl	.-8      	; 0x2540 <dio_set_level+0x168>
    2548:	80 95       	com	r24
    254a:	84 23       	and	r24, r20
    254c:	8c 93       	st	X, r24
		PORTD |= value << pin; // set value
    254e:	a2 e3       	ldi	r26, 0x32	; 50
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e2 e3       	ldi	r30, 0x32	; 50
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	48 2f       	mov	r20, r24
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	88 2f       	mov	r24, r24
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	b9 01       	movw	r22, r18
    2568:	02 c0       	rjmp	.+4      	; 0x256e <dio_set_level+0x196>
    256a:	66 0f       	add	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	8a 95       	dec	r24
    2570:	e2 f7       	brpl	.-8      	; 0x256a <dio_set_level+0x192>
    2572:	cb 01       	movw	r24, r22
    2574:	84 2b       	or	r24, r20
    2576:	8c 93       	st	X, r24

	default:
		//report error
		break;
	}
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <dio_get_level>:


dio_level_t dio_get_level(dio_t port, dio_pin_t pin)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <dio_get_level+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <dio_get_level+0x8>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <dio_get_level+0xa>
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	3d 83       	std	Y+5, r19	; 0x05
    25a2:	2c 83       	std	Y+4, r18	; 0x04
    25a4:	4c 81       	ldd	r20, Y+4	; 0x04
    25a6:	5d 81       	ldd	r21, Y+5	; 0x05
    25a8:	41 30       	cpi	r20, 0x01	; 1
    25aa:	51 05       	cpc	r21, r1
    25ac:	49 f1       	breq	.+82     	; 0x2600 <dio_get_level+0x78>
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	9d 81       	ldd	r25, Y+5	; 0x05
    25b2:	82 30       	cpi	r24, 0x02	; 2
    25b4:	91 05       	cpc	r25, r1
    25b6:	34 f4       	brge	.+12     	; 0x25c4 <dio_get_level+0x3c>
    25b8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ba:	3d 81       	ldd	r19, Y+5	; 0x05
    25bc:	21 15       	cp	r18, r1
    25be:	31 05       	cpc	r19, r1
    25c0:	61 f0       	breq	.+24     	; 0x25da <dio_get_level+0x52>
    25c2:	57 c0       	rjmp	.+174    	; 0x2672 <dio_get_level+0xea>
    25c4:	4c 81       	ldd	r20, Y+4	; 0x04
    25c6:	5d 81       	ldd	r21, Y+5	; 0x05
    25c8:	42 30       	cpi	r20, 0x02	; 2
    25ca:	51 05       	cpc	r21, r1
    25cc:	61 f1       	breq	.+88     	; 0x2626 <dio_get_level+0x9e>
    25ce:	8c 81       	ldd	r24, Y+4	; 0x04
    25d0:	9d 81       	ldd	r25, Y+5	; 0x05
    25d2:	83 30       	cpi	r24, 0x03	; 3
    25d4:	91 05       	cpc	r25, r1
    25d6:	d1 f1       	breq	.+116    	; 0x264c <dio_get_level+0xc4>
    25d8:	4c c0       	rjmp	.+152    	; 0x2672 <dio_get_level+0xea>
	{
	case DIOA:
		return 0b01&(PINA>>pin);
    25da:	e9 e3       	ldi	r30, 0x39	; 57
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a9 01       	movw	r20, r18
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <dio_get_level+0x6a>
    25ee:	55 95       	asr	r21
    25f0:	47 95       	ror	r20
    25f2:	8a 95       	dec	r24
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <dio_get_level+0x66>
    25f6:	ca 01       	movw	r24, r20
    25f8:	58 2f       	mov	r21, r24
    25fa:	51 70       	andi	r21, 0x01	; 1
    25fc:	5b 83       	std	Y+3, r21	; 0x03
    25fe:	3a c0       	rjmp	.+116    	; 0x2674 <dio_get_level+0xec>
		break;
	case DIOB:
		return 0b01&(PINB>>pin);
    2600:	e6 e3       	ldi	r30, 0x36	; 54
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a9 01       	movw	r20, r18
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <dio_get_level+0x90>
    2614:	55 95       	asr	r21
    2616:	47 95       	ror	r20
    2618:	8a 95       	dec	r24
    261a:	e2 f7       	brpl	.-8      	; 0x2614 <dio_get_level+0x8c>
    261c:	ca 01       	movw	r24, r20
    261e:	58 2f       	mov	r21, r24
    2620:	51 70       	andi	r21, 0x01	; 1
    2622:	5b 83       	std	Y+3, r21	; 0x03
    2624:	27 c0       	rjmp	.+78     	; 0x2674 <dio_get_level+0xec>
		break;
	case DIOC:
		return 0b01&(PINC>>pin);
    2626:	e3 e3       	ldi	r30, 0x33	; 51
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	a9 01       	movw	r20, r18
    2638:	02 c0       	rjmp	.+4      	; 0x263e <dio_get_level+0xb6>
    263a:	55 95       	asr	r21
    263c:	47 95       	ror	r20
    263e:	8a 95       	dec	r24
    2640:	e2 f7       	brpl	.-8      	; 0x263a <dio_get_level+0xb2>
    2642:	ca 01       	movw	r24, r20
    2644:	58 2f       	mov	r21, r24
    2646:	51 70       	andi	r21, 0x01	; 1
    2648:	5b 83       	std	Y+3, r21	; 0x03
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <dio_get_level+0xec>
		break;
	case DIOD:
		return 0b01&(PIND>>pin);
    264c:	e0 e3       	ldi	r30, 0x30	; 48
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	88 2f       	mov	r24, r24
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a9 01       	movw	r20, r18
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <dio_get_level+0xdc>
    2660:	55 95       	asr	r21
    2662:	47 95       	ror	r20
    2664:	8a 95       	dec	r24
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <dio_get_level+0xd8>
    2668:	ca 01       	movw	r24, r20
    266a:	58 2f       	mov	r21, r24
    266c:	51 70       	andi	r21, 0x01	; 1
    266e:	5b 83       	std	Y+3, r21	; 0x03
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <dio_get_level+0xec>
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <dio_get_level+0xf0>
		break;

	default:
		break;
	}
}
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	8e 83       	std	Y+6, r24	; 0x06
    2678:	8e 81       	ldd	r24, Y+6	; 0x06
    267a:	26 96       	adiw	r28, 0x06	; 6
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <toggle>:

void toggle(dio_t port, dio_pin_t pin){
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	00 d0       	rcall	.+0      	; 0x2692 <toggle+0x6>
    2692:	00 d0       	rcall	.+0      	; 0x2694 <toggle+0x8>
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	3c 83       	std	Y+4, r19	; 0x04
    26a4:	2b 83       	std	Y+3, r18	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	91 05       	cpc	r25, r1
    26ae:	49 f1       	breq	.+82     	; 0x2702 <toggle+0x76>
    26b0:	2b 81       	ldd	r18, Y+3	; 0x03
    26b2:	3c 81       	ldd	r19, Y+4	; 0x04
    26b4:	22 30       	cpi	r18, 0x02	; 2
    26b6:	31 05       	cpc	r19, r1
    26b8:	2c f4       	brge	.+10     	; 0x26c4 <toggle+0x38>
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	61 f0       	breq	.+24     	; 0x26da <toggle+0x4e>
    26c2:	5a c0       	rjmp	.+180    	; 0x2778 <toggle+0xec>
    26c4:	2b 81       	ldd	r18, Y+3	; 0x03
    26c6:	3c 81       	ldd	r19, Y+4	; 0x04
    26c8:	22 30       	cpi	r18, 0x02	; 2
    26ca:	31 05       	cpc	r19, r1
    26cc:	71 f1       	breq	.+92     	; 0x272a <toggle+0x9e>
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	83 30       	cpi	r24, 0x03	; 3
    26d4:	91 05       	cpc	r25, r1
    26d6:	e9 f1       	breq	.+122    	; 0x2752 <toggle+0xc6>
    26d8:	4f c0       	rjmp	.+158    	; 0x2778 <toggle+0xec>
	{
	case DIOA:
		/* code */
		PORTA ^= 1 << pin; // set value
    26da:	ab e3       	ldi	r26, 0x3B	; 59
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	eb e3       	ldi	r30, 0x3B	; 59
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	48 2f       	mov	r20, r24
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 2e       	mov	r0, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <toggle+0x6c>
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	0a 94       	dec	r0
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <toggle+0x68>
    26fc:	84 27       	eor	r24, r20
    26fe:	8c 93       	st	X, r24
    2700:	3b c0       	rjmp	.+118    	; 0x2778 <toggle+0xec>
		break;
	case DIOB:
		
		PORTB ^= 1 << pin; // set value
    2702:	a8 e3       	ldi	r26, 0x38	; 56
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e8 e3       	ldi	r30, 0x38	; 56
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	48 2f       	mov	r20, r24
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	02 2e       	mov	r0, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <toggle+0x94>
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	0a 94       	dec	r0
    2722:	e2 f7       	brpl	.-8      	; 0x271c <toggle+0x90>
    2724:	84 27       	eor	r24, r20
    2726:	8c 93       	st	X, r24
    2728:	27 c0       	rjmp	.+78     	; 0x2778 <toggle+0xec>
		/* code */
		break;
	case DIOC:
		/* code */
		
		PORTC ^= 1 << pin; // set value
    272a:	a5 e3       	ldi	r26, 0x35	; 53
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e5 e3       	ldi	r30, 0x35	; 53
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	48 2f       	mov	r20, r24
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 2e       	mov	r0, r18
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <toggle+0xbc>
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	0a 94       	dec	r0
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <toggle+0xb8>
    274c:	84 27       	eor	r24, r20
    274e:	8c 93       	st	X, r24
    2750:	13 c0       	rjmp	.+38     	; 0x2778 <toggle+0xec>
		break;
	case DIOD:
		/* code */
		
		PORTD ^= 1 << pin; // set value
    2752:	a2 e3       	ldi	r26, 0x32	; 50
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e2 e3       	ldi	r30, 0x32	; 50
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	48 2f       	mov	r20, r24
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	02 2e       	mov	r0, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <toggle+0xe4>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <toggle+0xe0>
    2774:	84 27       	eor	r24, r20
    2776:	8c 93       	st	X, r24

	default:
		//report error
		break;
	}
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <ADC_Init>:
#include"../Common_Macros.h"
#include"../Micro_config.h"

void ADC_Init(){										
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;	        /* Make ADC port as input */
    278e:	ea e3       	ldi	r30, 0x3A	; 58
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	10 82       	st	Z, r1
	ADCSRA = 0x87;          /* Enable ADC, with freq/128  */
    2794:	e6 e2       	ldi	r30, 0x26	; 38
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	87 e8       	ldi	r24, 0x87	; 135
    279a:	80 83       	st	Z, r24
	ADMUX = 0x40;           /* Vref: Avcc, ADC channel: 0 */
    279c:	e7 e2       	ldi	r30, 0x27	; 39
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 e4       	ldi	r24, 0x40	; 64
    27a2:	80 83       	st	Z, r24
}
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <ADC_Read>:

uint8_t ADC_Read(uint8_t channel)							
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	2f 97       	sbiw	r28, 0x0f	; 15
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	8f 87       	std	Y+15, r24	; 0x0f
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
    27c0:	e7 e2       	ldi	r30, 0x27	; 39
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c6:	87 70       	andi	r24, 0x07	; 7
    27c8:	80 64       	ori	r24, 0x40	; 64
    27ca:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
    27cc:	a6 e2       	ldi	r26, 0x26	; 38
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e6 e2       	ldi	r30, 0x26	; 38
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	80 64       	ori	r24, 0x40	; 64
    27d8:	8c 93       	st	X, r24
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
    27da:	e6 e2       	ldi	r30, 0x26	; 38
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	88 2f       	mov	r24, r24
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	80 71       	andi	r24, 0x10	; 16
    27e6:	90 70       	andi	r25, 0x00	; 0
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	b9 f3       	breq	.-18     	; 0x27da <ADC_Read+0x30>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
    27ec:	a6 e2       	ldi	r26, 0x26	; 38
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e6 e2       	ldi	r30, 0x26	; 38
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 61       	ori	r24, 0x10	; 16
    27f8:	8c 93       	st	X, r24
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	a0 e8       	ldi	r26, 0x80	; 128
    2800:	bf e3       	ldi	r27, 0x3F	; 63
    2802:	8b 87       	std	Y+11, r24	; 0x0b
    2804:	9c 87       	std	Y+12, r25	; 0x0c
    2806:	ad 87       	std	Y+13, r26	; 0x0d
    2808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280a:	6b 85       	ldd	r22, Y+11	; 0x0b
    280c:	7c 85       	ldd	r23, Y+12	; 0x0c
    280e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2810:	9e 85       	ldd	r25, Y+14	; 0x0e
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	4a ef       	ldi	r20, 0xFA	; 250
    2818:	54 e4       	ldi	r21, 0x44	; 68
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	8f 83       	std	Y+7, r24	; 0x07
    2824:	98 87       	std	Y+8, r25	; 0x08
    2826:	a9 87       	std	Y+9, r26	; 0x09
    2828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e8       	ldi	r20, 0x80	; 128
    2838:	5f e3       	ldi	r21, 0x3F	; 63
    283a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    283e:	88 23       	and	r24, r24
    2840:	2c f4       	brge	.+10     	; 0x284c <ADC_Read+0xa2>
		__ticks = 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	3f c0       	rjmp	.+126    	; 0x28ca <ADC_Read+0x120>
	else if (__tmp > 65535)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	3f ef       	ldi	r19, 0xFF	; 255
    2858:	4f e7       	ldi	r20, 0x7F	; 127
    285a:	57 e4       	ldi	r21, 0x47	; 71
    285c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2860:	18 16       	cp	r1, r24
    2862:	4c f5       	brge	.+82     	; 0x28b6 <ADC_Read+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2864:	6b 85       	ldd	r22, Y+11	; 0x0b
    2866:	7c 85       	ldd	r23, Y+12	; 0x0c
    2868:	8d 85       	ldd	r24, Y+13	; 0x0d
    286a:	9e 85       	ldd	r25, Y+14	; 0x0e
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e2       	ldi	r20, 0x20	; 32
    2872:	51 e4       	ldi	r21, 0x41	; 65
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	bc 01       	movw	r22, r24
    287e:	cd 01       	movw	r24, r26
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	0f c0       	rjmp	.+30     	; 0x28ac <ADC_Read+0x102>
    288e:	88 ec       	ldi	r24, 0xC8	; 200
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9c 83       	std	Y+4, r25	; 0x04
    2894:	8b 83       	std	Y+3, r24	; 0x03
    2896:	8b 81       	ldd	r24, Y+3	; 0x03
    2898:	9c 81       	ldd	r25, Y+4	; 0x04
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <ADC_Read+0xf0>
    289e:	9c 83       	std	Y+4, r25	; 0x04
    28a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	69 f7       	brne	.-38     	; 0x288e <ADC_Read+0xe4>
    28b4:	14 c0       	rjmp	.+40     	; 0x28de <ADC_Read+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b6:	6f 81       	ldd	r22, Y+7	; 0x07
    28b8:	78 85       	ldd	r23, Y+8	; 0x08
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	9a 83       	std	Y+2, r25	; 0x02
    28d0:	89 83       	std	Y+1, r24	; 0x01
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <ADC_Read+0x12c>
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
    28de:	e4 e2       	ldi	r30, 0x24	; 36
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	2f 96       	adiw	r28, 0x0f	; 15
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <main>:
#include"MCAL\lcd\lcd.h"
#include"MCAL\keypad_new\KPD_interface.h"

#define F_CPU 8000000UL

int main(){
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	64 97       	sbiw	r28, 0x14	; 20
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    290c:	0e 94 47 08 	call	0x108e	; 0x108e <LCD_Init>
	KPD_voidInit();
    2910:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <KPD_voidInit>
	servo_init();
    2914:	0e 94 b4 06 	call	0xd68	; 0xd68 <servo_init>
	ADC_Init();
    2918:	0e 94 c3 13 	call	0x2786	; 0x2786 <ADC_Init>
	uint8_t send;
	uint8_t pass[16];
		while(1){
				uint8_t key=NOT_PRESSED;
    291c:	8f ef       	ldi	r24, 0xFF	; 255
    291e:	8b 83       	std	Y+3, r24	; 0x03
				key=KPD_u8GetPressedKey();
    2920:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <KPD_u8GetPressedKey>
    2924:	8b 83       	std	Y+3, r24	; 0x03
				if(key!=NOT_PRESSED){
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	8f 3f       	cpi	r24, 0xFF	; 255
    292a:	c1 f3       	breq	.-16     	; 0x291c <main+0x24>
					LCD_SendCharacter(key);
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LCD_SendCharacter>
					for(int i = 0 ; i < 16 ; i++){
    2932:	1a 82       	std	Y+2, r1	; 0x02
    2934:	19 82       	std	Y+1, r1	; 0x01
    2936:	1e c0       	rjmp	.+60     	; 0x2974 <main+0x7c>
						if(key == '='){
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	8d 33       	cpi	r24, 0x3D	; 61
    293c:	69 f4       	brne	.+26     	; 0x2958 <main+0x60>
							send = atoi(pass);
    293e:	ce 01       	movw	r24, r28
    2940:	05 96       	adiw	r24, 0x05	; 5
    2942:	0e 94 f7 14 	call	0x29ee	; 0x29ee <atoi>
    2946:	8c 83       	std	Y+4, r24	; 0x04
							servo_cnt(send);
    2948:	8c 81       	ldd	r24, Y+4	; 0x04
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 c0 06 	call	0xd80	; 0xd80 <servo_cnt>
							LCD_ClearScreen();
    2952:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LCD_ClearScreen>
    2956:	e2 cf       	rjmp	.-60     	; 0x291c <main+0x24>
							break;
						}
						pass[i] = key;
    2958:	29 81       	ldd	r18, Y+1	; 0x01
    295a:	3a 81       	ldd	r19, Y+2	; 0x02
    295c:	ce 01       	movw	r24, r28
    295e:	05 96       	adiw	r24, 0x05	; 5
    2960:	fc 01       	movw	r30, r24
    2962:	e2 0f       	add	r30, r18
    2964:	f3 1f       	adc	r31, r19
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	80 83       	st	Z, r24
		while(1){
				uint8_t key=NOT_PRESSED;
				key=KPD_u8GetPressedKey();
				if(key!=NOT_PRESSED){
					LCD_SendCharacter(key);
					for(int i = 0 ; i < 16 ; i++){
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	80 31       	cpi	r24, 0x10	; 16
    297a:	91 05       	cpc	r25, r1
    297c:	ec f2       	brlt	.-70     	; 0x2938 <main+0x40>
    297e:	ce cf       	rjmp	.-100    	; 0x291c <main+0x24>

00002980 <__prologue_saves__>:
    2980:	2f 92       	push	r2
    2982:	3f 92       	push	r3
    2984:	4f 92       	push	r4
    2986:	5f 92       	push	r5
    2988:	6f 92       	push	r6
    298a:	7f 92       	push	r7
    298c:	8f 92       	push	r8
    298e:	9f 92       	push	r9
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	ca 1b       	sub	r28, r26
    29aa:	db 0b       	sbc	r29, r27
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	09 94       	ijmp

000029b8 <__epilogue_restores__>:
    29b8:	2a 88       	ldd	r2, Y+18	; 0x12
    29ba:	39 88       	ldd	r3, Y+17	; 0x11
    29bc:	48 88       	ldd	r4, Y+16	; 0x10
    29be:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ca:	b9 84       	ldd	r11, Y+9	; 0x09
    29cc:	c8 84       	ldd	r12, Y+8	; 0x08
    29ce:	df 80       	ldd	r13, Y+7	; 0x07
    29d0:	ee 80       	ldd	r14, Y+6	; 0x06
    29d2:	fd 80       	ldd	r15, Y+5	; 0x05
    29d4:	0c 81       	ldd	r16, Y+4	; 0x04
    29d6:	1b 81       	ldd	r17, Y+3	; 0x03
    29d8:	aa 81       	ldd	r26, Y+2	; 0x02
    29da:	b9 81       	ldd	r27, Y+1	; 0x01
    29dc:	ce 0f       	add	r28, r30
    29de:	d1 1d       	adc	r29, r1
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	ed 01       	movw	r28, r26
    29ec:	08 95       	ret

000029ee <atoi>:
    29ee:	fc 01       	movw	r30, r24
    29f0:	88 27       	eor	r24, r24
    29f2:	99 27       	eor	r25, r25
    29f4:	e8 94       	clt
    29f6:	21 91       	ld	r18, Z+
    29f8:	20 32       	cpi	r18, 0x20	; 32
    29fa:	e9 f3       	breq	.-6      	; 0x29f6 <atoi+0x8>
    29fc:	29 30       	cpi	r18, 0x09	; 9
    29fe:	10 f0       	brcs	.+4      	; 0x2a04 <atoi+0x16>
    2a00:	2e 30       	cpi	r18, 0x0E	; 14
    2a02:	c8 f3       	brcs	.-14     	; 0x29f6 <atoi+0x8>
    2a04:	2b 32       	cpi	r18, 0x2B	; 43
    2a06:	41 f0       	breq	.+16     	; 0x2a18 <atoi+0x2a>
    2a08:	2d 32       	cpi	r18, 0x2D	; 45
    2a0a:	39 f4       	brne	.+14     	; 0x2a1a <atoi+0x2c>
    2a0c:	68 94       	set
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <atoi+0x2a>
    2a10:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__mulhi_const_10>
    2a14:	82 0f       	add	r24, r18
    2a16:	91 1d       	adc	r25, r1
    2a18:	21 91       	ld	r18, Z+
    2a1a:	20 53       	subi	r18, 0x30	; 48
    2a1c:	2a 30       	cpi	r18, 0x0A	; 10
    2a1e:	c0 f3       	brcs	.-16     	; 0x2a10 <atoi+0x22>
    2a20:	1e f4       	brtc	.+6      	; 0x2a28 <atoi+0x3a>
    2a22:	90 95       	com	r25
    2a24:	81 95       	neg	r24
    2a26:	9f 4f       	sbci	r25, 0xFF	; 255
    2a28:	08 95       	ret

00002a2a <itoa>:
    2a2a:	fb 01       	movw	r30, r22
    2a2c:	9f 01       	movw	r18, r30
    2a2e:	e8 94       	clt
    2a30:	42 30       	cpi	r20, 0x02	; 2
    2a32:	c4 f0       	brlt	.+48     	; 0x2a64 <itoa+0x3a>
    2a34:	45 32       	cpi	r20, 0x25	; 37
    2a36:	b4 f4       	brge	.+44     	; 0x2a64 <itoa+0x3a>
    2a38:	4a 30       	cpi	r20, 0x0A	; 10
    2a3a:	29 f4       	brne	.+10     	; 0x2a46 <itoa+0x1c>
    2a3c:	97 fb       	bst	r25, 7
    2a3e:	1e f4       	brtc	.+6      	; 0x2a46 <itoa+0x1c>
    2a40:	90 95       	com	r25
    2a42:	81 95       	neg	r24
    2a44:	9f 4f       	sbci	r25, 0xFF	; 255
    2a46:	64 2f       	mov	r22, r20
    2a48:	77 27       	eor	r23, r23
    2a4a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__udivmodhi4>
    2a4e:	80 5d       	subi	r24, 0xD0	; 208
    2a50:	8a 33       	cpi	r24, 0x3A	; 58
    2a52:	0c f0       	brlt	.+2      	; 0x2a56 <itoa+0x2c>
    2a54:	89 5d       	subi	r24, 0xD9	; 217
    2a56:	81 93       	st	Z+, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	a1 f7       	brne	.-24     	; 0x2a46 <itoa+0x1c>
    2a5e:	16 f4       	brtc	.+4      	; 0x2a64 <itoa+0x3a>
    2a60:	5d e2       	ldi	r21, 0x2D	; 45
    2a62:	51 93       	st	Z+, r21
    2a64:	10 82       	st	Z, r1
    2a66:	c9 01       	movw	r24, r18
    2a68:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <strrev>

00002a6c <__mulhi_const_10>:
    2a6c:	7a e0       	ldi	r23, 0x0A	; 10
    2a6e:	97 9f       	mul	r25, r23
    2a70:	90 2d       	mov	r25, r0
    2a72:	87 9f       	mul	r24, r23
    2a74:	80 2d       	mov	r24, r0
    2a76:	91 0d       	add	r25, r1
    2a78:	11 24       	eor	r1, r1
    2a7a:	08 95       	ret

00002a7c <strrev>:
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	fc 01       	movw	r30, r24
    2a80:	67 2f       	mov	r22, r23
    2a82:	71 91       	ld	r23, Z+
    2a84:	77 23       	and	r23, r23
    2a86:	e1 f7       	brne	.-8      	; 0x2a80 <strrev+0x4>
    2a88:	32 97       	sbiw	r30, 0x02	; 2
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <strrev+0x18>
    2a8c:	7c 91       	ld	r23, X
    2a8e:	6d 93       	st	X+, r22
    2a90:	70 83       	st	Z, r23
    2a92:	62 91       	ld	r22, -Z
    2a94:	ae 17       	cp	r26, r30
    2a96:	bf 07       	cpc	r27, r31
    2a98:	c8 f3       	brcs	.-14     	; 0x2a8c <strrev+0x10>
    2a9a:	08 95       	ret

00002a9c <__udivmodhi4>:
    2a9c:	aa 1b       	sub	r26, r26
    2a9e:	bb 1b       	sub	r27, r27
    2aa0:	51 e1       	ldi	r21, 0x11	; 17
    2aa2:	07 c0       	rjmp	.+14     	; 0x2ab2 <__udivmodhi4_ep>

00002aa4 <__udivmodhi4_loop>:
    2aa4:	aa 1f       	adc	r26, r26
    2aa6:	bb 1f       	adc	r27, r27
    2aa8:	a6 17       	cp	r26, r22
    2aaa:	b7 07       	cpc	r27, r23
    2aac:	10 f0       	brcs	.+4      	; 0x2ab2 <__udivmodhi4_ep>
    2aae:	a6 1b       	sub	r26, r22
    2ab0:	b7 0b       	sbc	r27, r23

00002ab2 <__udivmodhi4_ep>:
    2ab2:	88 1f       	adc	r24, r24
    2ab4:	99 1f       	adc	r25, r25
    2ab6:	5a 95       	dec	r21
    2ab8:	a9 f7       	brne	.-22     	; 0x2aa4 <__udivmodhi4_loop>
    2aba:	80 95       	com	r24
    2abc:	90 95       	com	r25
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	08 95       	ret

00002ac4 <_exit>:
    2ac4:	f8 94       	cli

00002ac6 <__stop_program>:
    2ac6:	ff cf       	rjmp	.-2      	; 0x2ac6 <__stop_program>
